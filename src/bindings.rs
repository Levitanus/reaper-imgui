#![doc = r" This file is automatically generated by executing `cargo build --features generate`."]
#![doc = r""]
#![doc = r" **Make adjustments in `parser.rs`, not in this file!**"]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use rea_rs_low::PluginContext;
use std::ffi::c_void;
use std::fmt;
pub type Context = *mut c_void;
pub type DrawList = *mut c_void;
pub type DrawListSplitter = *mut c_void;
pub type Font = *mut c_void;
pub type Image = *mut c_void;
pub type ImageSet = *mut c_void;
pub type ListClipper = *mut c_void;
pub type Resource = *mut c_void;
pub type TextFilter = *mut c_void;
pub type Viewport = *mut c_void;
#[derive(Clone)]
pub struct ImGui {
    pointers: FunctionPointers,
    plugin_context: Option<PluginContext>,
    pub Dir_Down: Option<i32>,
    pub Dir_Left: Option<i32>,
    pub Dir_None: Option<i32>,
    pub Dir_Right: Option<i32>,
    pub Dir_Up: Option<i32>,
    pub ButtonFlags_MouseButtonLeft: Option<i32>,
    pub ButtonFlags_MouseButtonMiddle: Option<i32>,
    pub ButtonFlags_MouseButtonRight: Option<i32>,
    pub ButtonFlags_None: Option<i32>,
    pub ColorEditFlags_NoAlpha: Option<i32>,
    pub ColorEditFlags_NoBorder: Option<i32>,
    pub ColorEditFlags_NoDragDrop: Option<i32>,
    pub ColorEditFlags_NoInputs: Option<i32>,
    pub ColorEditFlags_NoLabel: Option<i32>,
    pub ColorEditFlags_NoOptions: Option<i32>,
    pub ColorEditFlags_NoPicker: Option<i32>,
    pub ColorEditFlags_NoSidePreview: Option<i32>,
    pub ColorEditFlags_NoSmallPreview: Option<i32>,
    pub ColorEditFlags_NoTooltip: Option<i32>,
    pub ColorEditFlags_None: Option<i32>,
    pub ColorEditFlags_AlphaBar: Option<i32>,
    pub ColorEditFlags_AlphaPreview: Option<i32>,
    pub ColorEditFlags_AlphaPreviewHalf: Option<i32>,
    pub ColorEditFlags_DisplayHSV: Option<i32>,
    pub ColorEditFlags_DisplayHex: Option<i32>,
    pub ColorEditFlags_DisplayRGB: Option<i32>,
    pub ColorEditFlags_Float: Option<i32>,
    pub ColorEditFlags_InputHSV: Option<i32>,
    pub ColorEditFlags_InputRGB: Option<i32>,
    pub ColorEditFlags_PickerHueBar: Option<i32>,
    pub ColorEditFlags_PickerHueWheel: Option<i32>,
    pub ColorEditFlags_Uint8: Option<i32>,
    pub ComboFlags_HeightLarge: Option<i32>,
    pub ComboFlags_HeightLargest: Option<i32>,
    pub ComboFlags_HeightRegular: Option<i32>,
    pub ComboFlags_HeightSmall: Option<i32>,
    pub ComboFlags_NoArrowButton: Option<i32>,
    pub ComboFlags_NoPreview: Option<i32>,
    pub ComboFlags_None: Option<i32>,
    pub ComboFlags_PopupAlignLeft: Option<i32>,
    pub SelectableFlags_AllowDoubleClick: Option<i32>,
    pub SelectableFlags_AllowItemOverlap: Option<i32>,
    pub SelectableFlags_Disabled: Option<i32>,
    pub SelectableFlags_DontClosePopups: Option<i32>,
    pub SelectableFlags_None: Option<i32>,
    pub SelectableFlags_SpanAllColumns: Option<i32>,
    pub ConfigFlags_DockingEnable: Option<i32>,
    pub ConfigFlags_NavEnableKeyboard: Option<i32>,
    pub ConfigFlags_NavEnableSetMousePos: Option<i32>,
    pub ConfigFlags_NavNoCaptureKeyboard: Option<i32>,
    pub ConfigFlags_NoMouse: Option<i32>,
    pub ConfigFlags_NoMouseCursorChange: Option<i32>,
    pub ConfigFlags_NoSavedSettings: Option<i32>,
    pub ConfigFlags_None: Option<i32>,
    pub ConfigVar_DockingNoSplit: Option<i32>,
    pub ConfigVar_DockingTransparentPayload: Option<i32>,
    pub ConfigVar_DockingWithShift: Option<i32>,
    pub ConfigVar_DragClickToInputText: Option<i32>,
    pub ConfigVar_Flags: Option<i32>,
    pub ConfigVar_HoverDelayNormal: Option<i32>,
    pub ConfigVar_HoverDelayShort: Option<i32>,
    pub ConfigVar_InputTextCursorBlink: Option<i32>,
    pub ConfigVar_InputTextEnterKeepActive: Option<i32>,
    pub ConfigVar_InputTrickleEventQueue: Option<i32>,
    pub ConfigVar_KeyRepeatDelay: Option<i32>,
    pub ConfigVar_KeyRepeatRate: Option<i32>,
    pub ConfigVar_MacOSXBehaviors: Option<i32>,
    pub ConfigVar_MouseDoubleClickMaxDist: Option<i32>,
    pub ConfigVar_MouseDoubleClickTime: Option<i32>,
    pub ConfigVar_MouseDragThreshold: Option<i32>,
    pub ConfigVar_ViewportsNoDecoration: Option<i32>,
    pub ConfigVar_WindowsMoveFromTitleBarOnly: Option<i32>,
    pub ConfigVar_WindowsResizeFromEdges: Option<i32>,
    pub DragDropFlags_None: Option<i32>,
    pub DragDropFlags_AcceptBeforeDelivery: Option<i32>,
    pub DragDropFlags_AcceptNoDrawDefaultRect: Option<i32>,
    pub DragDropFlags_AcceptNoPreviewTooltip: Option<i32>,
    pub DragDropFlags_AcceptPeekOnly: Option<i32>,
    pub DragDropFlags_SourceAllowNullID: Option<i32>,
    pub DragDropFlags_SourceAutoExpirePayload: Option<i32>,
    pub DragDropFlags_SourceExtern: Option<i32>,
    pub DragDropFlags_SourceNoDisableHover: Option<i32>,
    pub DragDropFlags_SourceNoHoldToOpenOthers: Option<i32>,
    pub DragDropFlags_SourceNoPreviewTooltip: Option<i32>,
    pub SliderFlags_AlwaysClamp: Option<i32>,
    pub SliderFlags_Logarithmic: Option<i32>,
    pub SliderFlags_NoInput: Option<i32>,
    pub SliderFlags_NoRoundToFormat: Option<i32>,
    pub SliderFlags_None: Option<i32>,
    pub DrawFlags_Closed: Option<i32>,
    pub DrawFlags_None: Option<i32>,
    pub DrawFlags_RoundCornersAll: Option<i32>,
    pub DrawFlags_RoundCornersBottom: Option<i32>,
    pub DrawFlags_RoundCornersBottomLeft: Option<i32>,
    pub DrawFlags_RoundCornersBottomRight: Option<i32>,
    pub DrawFlags_RoundCornersLeft: Option<i32>,
    pub DrawFlags_RoundCornersNone: Option<i32>,
    pub DrawFlags_RoundCornersRight: Option<i32>,
    pub DrawFlags_RoundCornersTop: Option<i32>,
    pub DrawFlags_RoundCornersTopLeft: Option<i32>,
    pub DrawFlags_RoundCornersTopRight: Option<i32>,
    pub FontFlags_Bold: Option<i32>,
    pub FontFlags_Italic: Option<i32>,
    pub FontFlags_None: Option<i32>,
    pub HoveredFlags_AllowWhenBlockedByActiveItem: Option<i32>,
    pub HoveredFlags_AllowWhenBlockedByPopup: Option<i32>,
    pub HoveredFlags_DelayNormal: Option<i32>,
    pub HoveredFlags_DelayShort: Option<i32>,
    pub HoveredFlags_NoNavOverride: Option<i32>,
    pub HoveredFlags_NoSharedDelay: Option<i32>,
    pub HoveredFlags_None: Option<i32>,
    pub HoveredFlags_AllowWhenDisabled: Option<i32>,
    pub HoveredFlags_AllowWhenOverlapped: Option<i32>,
    pub HoveredFlags_RectOnly: Option<i32>,
    pub HoveredFlags_AnyWindow: Option<i32>,
    pub HoveredFlags_ChildWindows: Option<i32>,
    pub HoveredFlags_DockHierarchy: Option<i32>,
    pub HoveredFlags_NoPopupHierarchy: Option<i32>,
    pub HoveredFlags_RootAndChildWindows: Option<i32>,
    pub HoveredFlags_RootWindow: Option<i32>,
    pub Key_0: Option<i32>,
    pub Key_1: Option<i32>,
    pub Key_2: Option<i32>,
    pub Key_3: Option<i32>,
    pub Key_4: Option<i32>,
    pub Key_5: Option<i32>,
    pub Key_6: Option<i32>,
    pub Key_7: Option<i32>,
    pub Key_8: Option<i32>,
    pub Key_9: Option<i32>,
    pub Key_A: Option<i32>,
    pub Key_Apostrophe: Option<i32>,
    pub Key_B: Option<i32>,
    pub Key_Backslash: Option<i32>,
    pub Key_Backspace: Option<i32>,
    pub Key_C: Option<i32>,
    pub Key_CapsLock: Option<i32>,
    pub Key_Comma: Option<i32>,
    pub Key_D: Option<i32>,
    pub Key_Delete: Option<i32>,
    pub Key_DownArrow: Option<i32>,
    pub Key_E: Option<i32>,
    pub Key_End: Option<i32>,
    pub Key_Enter: Option<i32>,
    pub Key_Equal: Option<i32>,
    pub Key_Escape: Option<i32>,
    pub Key_F: Option<i32>,
    pub Key_F1: Option<i32>,
    pub Key_F10: Option<i32>,
    pub Key_F11: Option<i32>,
    pub Key_F12: Option<i32>,
    pub Key_F2: Option<i32>,
    pub Key_F3: Option<i32>,
    pub Key_F4: Option<i32>,
    pub Key_F5: Option<i32>,
    pub Key_F6: Option<i32>,
    pub Key_F7: Option<i32>,
    pub Key_F8: Option<i32>,
    pub Key_F9: Option<i32>,
    pub Key_G: Option<i32>,
    pub Key_GraveAccent: Option<i32>,
    pub Key_H: Option<i32>,
    pub Key_Home: Option<i32>,
    pub Key_I: Option<i32>,
    pub Key_Insert: Option<i32>,
    pub Key_J: Option<i32>,
    pub Key_K: Option<i32>,
    pub Key_Keypad0: Option<i32>,
    pub Key_Keypad1: Option<i32>,
    pub Key_Keypad2: Option<i32>,
    pub Key_Keypad3: Option<i32>,
    pub Key_Keypad4: Option<i32>,
    pub Key_Keypad5: Option<i32>,
    pub Key_Keypad6: Option<i32>,
    pub Key_Keypad7: Option<i32>,
    pub Key_Keypad8: Option<i32>,
    pub Key_Keypad9: Option<i32>,
    pub Key_KeypadAdd: Option<i32>,
    pub Key_KeypadDecimal: Option<i32>,
    pub Key_KeypadDivide: Option<i32>,
    pub Key_KeypadEnter: Option<i32>,
    pub Key_KeypadEqual: Option<i32>,
    pub Key_KeypadMultiply: Option<i32>,
    pub Key_KeypadSubtract: Option<i32>,
    pub Key_L: Option<i32>,
    pub Key_LeftAlt: Option<i32>,
    pub Key_LeftArrow: Option<i32>,
    pub Key_LeftBracket: Option<i32>,
    pub Key_LeftCtrl: Option<i32>,
    pub Key_LeftShift: Option<i32>,
    pub Key_LeftSuper: Option<i32>,
    pub Key_M: Option<i32>,
    pub Key_Menu: Option<i32>,
    pub Key_Minus: Option<i32>,
    pub Key_N: Option<i32>,
    pub Key_NumLock: Option<i32>,
    pub Key_O: Option<i32>,
    pub Key_P: Option<i32>,
    pub Key_PageDown: Option<i32>,
    pub Key_PageUp: Option<i32>,
    pub Key_Pause: Option<i32>,
    pub Key_Period: Option<i32>,
    pub Key_PrintScreen: Option<i32>,
    pub Key_Q: Option<i32>,
    pub Key_R: Option<i32>,
    pub Key_RightAlt: Option<i32>,
    pub Key_RightArrow: Option<i32>,
    pub Key_RightBracket: Option<i32>,
    pub Key_RightCtrl: Option<i32>,
    pub Key_RightShift: Option<i32>,
    pub Key_RightSuper: Option<i32>,
    pub Key_S: Option<i32>,
    pub Key_ScrollLock: Option<i32>,
    pub Key_Semicolon: Option<i32>,
    pub Key_Slash: Option<i32>,
    pub Key_Space: Option<i32>,
    pub Key_T: Option<i32>,
    pub Key_Tab: Option<i32>,
    pub Key_U: Option<i32>,
    pub Key_UpArrow: Option<i32>,
    pub Key_V: Option<i32>,
    pub Key_W: Option<i32>,
    pub Key_X: Option<i32>,
    pub Key_Y: Option<i32>,
    pub Key_Z: Option<i32>,
    pub Mod_Alt: Option<i32>,
    pub Mod_Ctrl: Option<i32>,
    pub Mod_None: Option<i32>,
    pub Mod_Shift: Option<i32>,
    pub Mod_Shortcut: Option<i32>,
    pub Mod_Super: Option<i32>,
    pub Key_MouseLeft: Option<i32>,
    pub Key_MouseMiddle: Option<i32>,
    pub Key_MouseRight: Option<i32>,
    pub Key_MouseWheelX: Option<i32>,
    pub Key_MouseWheelY: Option<i32>,
    pub Key_MouseX1: Option<i32>,
    pub Key_MouseX2: Option<i32>,
    pub MouseButton_Left: Option<i32>,
    pub MouseButton_Middle: Option<i32>,
    pub MouseButton_Right: Option<i32>,
    pub MouseCursor_Arrow: Option<i32>,
    pub MouseCursor_Hand: Option<i32>,
    pub MouseCursor_NotAllowed: Option<i32>,
    pub MouseCursor_ResizeAll: Option<i32>,
    pub MouseCursor_ResizeEW: Option<i32>,
    pub MouseCursor_ResizeNESW: Option<i32>,
    pub MouseCursor_ResizeNS: Option<i32>,
    pub MouseCursor_ResizeNWSE: Option<i32>,
    pub MouseCursor_TextInput: Option<i32>,
    pub PopupFlags_NoOpenOverExistingPopup: Option<i32>,
    pub PopupFlags_None: Option<i32>,
    pub PopupFlags_MouseButtonLeft: Option<i32>,
    pub PopupFlags_MouseButtonMiddle: Option<i32>,
    pub PopupFlags_MouseButtonRight: Option<i32>,
    pub PopupFlags_NoOpenOverItems: Option<i32>,
    pub PopupFlags_AnyPopup: Option<i32>,
    pub PopupFlags_AnyPopupId: Option<i32>,
    pub PopupFlags_AnyPopupLevel: Option<i32>,
    pub Col_Border: Option<i32>,
    pub Col_BorderShadow: Option<i32>,
    pub Col_Button: Option<i32>,
    pub Col_ButtonActive: Option<i32>,
    pub Col_ButtonHovered: Option<i32>,
    pub Col_CheckMark: Option<i32>,
    pub Col_ChildBg: Option<i32>,
    pub Col_DockingEmptyBg: Option<i32>,
    pub Col_DockingPreview: Option<i32>,
    pub Col_DragDropTarget: Option<i32>,
    pub Col_FrameBg: Option<i32>,
    pub Col_FrameBgActive: Option<i32>,
    pub Col_FrameBgHovered: Option<i32>,
    pub Col_Header: Option<i32>,
    pub Col_HeaderActive: Option<i32>,
    pub Col_HeaderHovered: Option<i32>,
    pub Col_MenuBarBg: Option<i32>,
    pub Col_ModalWindowDimBg: Option<i32>,
    pub Col_NavHighlight: Option<i32>,
    pub Col_NavWindowingDimBg: Option<i32>,
    pub Col_NavWindowingHighlight: Option<i32>,
    pub Col_PlotHistogram: Option<i32>,
    pub Col_PlotHistogramHovered: Option<i32>,
    pub Col_PlotLines: Option<i32>,
    pub Col_PlotLinesHovered: Option<i32>,
    pub Col_PopupBg: Option<i32>,
    pub Col_ResizeGrip: Option<i32>,
    pub Col_ResizeGripActive: Option<i32>,
    pub Col_ResizeGripHovered: Option<i32>,
    pub Col_ScrollbarBg: Option<i32>,
    pub Col_ScrollbarGrab: Option<i32>,
    pub Col_ScrollbarGrabActive: Option<i32>,
    pub Col_ScrollbarGrabHovered: Option<i32>,
    pub Col_Separator: Option<i32>,
    pub Col_SeparatorActive: Option<i32>,
    pub Col_SeparatorHovered: Option<i32>,
    pub Col_SliderGrab: Option<i32>,
    pub Col_SliderGrabActive: Option<i32>,
    pub Col_Tab: Option<i32>,
    pub Col_TabActive: Option<i32>,
    pub Col_TabHovered: Option<i32>,
    pub Col_TabUnfocused: Option<i32>,
    pub Col_TabUnfocusedActive: Option<i32>,
    pub Col_TableBorderLight: Option<i32>,
    pub Col_TableBorderStrong: Option<i32>,
    pub Col_TableHeaderBg: Option<i32>,
    pub Col_TableRowBg: Option<i32>,
    pub Col_TableRowBgAlt: Option<i32>,
    pub Col_Text: Option<i32>,
    pub Col_TextDisabled: Option<i32>,
    pub Col_TextSelectedBg: Option<i32>,
    pub Col_TitleBg: Option<i32>,
    pub Col_TitleBgActive: Option<i32>,
    pub Col_TitleBgCollapsed: Option<i32>,
    pub Col_WindowBg: Option<i32>,
    pub StyleVar_Alpha: Option<i32>,
    pub StyleVar_ButtonTextAlign: Option<i32>,
    pub StyleVar_CellPadding: Option<i32>,
    pub StyleVar_ChildBorderSize: Option<i32>,
    pub StyleVar_ChildRounding: Option<i32>,
    pub StyleVar_DisabledAlpha: Option<i32>,
    pub StyleVar_FrameBorderSize: Option<i32>,
    pub StyleVar_FramePadding: Option<i32>,
    pub StyleVar_FrameRounding: Option<i32>,
    pub StyleVar_GrabMinSize: Option<i32>,
    pub StyleVar_GrabRounding: Option<i32>,
    pub StyleVar_IndentSpacing: Option<i32>,
    pub StyleVar_ItemInnerSpacing: Option<i32>,
    pub StyleVar_ItemSpacing: Option<i32>,
    pub StyleVar_PopupBorderSize: Option<i32>,
    pub StyleVar_PopupRounding: Option<i32>,
    pub StyleVar_ScrollbarRounding: Option<i32>,
    pub StyleVar_ScrollbarSize: Option<i32>,
    pub StyleVar_SelectableTextAlign: Option<i32>,
    pub StyleVar_TabRounding: Option<i32>,
    pub StyleVar_WindowBorderSize: Option<i32>,
    pub StyleVar_WindowMinSize: Option<i32>,
    pub StyleVar_WindowPadding: Option<i32>,
    pub StyleVar_WindowRounding: Option<i32>,
    pub StyleVar_WindowTitleAlign: Option<i32>,
    pub TabBarFlags_AutoSelectNewTabs: Option<i32>,
    pub TabBarFlags_FittingPolicyResizeDown: Option<i32>,
    pub TabBarFlags_FittingPolicyScroll: Option<i32>,
    pub TabBarFlags_NoCloseWithMiddleMouseButton: Option<i32>,
    pub TabBarFlags_NoTabListScrollingButtons: Option<i32>,
    pub TabBarFlags_NoTooltip: Option<i32>,
    pub TabBarFlags_None: Option<i32>,
    pub TabBarFlags_Reorderable: Option<i32>,
    pub TabBarFlags_TabListPopupButton: Option<i32>,
    pub TabItemFlags_Leading: Option<i32>,
    pub TabItemFlags_NoCloseWithMiddleMouseButton: Option<i32>,
    pub TabItemFlags_NoPushId: Option<i32>,
    pub TabItemFlags_NoReorder: Option<i32>,
    pub TabItemFlags_NoTooltip: Option<i32>,
    pub TabItemFlags_None: Option<i32>,
    pub TabItemFlags_SetSelected: Option<i32>,
    pub TabItemFlags_Trailing: Option<i32>,
    pub TabItemFlags_UnsavedDocument: Option<i32>,
    pub TableRowFlags_Headers: Option<i32>,
    pub TableRowFlags_None: Option<i32>,
    pub TableBgTarget_CellBg: Option<i32>,
    pub TableBgTarget_None: Option<i32>,
    pub TableBgTarget_RowBg0: Option<i32>,
    pub TableBgTarget_RowBg1: Option<i32>,
    pub TableColumnFlags_None: Option<i32>,
    pub TableColumnFlags_DefaultHide: Option<i32>,
    pub TableColumnFlags_DefaultSort: Option<i32>,
    pub TableColumnFlags_Disabled: Option<i32>,
    pub TableColumnFlags_IndentDisable: Option<i32>,
    pub TableColumnFlags_IndentEnable: Option<i32>,
    pub TableColumnFlags_NoClip: Option<i32>,
    pub TableColumnFlags_NoHeaderLabel: Option<i32>,
    pub TableColumnFlags_NoHeaderWidth: Option<i32>,
    pub TableColumnFlags_NoHide: Option<i32>,
    pub TableColumnFlags_NoReorder: Option<i32>,
    pub TableColumnFlags_NoResize: Option<i32>,
    pub TableColumnFlags_NoSort: Option<i32>,
    pub TableColumnFlags_NoSortAscending: Option<i32>,
    pub TableColumnFlags_NoSortDescending: Option<i32>,
    pub TableColumnFlags_PreferSortAscending: Option<i32>,
    pub TableColumnFlags_PreferSortDescending: Option<i32>,
    pub TableColumnFlags_WidthFixed: Option<i32>,
    pub TableColumnFlags_WidthStretch: Option<i32>,
    pub TableColumnFlags_IsEnabled: Option<i32>,
    pub TableColumnFlags_IsHovered: Option<i32>,
    pub TableColumnFlags_IsSorted: Option<i32>,
    pub TableColumnFlags_IsVisible: Option<i32>,
    pub SortDirection_Ascending: Option<i32>,
    pub SortDirection_Descending: Option<i32>,
    pub SortDirection_None: Option<i32>,
    pub TableFlags_None: Option<i32>,
    pub TableFlags_NoClip: Option<i32>,
    pub TableFlags_Borders: Option<i32>,
    pub TableFlags_BordersH: Option<i32>,
    pub TableFlags_BordersInner: Option<i32>,
    pub TableFlags_BordersInnerH: Option<i32>,
    pub TableFlags_BordersInnerV: Option<i32>,
    pub TableFlags_BordersOuter: Option<i32>,
    pub TableFlags_BordersOuterH: Option<i32>,
    pub TableFlags_BordersOuterV: Option<i32>,
    pub TableFlags_BordersV: Option<i32>,
    pub TableFlags_RowBg: Option<i32>,
    pub TableFlags_ContextMenuInBody: Option<i32>,
    pub TableFlags_Hideable: Option<i32>,
    pub TableFlags_NoSavedSettings: Option<i32>,
    pub TableFlags_Reorderable: Option<i32>,
    pub TableFlags_Resizable: Option<i32>,
    pub TableFlags_Sortable: Option<i32>,
    pub TableFlags_NoPadInnerX: Option<i32>,
    pub TableFlags_NoPadOuterX: Option<i32>,
    pub TableFlags_PadOuterX: Option<i32>,
    pub TableFlags_ScrollX: Option<i32>,
    pub TableFlags_ScrollY: Option<i32>,
    pub TableFlags_NoHostExtendX: Option<i32>,
    pub TableFlags_NoHostExtendY: Option<i32>,
    pub TableFlags_NoKeepColumnsVisible: Option<i32>,
    pub TableFlags_PreciseWidths: Option<i32>,
    pub TableFlags_SizingFixedFit: Option<i32>,
    pub TableFlags_SizingFixedSame: Option<i32>,
    pub TableFlags_SizingStretchProp: Option<i32>,
    pub TableFlags_SizingStretchSame: Option<i32>,
    pub TableFlags_SortMulti: Option<i32>,
    pub TableFlags_SortTristate: Option<i32>,
    pub InputTextFlags_AllowTabInput: Option<i32>,
    pub InputTextFlags_AlwaysOverwrite: Option<i32>,
    pub InputTextFlags_AutoSelectAll: Option<i32>,
    pub InputTextFlags_CharsDecimal: Option<i32>,
    pub InputTextFlags_CharsHexadecimal: Option<i32>,
    pub InputTextFlags_CharsNoBlank: Option<i32>,
    pub InputTextFlags_CharsScientific: Option<i32>,
    pub InputTextFlags_CharsUppercase: Option<i32>,
    pub InputTextFlags_CtrlEnterForNewLine: Option<i32>,
    pub InputTextFlags_EnterReturnsTrue: Option<i32>,
    pub InputTextFlags_EscapeClearsAll: Option<i32>,
    pub InputTextFlags_NoHorizontalScroll: Option<i32>,
    pub InputTextFlags_NoUndoRedo: Option<i32>,
    pub InputTextFlags_None: Option<i32>,
    pub InputTextFlags_Password: Option<i32>,
    pub InputTextFlags_ReadOnly: Option<i32>,
    pub TreeNodeFlags_AllowItemOverlap: Option<i32>,
    pub TreeNodeFlags_Bullet: Option<i32>,
    pub TreeNodeFlags_CollapsingHeader: Option<i32>,
    pub TreeNodeFlags_DefaultOpen: Option<i32>,
    pub TreeNodeFlags_FramePadding: Option<i32>,
    pub TreeNodeFlags_Framed: Option<i32>,
    pub TreeNodeFlags_Leaf: Option<i32>,
    pub TreeNodeFlags_NoAutoOpenOnLog: Option<i32>,
    pub TreeNodeFlags_NoTreePushOnOpen: Option<i32>,
    pub TreeNodeFlags_None: Option<i32>,
    pub TreeNodeFlags_OpenOnArrow: Option<i32>,
    pub TreeNodeFlags_OpenOnDoubleClick: Option<i32>,
    pub TreeNodeFlags_Selected: Option<i32>,
    pub TreeNodeFlags_SpanAvailWidth: Option<i32>,
    pub TreeNodeFlags_SpanFullWidth: Option<i32>,
    pub Cond_Always: Option<i32>,
    pub Cond_Appearing: Option<i32>,
    pub Cond_FirstUseEver: Option<i32>,
    pub Cond_Once: Option<i32>,
    pub WindowFlags_AlwaysAutoResize: Option<i32>,
    pub WindowFlags_AlwaysHorizontalScrollbar: Option<i32>,
    pub WindowFlags_AlwaysUseWindowPadding: Option<i32>,
    pub WindowFlags_AlwaysVerticalScrollbar: Option<i32>,
    pub WindowFlags_HorizontalScrollbar: Option<i32>,
    pub WindowFlags_MenuBar: Option<i32>,
    pub WindowFlags_NoBackground: Option<i32>,
    pub WindowFlags_NoCollapse: Option<i32>,
    pub WindowFlags_NoDecoration: Option<i32>,
    pub WindowFlags_NoDocking: Option<i32>,
    pub WindowFlags_NoFocusOnAppearing: Option<i32>,
    pub WindowFlags_NoInputs: Option<i32>,
    pub WindowFlags_NoMouseInputs: Option<i32>,
    pub WindowFlags_NoMove: Option<i32>,
    pub WindowFlags_NoNav: Option<i32>,
    pub WindowFlags_NoNavFocus: Option<i32>,
    pub WindowFlags_NoNavInputs: Option<i32>,
    pub WindowFlags_NoResize: Option<i32>,
    pub WindowFlags_NoSavedSettings: Option<i32>,
    pub WindowFlags_NoScrollWithMouse: Option<i32>,
    pub WindowFlags_NoScrollbar: Option<i32>,
    pub WindowFlags_NoTitleBar: Option<i32>,
    pub WindowFlags_None: Option<i32>,
    pub WindowFlags_TopMost: Option<i32>,
    pub WindowFlags_UnsavedDocument: Option<i32>,
    pub FocusedFlags_AnyWindow: Option<i32>,
    pub FocusedFlags_ChildWindows: Option<i32>,
    pub FocusedFlags_DockHierarchy: Option<i32>,
    pub FocusedFlags_NoPopupHierarchy: Option<i32>,
    pub FocusedFlags_None: Option<i32>,
    pub FocusedFlags_RootAndChildWindows: Option<i32>,
    pub FocusedFlags_RootWindow: Option<i32>,
}
impl std::fmt::Debug for ImGui {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("ImGui")
            .field("plugin_context", &self.plugin_context)
            .finish()
    }
}
impl ImGui {
    #[doc = r" Loads all available REAPER functions from the given plug-in context."]
    #[doc = r""]
    #[doc = r" Returns a low-level `Reaper` instance which allows you to call these functions."]
    pub fn load(plugin_context: PluginContext) -> Self {
        let mut loaded_count = 0;
        let mut pointers =
            unsafe {
                FunctionPointers {
                    loaded_count: 0,
                    ArrowButton: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ArrowButton)).as_ptr()),
                    ),
                    Button: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Button)).as_ptr()),
                    ),
                    Checkbox: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Checkbox)).as_ptr()),
                    ),
                    CheckboxFlags: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_CheckboxFlags)).as_ptr()),
                    ),
                    InvisibleButton: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_InvisibleButton)).as_ptr(),
                        ),
                    ),
                    PopButtonRepeat: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_PopButtonRepeat)).as_ptr(),
                        ),
                    ),
                    PushButtonRepeat: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_PushButtonRepeat)).as_ptr(),
                        ),
                    ),
                    RadioButton: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_RadioButton)).as_ptr()),
                    ),
                    RadioButtonEx: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_RadioButtonEx)).as_ptr()),
                    ),
                    SmallButton: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SmallButton)).as_ptr()),
                    ),
                    ColorButton: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ColorButton)).as_ptr()),
                    ),
                    ColorEdit3: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ColorEdit3)).as_ptr()),
                    ),
                    ColorEdit4: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ColorEdit4)).as_ptr()),
                    ),
                    ColorPicker3: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ColorPicker3)).as_ptr()),
                    ),
                    ColorPicker4: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ColorPicker4)).as_ptr()),
                    ),
                    SetColorEditOptions: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetColorEditOptions)).as_ptr(),
                    )),
                    BeginCombo: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginCombo)).as_ptr()),
                    ),
                    Combo: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Combo)).as_ptr()),
                    ),
                    EndCombo: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndCombo)).as_ptr()),
                    ),
                    BeginListBox: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginListBox)).as_ptr()),
                    ),
                    EndListBox: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndListBox)).as_ptr()),
                    ),
                    ListBox: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ListBox)).as_ptr()),
                    ),
                    Selectable: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Selectable)).as_ptr()),
                    ),
                    Attach: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Attach)).as_ptr()),
                    ),
                    CreateContext: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_CreateContext)).as_ptr()),
                    ),
                    DestroyContext: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DestroyContext)).as_ptr(),
                        ),
                    ),
                    Detach: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Detach)).as_ptr()),
                    ),
                    GetDeltaTime: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetDeltaTime)).as_ptr()),
                    ),
                    GetFrameCount: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetFrameCount)).as_ptr()),
                    ),
                    GetFramerate: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetFramerate)).as_ptr()),
                    ),
                    GetTime: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetTime)).as_ptr()),
                    ),
                    GetConfigVar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetConfigVar)).as_ptr()),
                    ),
                    SetConfigVar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetConfigVar)).as_ptr()),
                    ),
                    AcceptDragDropPayload: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_AcceptDragDropPayload)).as_ptr(),
                    )),
                    AcceptDragDropPayloadFiles: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_AcceptDragDropPayloadFiles)).as_ptr(),
                    )),
                    AcceptDragDropPayloadRGB: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_AcceptDragDropPayloadRGB)).as_ptr(),
                    )),
                    AcceptDragDropPayloadRGBA: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_AcceptDragDropPayloadRGBA)).as_ptr(),
                    )),
                    BeginDragDropSource: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_BeginDragDropSource)).as_ptr(),
                    )),
                    BeginDragDropTarget: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_BeginDragDropTarget)).as_ptr(),
                    )),
                    EndDragDropSource: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_EndDragDropSource)).as_ptr(),
                    )),
                    EndDragDropTarget: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_EndDragDropTarget)).as_ptr(),
                    )),
                    GetDragDropPayload: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetDragDropPayload)).as_ptr(),
                    )),
                    GetDragDropPayloadFile: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetDragDropPayloadFile)).as_ptr(),
                    )),
                    SetDragDropPayload: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetDragDropPayload)).as_ptr(),
                    )),
                    DragDouble: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragDouble)).as_ptr()),
                    ),
                    DragDouble2: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragDouble2)).as_ptr()),
                    ),
                    DragDouble3: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragDouble3)).as_ptr()),
                    ),
                    DragDouble4: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragDouble4)).as_ptr()),
                    ),
                    DragFloatRange2: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DragFloatRange2)).as_ptr(),
                        ),
                    ),
                    DragInt: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragInt)).as_ptr()),
                    ),
                    DragInt2: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragInt2)).as_ptr()),
                    ),
                    DragInt3: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragInt3)).as_ptr()),
                    ),
                    DragInt4: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragInt4)).as_ptr()),
                    ),
                    DragIntRange2: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_DragIntRange2)).as_ptr()),
                    ),
                    SliderAngle: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderAngle)).as_ptr()),
                    ),
                    SliderDouble: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderDouble)).as_ptr()),
                    ),
                    SliderDouble2: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderDouble2)).as_ptr()),
                    ),
                    SliderDouble3: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderDouble3)).as_ptr()),
                    ),
                    SliderDouble4: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderDouble4)).as_ptr()),
                    ),
                    SliderInt: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderInt)).as_ptr()),
                    ),
                    SliderInt2: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderInt2)).as_ptr()),
                    ),
                    SliderInt3: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderInt3)).as_ptr()),
                    ),
                    SliderInt4: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SliderInt4)).as_ptr()),
                    ),
                    VSliderDouble: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_VSliderDouble)).as_ptr()),
                    ),
                    VSliderInt: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_VSliderInt)).as_ptr()),
                    ),
                    DrawList_PopClipRect: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PopClipRect)).as_ptr(),
                    )),
                    DrawList_PushClipRect: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PushClipRect)).as_ptr(),
                    )),
                    DrawList_PushClipRectFullScreen: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DrawList_PushClipRectFullScreen))
                                .as_ptr(),
                        ),
                    ),
                    GetBackgroundDrawList: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetBackgroundDrawList)).as_ptr(),
                    )),
                    GetForegroundDrawList: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetForegroundDrawList)).as_ptr(),
                    )),
                    GetWindowDrawList: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetWindowDrawList)).as_ptr(),
                    )),
                    DrawList_AddBezierCubic: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddBezierCubic)).as_ptr(),
                    )),
                    DrawList_AddBezierQuadratic: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddBezierQuadratic)).as_ptr(),
                    )),
                    DrawList_AddCircle: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddCircle)).as_ptr(),
                    )),
                    DrawList_AddCircleFilled: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddCircleFilled)).as_ptr(),
                    )),
                    DrawList_AddImage: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddImage)).as_ptr(),
                    )),
                    DrawList_AddImageQuad: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddImageQuad)).as_ptr(),
                    )),
                    DrawList_AddImageRounded: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddImageRounded)).as_ptr(),
                    )),
                    DrawList_AddLine: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DrawList_AddLine)).as_ptr(),
                        ),
                    ),
                    DrawList_AddNgon: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DrawList_AddNgon)).as_ptr(),
                        ),
                    ),
                    DrawList_AddNgonFilled: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddNgonFilled)).as_ptr(),
                    )),
                    DrawList_AddQuad: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DrawList_AddQuad)).as_ptr(),
                        ),
                    ),
                    DrawList_AddQuadFilled: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddQuadFilled)).as_ptr(),
                    )),
                    DrawList_AddRect: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DrawList_AddRect)).as_ptr(),
                        ),
                    ),
                    DrawList_AddRectFilled: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddRectFilled)).as_ptr(),
                    )),
                    DrawList_AddRectFilledMultiColor: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DrawList_AddRectFilledMultiColor))
                                .as_ptr(),
                        ),
                    ),
                    DrawList_AddText: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DrawList_AddText)).as_ptr(),
                        ),
                    ),
                    DrawList_AddTextEx: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddTextEx)).as_ptr(),
                    )),
                    DrawList_AddTriangle: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddTriangle)).as_ptr(),
                    )),
                    DrawList_AddTriangleFilled: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_AddTriangleFilled)).as_ptr(),
                    )),
                    CreateDrawListSplitter: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_CreateDrawListSplitter)).as_ptr(),
                    )),
                    DrawListSplitter_Clear: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawListSplitter_Clear)).as_ptr(),
                    )),
                    DrawListSplitter_Merge: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawListSplitter_Merge)).as_ptr(),
                    )),
                    DrawListSplitter_SetCurrentChannel: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(
                                ImGui_DrawListSplitter_SetCurrentChannel
                            ))
                            .as_ptr(),
                        ),
                    ),
                    DrawListSplitter_Split: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawListSplitter_Split)).as_ptr(),
                    )),
                    DrawList_PathArcTo: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PathArcTo)).as_ptr(),
                    )),
                    DrawList_PathArcToFast: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PathArcToFast)).as_ptr(),
                    )),
                    DrawList_PathBezierCubicCurveTo: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_DrawList_PathBezierCubicCurveTo))
                                .as_ptr(),
                        ),
                    ),
                    DrawList_PathBezierQuadraticCurveTo: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(
                                ImGui_DrawList_PathBezierQuadraticCurveTo
                            ))
                            .as_ptr(),
                        ),
                    ),
                    DrawList_PathClear: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PathClear)).as_ptr(),
                    )),
                    DrawList_PathFillConvex: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PathFillConvex)).as_ptr(),
                    )),
                    DrawList_PathLineTo: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PathLineTo)).as_ptr(),
                    )),
                    DrawList_PathRect: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PathRect)).as_ptr(),
                    )),
                    DrawList_PathStroke: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DrawList_PathStroke)).as_ptr(),
                    )),
                    CreateFont: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_CreateFont)).as_ptr()),
                    ),
                    GetFont: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetFont)).as_ptr()),
                    ),
                    GetFontSize: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetFontSize)).as_ptr()),
                    ),
                    PopFont: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PopFont)).as_ptr()),
                    ),
                    PushFont: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PushFont)).as_ptr()),
                    ),
                    CreateImage: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_CreateImage)).as_ptr()),
                    ),
                    CreateImageFromMem: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_CreateImageFromMem)).as_ptr(),
                    )),
                    Image: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Image)).as_ptr()),
                    ),
                    ImageButton: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ImageButton)).as_ptr()),
                    ),
                    Image_GetSize: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Image_GetSize)).as_ptr()),
                    ),
                    ImageSet_Add: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ImageSet_Add)).as_ptr()),
                    ),
                    BeginDisabled: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginDisabled)).as_ptr()),
                    ),
                    EndDisabled: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndDisabled)).as_ptr()),
                    ),
                    SetItemAllowOverlap: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetItemAllowOverlap)).as_ptr(),
                    )),
                    CalcItemWidth: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_CalcItemWidth)).as_ptr()),
                    ),
                    GetItemRectMax: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetItemRectMax)).as_ptr(),
                        ),
                    ),
                    GetItemRectMin: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetItemRectMin)).as_ptr(),
                        ),
                    ),
                    GetItemRectSize: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetItemRectSize)).as_ptr(),
                        ),
                    ),
                    PopItemWidth: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PopItemWidth)).as_ptr()),
                    ),
                    PushItemWidth: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PushItemWidth)).as_ptr()),
                    ),
                    SetNextItemWidth: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetNextItemWidth)).as_ptr(),
                        ),
                    ),
                    PopAllowKeyboardFocus: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_PopAllowKeyboardFocus)).as_ptr(),
                    )),
                    PushAllowKeyboardFocus: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_PushAllowKeyboardFocus)).as_ptr(),
                    )),
                    SetItemDefaultFocus: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetItemDefaultFocus)).as_ptr(),
                    )),
                    SetKeyboardFocusHere: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetKeyboardFocusHere)).as_ptr(),
                    )),
                    IsAnyItemActive: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsAnyItemActive)).as_ptr(),
                        ),
                    ),
                    IsAnyItemFocused: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsAnyItemFocused)).as_ptr(),
                        ),
                    ),
                    IsAnyItemHovered: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsAnyItemHovered)).as_ptr(),
                        ),
                    ),
                    IsItemActivated: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsItemActivated)).as_ptr(),
                        ),
                    ),
                    IsItemActive: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsItemActive)).as_ptr()),
                    ),
                    IsItemClicked: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsItemClicked)).as_ptr()),
                    ),
                    IsItemDeactivated: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_IsItemDeactivated)).as_ptr(),
                    )),
                    IsItemDeactivatedAfterEdit: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_IsItemDeactivatedAfterEdit)).as_ptr(),
                    )),
                    IsItemEdited: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsItemEdited)).as_ptr()),
                    ),
                    IsItemFocused: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsItemFocused)).as_ptr()),
                    ),
                    IsItemHovered: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsItemHovered)).as_ptr()),
                    ),
                    IsItemVisible: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsItemVisible)).as_ptr()),
                    ),
                    GetInputQueueCharacter: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetInputQueueCharacter)).as_ptr(),
                    )),
                    GetKeyDownDuration: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetKeyDownDuration)).as_ptr(),
                    )),
                    GetKeyMods: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetKeyMods)).as_ptr()),
                    ),
                    GetKeyPressedAmount: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetKeyPressedAmount)).as_ptr(),
                    )),
                    IsKeyDown: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsKeyDown)).as_ptr()),
                    ),
                    IsKeyPressed: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsKeyPressed)).as_ptr()),
                    ),
                    IsKeyReleased: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsKeyReleased)).as_ptr()),
                    ),
                    SetNextFrameWantCaptureKeyboard: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetNextFrameWantCaptureKeyboard))
                                .as_ptr(),
                        ),
                    ),
                    GetMouseClickedCount: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetMouseClickedCount)).as_ptr(),
                    )),
                    GetMouseClickedPos: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetMouseClickedPos)).as_ptr(),
                    )),
                    GetMouseCursor: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetMouseCursor)).as_ptr(),
                        ),
                    ),
                    GetMouseDelta: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetMouseDelta)).as_ptr()),
                    ),
                    GetMouseDownDuration: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetMouseDownDuration)).as_ptr(),
                    )),
                    GetMouseDragDelta: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetMouseDragDelta)).as_ptr(),
                    )),
                    GetMousePos: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetMousePos)).as_ptr()),
                    ),
                    GetMousePosOnOpeningCurrentPopup: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetMousePosOnOpeningCurrentPopup))
                                .as_ptr(),
                        ),
                    ),
                    GetMouseWheel: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetMouseWheel)).as_ptr()),
                    ),
                    IsAnyMouseDown: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsAnyMouseDown)).as_ptr(),
                        ),
                    ),
                    IsMouseClicked: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsMouseClicked)).as_ptr(),
                        ),
                    ),
                    IsMouseDoubleClicked: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_IsMouseDoubleClicked)).as_ptr(),
                    )),
                    IsMouseDown: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsMouseDown)).as_ptr()),
                    ),
                    IsMouseDragging: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsMouseDragging)).as_ptr(),
                        ),
                    ),
                    IsMouseHoveringRect: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_IsMouseHoveringRect)).as_ptr(),
                    )),
                    IsMousePosValid: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsMousePosValid)).as_ptr(),
                        ),
                    ),
                    IsMouseReleased: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsMouseReleased)).as_ptr(),
                        ),
                    ),
                    ResetMouseDragDelta: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ResetMouseDragDelta)).as_ptr(),
                    )),
                    SetMouseCursor: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetMouseCursor)).as_ptr(),
                        ),
                    ),
                    Separator: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Separator)).as_ptr()),
                    ),
                    IsRectVisible: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsRectVisible)).as_ptr()),
                    ),
                    IsRectVisibleEx: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsRectVisibleEx)).as_ptr(),
                        ),
                    ),
                    PopClipRect: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PopClipRect)).as_ptr()),
                    ),
                    PushClipRect: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PushClipRect)).as_ptr()),
                    ),
                    BeginGroup: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginGroup)).as_ptr()),
                    ),
                    Dummy: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Dummy)).as_ptr()),
                    ),
                    EndGroup: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndGroup)).as_ptr()),
                    ),
                    GetCursorPos: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetCursorPos)).as_ptr()),
                    ),
                    GetCursorPosX: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetCursorPosX)).as_ptr()),
                    ),
                    GetCursorPosY: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetCursorPosY)).as_ptr()),
                    ),
                    GetCursorScreenPos: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetCursorScreenPos)).as_ptr(),
                    )),
                    GetCursorStartPos: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetCursorStartPos)).as_ptr(),
                    )),
                    Indent: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Indent)).as_ptr()),
                    ),
                    NewLine: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_NewLine)).as_ptr()),
                    ),
                    SameLine: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SameLine)).as_ptr()),
                    ),
                    SetCursorPos: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetCursorPos)).as_ptr()),
                    ),
                    SetCursorPosX: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetCursorPosX)).as_ptr()),
                    ),
                    SetCursorPosY: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetCursorPosY)).as_ptr()),
                    ),
                    SetCursorScreenPos: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetCursorScreenPos)).as_ptr(),
                    )),
                    Spacing: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Spacing)).as_ptr()),
                    ),
                    Unindent: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Unindent)).as_ptr()),
                    ),
                    CreateListClipper: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_CreateListClipper)).as_ptr(),
                    )),
                    ListClipper_Begin: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ListClipper_Begin)).as_ptr(),
                    )),
                    ListClipper_End: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_ListClipper_End)).as_ptr(),
                        ),
                    ),
                    ListClipper_ForceDisplayRangeByIndices: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(
                                ImGui_ListClipper_ForceDisplayRangeByIndices
                            ))
                            .as_ptr(),
                        ),
                    ),
                    ListClipper_GetDisplayRange: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ListClipper_GetDisplayRange)).as_ptr(),
                    )),
                    ListClipper_Step: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_ListClipper_Step)).as_ptr(),
                        ),
                    ),
                    BeginMenu: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginMenu)).as_ptr()),
                    ),
                    BeginMenuBar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginMenuBar)).as_ptr()),
                    ),
                    EndMenu: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndMenu)).as_ptr()),
                    ),
                    EndMenuBar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndMenuBar)).as_ptr()),
                    ),
                    MenuItem: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_MenuItem)).as_ptr()),
                    ),
                    BeginPopup: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginPopup)).as_ptr()),
                    ),
                    BeginPopupModal: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_BeginPopupModal)).as_ptr(),
                        ),
                    ),
                    CloseCurrentPopup: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_CloseCurrentPopup)).as_ptr(),
                    )),
                    EndPopup: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndPopup)).as_ptr()),
                    ),
                    IsPopupOpen: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_IsPopupOpen)).as_ptr()),
                    ),
                    OpenPopup: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_OpenPopup)).as_ptr()),
                    ),
                    OpenPopupOnItemClick: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_OpenPopupOnItemClick)).as_ptr(),
                    )),
                    BeginPopupContextItem: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_BeginPopupContextItem)).as_ptr(),
                    )),
                    BeginPopupContextWindow: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_BeginPopupContextWindow)).as_ptr(),
                    )),
                    BeginTooltip: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginTooltip)).as_ptr()),
                    ),
                    EndTooltip: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndTooltip)).as_ptr()),
                    ),
                    SetTooltip: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetTooltip)).as_ptr()),
                    ),
                    GetColor: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetColor)).as_ptr()),
                    ),
                    GetColorEx: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetColorEx)).as_ptr()),
                    ),
                    GetStyleColor: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetStyleColor)).as_ptr()),
                    ),
                    PopStyleColor: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PopStyleColor)).as_ptr()),
                    ),
                    PushStyleColor: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_PushStyleColor)).as_ptr(),
                        ),
                    ),
                    GetStyleVar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetStyleVar)).as_ptr()),
                    ),
                    PopStyleVar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PopStyleVar)).as_ptr()),
                    ),
                    PushStyleVar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PushStyleVar)).as_ptr()),
                    ),
                    BeginTabBar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginTabBar)).as_ptr()),
                    ),
                    EndTabBar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndTabBar)).as_ptr()),
                    ),
                    BeginTabItem: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginTabItem)).as_ptr()),
                    ),
                    EndTabItem: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndTabItem)).as_ptr()),
                    ),
                    SetTabItemClosed: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetTabItemClosed)).as_ptr(),
                        ),
                    ),
                    TabItemButton: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TabItemButton)).as_ptr()),
                    ),
                    BeginTable: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginTable)).as_ptr()),
                    ),
                    EndTable: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndTable)).as_ptr()),
                    ),
                    TableGetColumnCount: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TableGetColumnCount)).as_ptr(),
                    )),
                    TableGetColumnIndex: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TableGetColumnIndex)).as_ptr(),
                    )),
                    TableGetRowIndex: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_TableGetRowIndex)).as_ptr(),
                        ),
                    ),
                    TableNextColumn: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_TableNextColumn)).as_ptr(),
                        ),
                    ),
                    TableNextRow: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TableNextRow)).as_ptr()),
                    ),
                    TableSetColumnIndex: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TableSetColumnIndex)).as_ptr(),
                    )),
                    TableSetBgColor: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_TableSetBgColor)).as_ptr(),
                        ),
                    ),
                    TableGetColumnFlags: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TableGetColumnFlags)).as_ptr(),
                    )),
                    TableHeader: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TableHeader)).as_ptr()),
                    ),
                    TableHeadersRow: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_TableHeadersRow)).as_ptr(),
                        ),
                    ),
                    TableSetColumnEnabled: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TableSetColumnEnabled)).as_ptr(),
                    )),
                    TableSetupColumn: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_TableSetupColumn)).as_ptr(),
                        ),
                    ),
                    TableSetupScrollFreeze: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TableSetupScrollFreeze)).as_ptr(),
                    )),
                    TableGetColumnSortSpecs: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TableGetColumnSortSpecs)).as_ptr(),
                    )),
                    TableNeedSort: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TableNeedSort)).as_ptr()),
                    ),
                    AlignTextToFramePadding: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_AlignTextToFramePadding)).as_ptr(),
                    )),
                    Bullet: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Bullet)).as_ptr()),
                    ),
                    BulletText: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BulletText)).as_ptr()),
                    ),
                    CalcTextSize: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_CalcTextSize)).as_ptr()),
                    ),
                    DebugTextEncoding: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_DebugTextEncoding)).as_ptr(),
                    )),
                    GetFrameHeight: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetFrameHeight)).as_ptr(),
                        ),
                    ),
                    GetFrameHeightWithSpacing: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetFrameHeightWithSpacing)).as_ptr(),
                    )),
                    GetTextLineHeight: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetTextLineHeight)).as_ptr(),
                    )),
                    GetTextLineHeightWithSpacing: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetTextLineHeightWithSpacing))
                                .as_ptr(),
                        ),
                    ),
                    LabelText: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_LabelText)).as_ptr()),
                    ),
                    PopTextWrapPos: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_PopTextWrapPos)).as_ptr(),
                        ),
                    ),
                    PushTextWrapPos: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_PushTextWrapPos)).as_ptr(),
                        ),
                    ),
                    Text: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Text)).as_ptr()),
                    ),
                    TextColored: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TextColored)).as_ptr()),
                    ),
                    TextDisabled: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TextDisabled)).as_ptr()),
                    ),
                    TextWrapped: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TextWrapped)).as_ptr()),
                    ),
                    InputDouble: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputDouble)).as_ptr()),
                    ),
                    InputDouble2: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputDouble2)).as_ptr()),
                    ),
                    InputDouble3: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputDouble3)).as_ptr()),
                    ),
                    InputDouble4: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputDouble4)).as_ptr()),
                    ),
                    InputInt: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputInt)).as_ptr()),
                    ),
                    InputInt2: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputInt2)).as_ptr()),
                    ),
                    InputInt3: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputInt3)).as_ptr()),
                    ),
                    InputInt4: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputInt4)).as_ptr()),
                    ),
                    InputText: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_InputText)).as_ptr()),
                    ),
                    InputTextMultiline: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_InputTextMultiline)).as_ptr(),
                    )),
                    InputTextWithHint: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_InputTextWithHint)).as_ptr(),
                    )),
                    CreateTextFilter: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_CreateTextFilter)).as_ptr(),
                        ),
                    ),
                    TextFilter_Clear: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_TextFilter_Clear)).as_ptr(),
                        ),
                    ),
                    TextFilter_Draw: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_TextFilter_Draw)).as_ptr(),
                        ),
                    ),
                    TextFilter_IsActive: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TextFilter_IsActive)).as_ptr(),
                    )),
                    TextFilter_PassFilter: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_TextFilter_PassFilter)).as_ptr(),
                    )),
                    TextFilter_Set: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_TextFilter_Set)).as_ptr(),
                        ),
                    ),
                    CollapsingHeader: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_CollapsingHeader)).as_ptr(),
                        ),
                    ),
                    GetTreeNodeToLabelSpacing: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetTreeNodeToLabelSpacing)).as_ptr(),
                    )),
                    IsItemToggledOpen: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_IsItemToggledOpen)).as_ptr(),
                    )),
                    SetNextItemOpen: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetNextItemOpen)).as_ptr(),
                        ),
                    ),
                    TreeNode: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TreeNode)).as_ptr()),
                    ),
                    TreeNodeEx: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TreeNodeEx)).as_ptr()),
                    ),
                    TreePop: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TreePop)).as_ptr()),
                    ),
                    TreePush: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_TreePush)).as_ptr()),
                    ),
                    GetVersion: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetVersion)).as_ptr()),
                    ),
                    NumericLimits_Float: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_NumericLimits_Float)).as_ptr(),
                    )),
                    PointConvertNative: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_PointConvertNative)).as_ptr(),
                    )),
                    ProgressBar: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_ProgressBar)).as_ptr()),
                    ),
                    SetClipboardText: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetClipboardText)).as_ptr(),
                        ),
                    ),
                    ColorConvertDouble4ToU32: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ColorConvertDouble4ToU32)).as_ptr(),
                    )),
                    ColorConvertHSVtoRGB: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ColorConvertHSVtoRGB)).as_ptr(),
                    )),
                    ColorConvertNative: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ColorConvertNative)).as_ptr(),
                    )),
                    ColorConvertRGBtoHSV: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ColorConvertRGBtoHSV)).as_ptr(),
                    )),
                    ColorConvertU32ToDouble4: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ColorConvertU32ToDouble4)).as_ptr(),
                    )),
                    PopID: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PopID)).as_ptr()),
                    ),
                    PushID: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_PushID)).as_ptr()),
                    ),
                    LogFinish: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_LogFinish)).as_ptr()),
                    ),
                    LogText: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_LogText)).as_ptr()),
                    ),
                    LogToClipboard: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_LogToClipboard)).as_ptr(),
                        ),
                    ),
                    LogToFile: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_LogToFile)).as_ptr()),
                    ),
                    LogToTTY: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_LogToTTY)).as_ptr()),
                    ),
                    GetMainViewport: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetMainViewport)).as_ptr(),
                        ),
                    ),
                    GetWindowViewport: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetWindowViewport)).as_ptr(),
                    )),
                    Viewport_GetCenter: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_Viewport_GetCenter)).as_ptr(),
                    )),
                    Viewport_GetPos: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_Viewport_GetPos)).as_ptr(),
                        ),
                    ),
                    Viewport_GetSize: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_Viewport_GetSize)).as_ptr(),
                        ),
                    ),
                    Viewport_GetWorkCenter: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_Viewport_GetWorkCenter)).as_ptr(),
                    )),
                    Viewport_GetWorkPos: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_Viewport_GetWorkPos)).as_ptr(),
                    )),
                    Viewport_GetWorkSize: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_Viewport_GetWorkSize)).as_ptr(),
                    )),
                    Begin: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_Begin)).as_ptr()),
                    ),
                    End: std::mem::transmute(
                        plugin_context.GetFunc(c_str_macro::c_str!(stringify!(ImGui_End)).as_ptr()),
                    ),
                    BeginChild: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_BeginChild)).as_ptr()),
                    ),
                    BeginChildFrame: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_BeginChildFrame)).as_ptr(),
                        ),
                    ),
                    EndChild: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndChild)).as_ptr()),
                    ),
                    EndChildFrame: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_EndChildFrame)).as_ptr()),
                    ),
                    GetContentRegionAvail: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetContentRegionAvail)).as_ptr(),
                    )),
                    GetContentRegionMax: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetContentRegionMax)).as_ptr(),
                    )),
                    GetWindowContentRegionMax: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetWindowContentRegionMax)).as_ptr(),
                    )),
                    GetWindowContentRegionMin: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetWindowContentRegionMin)).as_ptr(),
                    )),
                    ShowAboutWindow: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_ShowAboutWindow)).as_ptr(),
                        ),
                    ),
                    ShowDebugLogWindow: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ShowDebugLogWindow)).as_ptr(),
                    )),
                    ShowMetricsWindow: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ShowMetricsWindow)).as_ptr(),
                    )),
                    ShowStackToolWindow: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_ShowStackToolWindow)).as_ptr(),
                    )),
                    GetWindowDockID: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetWindowDockID)).as_ptr(),
                        ),
                    ),
                    IsWindowDocked: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsWindowDocked)).as_ptr(),
                        ),
                    ),
                    SetNextWindowDockID: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetNextWindowDockID)).as_ptr(),
                    )),
                    GetWindowDpiScale: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_GetWindowDpiScale)).as_ptr(),
                    )),
                    GetWindowHeight: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetWindowHeight)).as_ptr(),
                        ),
                    ),
                    GetWindowPos: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetWindowPos)).as_ptr()),
                    ),
                    GetWindowSize: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetWindowSize)).as_ptr()),
                    ),
                    GetWindowWidth: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_GetWindowWidth)).as_ptr(),
                        ),
                    ),
                    IsWindowAppearing: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_IsWindowAppearing)).as_ptr(),
                    )),
                    IsWindowCollapsed: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_IsWindowCollapsed)).as_ptr(),
                    )),
                    IsWindowFocused: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsWindowFocused)).as_ptr(),
                        ),
                    ),
                    IsWindowHovered: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_IsWindowHovered)).as_ptr(),
                        ),
                    ),
                    SetNextWindowBgAlpha: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetNextWindowBgAlpha)).as_ptr(),
                    )),
                    SetNextWindowCollapsed: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetNextWindowCollapsed)).as_ptr(),
                    )),
                    SetNextWindowContentSize: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetNextWindowContentSize)).as_ptr(),
                    )),
                    SetNextWindowFocus: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetNextWindowFocus)).as_ptr(),
                    )),
                    SetNextWindowPos: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetNextWindowPos)).as_ptr(),
                        ),
                    ),
                    SetNextWindowScroll: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetNextWindowScroll)).as_ptr(),
                    )),
                    SetNextWindowSize: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetNextWindowSize)).as_ptr(),
                    )),
                    SetNextWindowSizeConstraints: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetNextWindowSizeConstraints))
                                .as_ptr(),
                        ),
                    ),
                    SetWindowCollapsed: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetWindowCollapsed)).as_ptr(),
                    )),
                    SetWindowCollapsedEx: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetWindowCollapsedEx)).as_ptr(),
                    )),
                    SetWindowFocus: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetWindowFocus)).as_ptr(),
                        ),
                    ),
                    SetWindowFocusEx: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetWindowFocusEx)).as_ptr(),
                        ),
                    ),
                    SetWindowPos: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetWindowPos)).as_ptr()),
                    ),
                    SetWindowPosEx: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetWindowPosEx)).as_ptr(),
                        ),
                    ),
                    SetWindowSize: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetWindowSize)).as_ptr()),
                    ),
                    SetWindowSizeEx: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetWindowSizeEx)).as_ptr(),
                        ),
                    ),
                    GetScrollMaxX: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetScrollMaxX)).as_ptr()),
                    ),
                    GetScrollMaxY: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetScrollMaxY)).as_ptr()),
                    ),
                    GetScrollX: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetScrollX)).as_ptr()),
                    ),
                    GetScrollY: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_GetScrollY)).as_ptr()),
                    ),
                    SetScrollFromPosX: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetScrollFromPosX)).as_ptr(),
                    )),
                    SetScrollFromPosY: std::mem::transmute(plugin_context.GetFunc(
                        c_str_macro::c_str!(stringify!(ImGui_SetScrollFromPosY)).as_ptr(),
                    )),
                    SetScrollHereX: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetScrollHereX)).as_ptr(),
                        ),
                    ),
                    SetScrollHereY: std::mem::transmute(
                        plugin_context.GetFunc(
                            c_str_macro::c_str!(stringify!(ImGui_SetScrollHereY)).as_ptr(),
                        ),
                    ),
                    SetScrollX: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetScrollX)).as_ptr()),
                    ),
                    SetScrollY: std::mem::transmute(
                        plugin_context
                            .GetFunc(c_str_macro::c_str!(stringify!(ImGui_SetScrollY)).as_ptr()),
                    ),
                }
            };
        if pointers.ArrowButton.is_some() {
            loaded_count += 1;
        }
        if pointers.Button.is_some() {
            loaded_count += 1;
        }
        if pointers.Checkbox.is_some() {
            loaded_count += 1;
        }
        if pointers.CheckboxFlags.is_some() {
            loaded_count += 1;
        }
        if pointers.InvisibleButton.is_some() {
            loaded_count += 1;
        }
        if pointers.PopButtonRepeat.is_some() {
            loaded_count += 1;
        }
        if pointers.PushButtonRepeat.is_some() {
            loaded_count += 1;
        }
        if pointers.RadioButton.is_some() {
            loaded_count += 1;
        }
        if pointers.RadioButtonEx.is_some() {
            loaded_count += 1;
        }
        if pointers.SmallButton.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorButton.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorEdit3.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorEdit4.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorPicker3.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorPicker4.is_some() {
            loaded_count += 1;
        }
        if pointers.SetColorEditOptions.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginCombo.is_some() {
            loaded_count += 1;
        }
        if pointers.Combo.is_some() {
            loaded_count += 1;
        }
        if pointers.EndCombo.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginListBox.is_some() {
            loaded_count += 1;
        }
        if pointers.EndListBox.is_some() {
            loaded_count += 1;
        }
        if pointers.ListBox.is_some() {
            loaded_count += 1;
        }
        if pointers.Selectable.is_some() {
            loaded_count += 1;
        }
        if pointers.Attach.is_some() {
            loaded_count += 1;
        }
        if pointers.CreateContext.is_some() {
            loaded_count += 1;
        }
        if pointers.DestroyContext.is_some() {
            loaded_count += 1;
        }
        if pointers.Detach.is_some() {
            loaded_count += 1;
        }
        if pointers.GetDeltaTime.is_some() {
            loaded_count += 1;
        }
        if pointers.GetFrameCount.is_some() {
            loaded_count += 1;
        }
        if pointers.GetFramerate.is_some() {
            loaded_count += 1;
        }
        if pointers.GetTime.is_some() {
            loaded_count += 1;
        }
        if pointers.GetConfigVar.is_some() {
            loaded_count += 1;
        }
        if pointers.SetConfigVar.is_some() {
            loaded_count += 1;
        }
        if pointers.AcceptDragDropPayload.is_some() {
            loaded_count += 1;
        }
        if pointers.AcceptDragDropPayloadFiles.is_some() {
            loaded_count += 1;
        }
        if pointers.AcceptDragDropPayloadRGB.is_some() {
            loaded_count += 1;
        }
        if pointers.AcceptDragDropPayloadRGBA.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginDragDropSource.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginDragDropTarget.is_some() {
            loaded_count += 1;
        }
        if pointers.EndDragDropSource.is_some() {
            loaded_count += 1;
        }
        if pointers.EndDragDropTarget.is_some() {
            loaded_count += 1;
        }
        if pointers.GetDragDropPayload.is_some() {
            loaded_count += 1;
        }
        if pointers.GetDragDropPayloadFile.is_some() {
            loaded_count += 1;
        }
        if pointers.SetDragDropPayload.is_some() {
            loaded_count += 1;
        }
        if pointers.DragDouble.is_some() {
            loaded_count += 1;
        }
        if pointers.DragDouble2.is_some() {
            loaded_count += 1;
        }
        if pointers.DragDouble3.is_some() {
            loaded_count += 1;
        }
        if pointers.DragDouble4.is_some() {
            loaded_count += 1;
        }
        if pointers.DragFloatRange2.is_some() {
            loaded_count += 1;
        }
        if pointers.DragInt.is_some() {
            loaded_count += 1;
        }
        if pointers.DragInt2.is_some() {
            loaded_count += 1;
        }
        if pointers.DragInt3.is_some() {
            loaded_count += 1;
        }
        if pointers.DragInt4.is_some() {
            loaded_count += 1;
        }
        if pointers.DragIntRange2.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderAngle.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderDouble.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderDouble2.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderDouble3.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderDouble4.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderInt.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderInt2.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderInt3.is_some() {
            loaded_count += 1;
        }
        if pointers.SliderInt4.is_some() {
            loaded_count += 1;
        }
        if pointers.VSliderDouble.is_some() {
            loaded_count += 1;
        }
        if pointers.VSliderInt.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PopClipRect.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PushClipRect.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PushClipRectFullScreen.is_some() {
            loaded_count += 1;
        }
        if pointers.GetBackgroundDrawList.is_some() {
            loaded_count += 1;
        }
        if pointers.GetForegroundDrawList.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowDrawList.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddBezierCubic.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddBezierQuadratic.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddCircle.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddCircleFilled.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddImage.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddImageQuad.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddImageRounded.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddLine.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddNgon.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddNgonFilled.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddQuad.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddQuadFilled.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddRect.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddRectFilled.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddRectFilledMultiColor.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddText.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddTextEx.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddTriangle.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_AddTriangleFilled.is_some() {
            loaded_count += 1;
        }
        if pointers.CreateDrawListSplitter.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawListSplitter_Clear.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawListSplitter_Merge.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawListSplitter_SetCurrentChannel.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawListSplitter_Split.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathArcTo.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathArcToFast.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathBezierCubicCurveTo.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathBezierQuadraticCurveTo.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathClear.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathFillConvex.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathLineTo.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathRect.is_some() {
            loaded_count += 1;
        }
        if pointers.DrawList_PathStroke.is_some() {
            loaded_count += 1;
        }
        if pointers.CreateFont.is_some() {
            loaded_count += 1;
        }
        if pointers.GetFont.is_some() {
            loaded_count += 1;
        }
        if pointers.GetFontSize.is_some() {
            loaded_count += 1;
        }
        if pointers.PopFont.is_some() {
            loaded_count += 1;
        }
        if pointers.PushFont.is_some() {
            loaded_count += 1;
        }
        if pointers.CreateImage.is_some() {
            loaded_count += 1;
        }
        if pointers.CreateImageFromMem.is_some() {
            loaded_count += 1;
        }
        if pointers.Image.is_some() {
            loaded_count += 1;
        }
        if pointers.ImageButton.is_some() {
            loaded_count += 1;
        }
        if pointers.Image_GetSize.is_some() {
            loaded_count += 1;
        }
        if pointers.ImageSet_Add.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginDisabled.is_some() {
            loaded_count += 1;
        }
        if pointers.EndDisabled.is_some() {
            loaded_count += 1;
        }
        if pointers.SetItemAllowOverlap.is_some() {
            loaded_count += 1;
        }
        if pointers.CalcItemWidth.is_some() {
            loaded_count += 1;
        }
        if pointers.GetItemRectMax.is_some() {
            loaded_count += 1;
        }
        if pointers.GetItemRectMin.is_some() {
            loaded_count += 1;
        }
        if pointers.GetItemRectSize.is_some() {
            loaded_count += 1;
        }
        if pointers.PopItemWidth.is_some() {
            loaded_count += 1;
        }
        if pointers.PushItemWidth.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextItemWidth.is_some() {
            loaded_count += 1;
        }
        if pointers.PopAllowKeyboardFocus.is_some() {
            loaded_count += 1;
        }
        if pointers.PushAllowKeyboardFocus.is_some() {
            loaded_count += 1;
        }
        if pointers.SetItemDefaultFocus.is_some() {
            loaded_count += 1;
        }
        if pointers.SetKeyboardFocusHere.is_some() {
            loaded_count += 1;
        }
        if pointers.IsAnyItemActive.is_some() {
            loaded_count += 1;
        }
        if pointers.IsAnyItemFocused.is_some() {
            loaded_count += 1;
        }
        if pointers.IsAnyItemHovered.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemActivated.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemActive.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemClicked.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemDeactivated.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemDeactivatedAfterEdit.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemEdited.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemFocused.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemHovered.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemVisible.is_some() {
            loaded_count += 1;
        }
        if pointers.GetInputQueueCharacter.is_some() {
            loaded_count += 1;
        }
        if pointers.GetKeyDownDuration.is_some() {
            loaded_count += 1;
        }
        if pointers.GetKeyMods.is_some() {
            loaded_count += 1;
        }
        if pointers.GetKeyPressedAmount.is_some() {
            loaded_count += 1;
        }
        if pointers.IsKeyDown.is_some() {
            loaded_count += 1;
        }
        if pointers.IsKeyPressed.is_some() {
            loaded_count += 1;
        }
        if pointers.IsKeyReleased.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextFrameWantCaptureKeyboard.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMouseClickedCount.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMouseClickedPos.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMouseCursor.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMouseDelta.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMouseDownDuration.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMouseDragDelta.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMousePos.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMousePosOnOpeningCurrentPopup.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMouseWheel.is_some() {
            loaded_count += 1;
        }
        if pointers.IsAnyMouseDown.is_some() {
            loaded_count += 1;
        }
        if pointers.IsMouseClicked.is_some() {
            loaded_count += 1;
        }
        if pointers.IsMouseDoubleClicked.is_some() {
            loaded_count += 1;
        }
        if pointers.IsMouseDown.is_some() {
            loaded_count += 1;
        }
        if pointers.IsMouseDragging.is_some() {
            loaded_count += 1;
        }
        if pointers.IsMouseHoveringRect.is_some() {
            loaded_count += 1;
        }
        if pointers.IsMousePosValid.is_some() {
            loaded_count += 1;
        }
        if pointers.IsMouseReleased.is_some() {
            loaded_count += 1;
        }
        if pointers.ResetMouseDragDelta.is_some() {
            loaded_count += 1;
        }
        if pointers.SetMouseCursor.is_some() {
            loaded_count += 1;
        }
        if pointers.Separator.is_some() {
            loaded_count += 1;
        }
        if pointers.IsRectVisible.is_some() {
            loaded_count += 1;
        }
        if pointers.IsRectVisibleEx.is_some() {
            loaded_count += 1;
        }
        if pointers.PopClipRect.is_some() {
            loaded_count += 1;
        }
        if pointers.PushClipRect.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginGroup.is_some() {
            loaded_count += 1;
        }
        if pointers.Dummy.is_some() {
            loaded_count += 1;
        }
        if pointers.EndGroup.is_some() {
            loaded_count += 1;
        }
        if pointers.GetCursorPos.is_some() {
            loaded_count += 1;
        }
        if pointers.GetCursorPosX.is_some() {
            loaded_count += 1;
        }
        if pointers.GetCursorPosY.is_some() {
            loaded_count += 1;
        }
        if pointers.GetCursorScreenPos.is_some() {
            loaded_count += 1;
        }
        if pointers.GetCursorStartPos.is_some() {
            loaded_count += 1;
        }
        if pointers.Indent.is_some() {
            loaded_count += 1;
        }
        if pointers.NewLine.is_some() {
            loaded_count += 1;
        }
        if pointers.SameLine.is_some() {
            loaded_count += 1;
        }
        if pointers.SetCursorPos.is_some() {
            loaded_count += 1;
        }
        if pointers.SetCursorPosX.is_some() {
            loaded_count += 1;
        }
        if pointers.SetCursorPosY.is_some() {
            loaded_count += 1;
        }
        if pointers.SetCursorScreenPos.is_some() {
            loaded_count += 1;
        }
        if pointers.Spacing.is_some() {
            loaded_count += 1;
        }
        if pointers.Unindent.is_some() {
            loaded_count += 1;
        }
        if pointers.CreateListClipper.is_some() {
            loaded_count += 1;
        }
        if pointers.ListClipper_Begin.is_some() {
            loaded_count += 1;
        }
        if pointers.ListClipper_End.is_some() {
            loaded_count += 1;
        }
        if pointers.ListClipper_ForceDisplayRangeByIndices.is_some() {
            loaded_count += 1;
        }
        if pointers.ListClipper_GetDisplayRange.is_some() {
            loaded_count += 1;
        }
        if pointers.ListClipper_Step.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginMenu.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginMenuBar.is_some() {
            loaded_count += 1;
        }
        if pointers.EndMenu.is_some() {
            loaded_count += 1;
        }
        if pointers.EndMenuBar.is_some() {
            loaded_count += 1;
        }
        if pointers.MenuItem.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginPopup.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginPopupModal.is_some() {
            loaded_count += 1;
        }
        if pointers.CloseCurrentPopup.is_some() {
            loaded_count += 1;
        }
        if pointers.EndPopup.is_some() {
            loaded_count += 1;
        }
        if pointers.IsPopupOpen.is_some() {
            loaded_count += 1;
        }
        if pointers.OpenPopup.is_some() {
            loaded_count += 1;
        }
        if pointers.OpenPopupOnItemClick.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginPopupContextItem.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginPopupContextWindow.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginTooltip.is_some() {
            loaded_count += 1;
        }
        if pointers.EndTooltip.is_some() {
            loaded_count += 1;
        }
        if pointers.SetTooltip.is_some() {
            loaded_count += 1;
        }
        if pointers.GetColor.is_some() {
            loaded_count += 1;
        }
        if pointers.GetColorEx.is_some() {
            loaded_count += 1;
        }
        if pointers.GetStyleColor.is_some() {
            loaded_count += 1;
        }
        if pointers.PopStyleColor.is_some() {
            loaded_count += 1;
        }
        if pointers.PushStyleColor.is_some() {
            loaded_count += 1;
        }
        if pointers.GetStyleVar.is_some() {
            loaded_count += 1;
        }
        if pointers.PopStyleVar.is_some() {
            loaded_count += 1;
        }
        if pointers.PushStyleVar.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginTabBar.is_some() {
            loaded_count += 1;
        }
        if pointers.EndTabBar.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginTabItem.is_some() {
            loaded_count += 1;
        }
        if pointers.EndTabItem.is_some() {
            loaded_count += 1;
        }
        if pointers.SetTabItemClosed.is_some() {
            loaded_count += 1;
        }
        if pointers.TabItemButton.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginTable.is_some() {
            loaded_count += 1;
        }
        if pointers.EndTable.is_some() {
            loaded_count += 1;
        }
        if pointers.TableGetColumnCount.is_some() {
            loaded_count += 1;
        }
        if pointers.TableGetColumnIndex.is_some() {
            loaded_count += 1;
        }
        if pointers.TableGetRowIndex.is_some() {
            loaded_count += 1;
        }
        if pointers.TableNextColumn.is_some() {
            loaded_count += 1;
        }
        if pointers.TableNextRow.is_some() {
            loaded_count += 1;
        }
        if pointers.TableSetColumnIndex.is_some() {
            loaded_count += 1;
        }
        if pointers.TableSetBgColor.is_some() {
            loaded_count += 1;
        }
        if pointers.TableGetColumnFlags.is_some() {
            loaded_count += 1;
        }
        if pointers.TableHeader.is_some() {
            loaded_count += 1;
        }
        if pointers.TableHeadersRow.is_some() {
            loaded_count += 1;
        }
        if pointers.TableSetColumnEnabled.is_some() {
            loaded_count += 1;
        }
        if pointers.TableSetupColumn.is_some() {
            loaded_count += 1;
        }
        if pointers.TableSetupScrollFreeze.is_some() {
            loaded_count += 1;
        }
        if pointers.TableGetColumnSortSpecs.is_some() {
            loaded_count += 1;
        }
        if pointers.TableNeedSort.is_some() {
            loaded_count += 1;
        }
        if pointers.AlignTextToFramePadding.is_some() {
            loaded_count += 1;
        }
        if pointers.Bullet.is_some() {
            loaded_count += 1;
        }
        if pointers.BulletText.is_some() {
            loaded_count += 1;
        }
        if pointers.CalcTextSize.is_some() {
            loaded_count += 1;
        }
        if pointers.DebugTextEncoding.is_some() {
            loaded_count += 1;
        }
        if pointers.GetFrameHeight.is_some() {
            loaded_count += 1;
        }
        if pointers.GetFrameHeightWithSpacing.is_some() {
            loaded_count += 1;
        }
        if pointers.GetTextLineHeight.is_some() {
            loaded_count += 1;
        }
        if pointers.GetTextLineHeightWithSpacing.is_some() {
            loaded_count += 1;
        }
        if pointers.LabelText.is_some() {
            loaded_count += 1;
        }
        if pointers.PopTextWrapPos.is_some() {
            loaded_count += 1;
        }
        if pointers.PushTextWrapPos.is_some() {
            loaded_count += 1;
        }
        if pointers.Text.is_some() {
            loaded_count += 1;
        }
        if pointers.TextColored.is_some() {
            loaded_count += 1;
        }
        if pointers.TextDisabled.is_some() {
            loaded_count += 1;
        }
        if pointers.TextWrapped.is_some() {
            loaded_count += 1;
        }
        if pointers.InputDouble.is_some() {
            loaded_count += 1;
        }
        if pointers.InputDouble2.is_some() {
            loaded_count += 1;
        }
        if pointers.InputDouble3.is_some() {
            loaded_count += 1;
        }
        if pointers.InputDouble4.is_some() {
            loaded_count += 1;
        }
        if pointers.InputInt.is_some() {
            loaded_count += 1;
        }
        if pointers.InputInt2.is_some() {
            loaded_count += 1;
        }
        if pointers.InputInt3.is_some() {
            loaded_count += 1;
        }
        if pointers.InputInt4.is_some() {
            loaded_count += 1;
        }
        if pointers.InputText.is_some() {
            loaded_count += 1;
        }
        if pointers.InputTextMultiline.is_some() {
            loaded_count += 1;
        }
        if pointers.InputTextWithHint.is_some() {
            loaded_count += 1;
        }
        if pointers.CreateTextFilter.is_some() {
            loaded_count += 1;
        }
        if pointers.TextFilter_Clear.is_some() {
            loaded_count += 1;
        }
        if pointers.TextFilter_Draw.is_some() {
            loaded_count += 1;
        }
        if pointers.TextFilter_IsActive.is_some() {
            loaded_count += 1;
        }
        if pointers.TextFilter_PassFilter.is_some() {
            loaded_count += 1;
        }
        if pointers.TextFilter_Set.is_some() {
            loaded_count += 1;
        }
        if pointers.CollapsingHeader.is_some() {
            loaded_count += 1;
        }
        if pointers.GetTreeNodeToLabelSpacing.is_some() {
            loaded_count += 1;
        }
        if pointers.IsItemToggledOpen.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextItemOpen.is_some() {
            loaded_count += 1;
        }
        if pointers.TreeNode.is_some() {
            loaded_count += 1;
        }
        if pointers.TreeNodeEx.is_some() {
            loaded_count += 1;
        }
        if pointers.TreePop.is_some() {
            loaded_count += 1;
        }
        if pointers.TreePush.is_some() {
            loaded_count += 1;
        }
        if pointers.GetVersion.is_some() {
            loaded_count += 1;
        }
        if pointers.NumericLimits_Float.is_some() {
            loaded_count += 1;
        }
        if pointers.PointConvertNative.is_some() {
            loaded_count += 1;
        }
        if pointers.ProgressBar.is_some() {
            loaded_count += 1;
        }
        if pointers.SetClipboardText.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorConvertDouble4ToU32.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorConvertHSVtoRGB.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorConvertNative.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorConvertRGBtoHSV.is_some() {
            loaded_count += 1;
        }
        if pointers.ColorConvertU32ToDouble4.is_some() {
            loaded_count += 1;
        }
        if pointers.PopID.is_some() {
            loaded_count += 1;
        }
        if pointers.PushID.is_some() {
            loaded_count += 1;
        }
        if pointers.LogFinish.is_some() {
            loaded_count += 1;
        }
        if pointers.LogText.is_some() {
            loaded_count += 1;
        }
        if pointers.LogToClipboard.is_some() {
            loaded_count += 1;
        }
        if pointers.LogToFile.is_some() {
            loaded_count += 1;
        }
        if pointers.LogToTTY.is_some() {
            loaded_count += 1;
        }
        if pointers.GetMainViewport.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowViewport.is_some() {
            loaded_count += 1;
        }
        if pointers.Viewport_GetCenter.is_some() {
            loaded_count += 1;
        }
        if pointers.Viewport_GetPos.is_some() {
            loaded_count += 1;
        }
        if pointers.Viewport_GetSize.is_some() {
            loaded_count += 1;
        }
        if pointers.Viewport_GetWorkCenter.is_some() {
            loaded_count += 1;
        }
        if pointers.Viewport_GetWorkPos.is_some() {
            loaded_count += 1;
        }
        if pointers.Viewport_GetWorkSize.is_some() {
            loaded_count += 1;
        }
        if pointers.Begin.is_some() {
            loaded_count += 1;
        }
        if pointers.End.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginChild.is_some() {
            loaded_count += 1;
        }
        if pointers.BeginChildFrame.is_some() {
            loaded_count += 1;
        }
        if pointers.EndChild.is_some() {
            loaded_count += 1;
        }
        if pointers.EndChildFrame.is_some() {
            loaded_count += 1;
        }
        if pointers.GetContentRegionAvail.is_some() {
            loaded_count += 1;
        }
        if pointers.GetContentRegionMax.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowContentRegionMax.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowContentRegionMin.is_some() {
            loaded_count += 1;
        }
        if pointers.ShowAboutWindow.is_some() {
            loaded_count += 1;
        }
        if pointers.ShowDebugLogWindow.is_some() {
            loaded_count += 1;
        }
        if pointers.ShowMetricsWindow.is_some() {
            loaded_count += 1;
        }
        if pointers.ShowStackToolWindow.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowDockID.is_some() {
            loaded_count += 1;
        }
        if pointers.IsWindowDocked.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowDockID.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowDpiScale.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowHeight.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowPos.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowSize.is_some() {
            loaded_count += 1;
        }
        if pointers.GetWindowWidth.is_some() {
            loaded_count += 1;
        }
        if pointers.IsWindowAppearing.is_some() {
            loaded_count += 1;
        }
        if pointers.IsWindowCollapsed.is_some() {
            loaded_count += 1;
        }
        if pointers.IsWindowFocused.is_some() {
            loaded_count += 1;
        }
        if pointers.IsWindowHovered.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowBgAlpha.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowCollapsed.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowContentSize.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowFocus.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowPos.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowScroll.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowSize.is_some() {
            loaded_count += 1;
        }
        if pointers.SetNextWindowSizeConstraints.is_some() {
            loaded_count += 1;
        }
        if pointers.SetWindowCollapsed.is_some() {
            loaded_count += 1;
        }
        if pointers.SetWindowCollapsedEx.is_some() {
            loaded_count += 1;
        }
        if pointers.SetWindowFocus.is_some() {
            loaded_count += 1;
        }
        if pointers.SetWindowFocusEx.is_some() {
            loaded_count += 1;
        }
        if pointers.SetWindowPos.is_some() {
            loaded_count += 1;
        }
        if pointers.SetWindowPosEx.is_some() {
            loaded_count += 1;
        }
        if pointers.SetWindowSize.is_some() {
            loaded_count += 1;
        }
        if pointers.SetWindowSizeEx.is_some() {
            loaded_count += 1;
        }
        if pointers.GetScrollMaxX.is_some() {
            loaded_count += 1;
        }
        if pointers.GetScrollMaxY.is_some() {
            loaded_count += 1;
        }
        if pointers.GetScrollX.is_some() {
            loaded_count += 1;
        }
        if pointers.GetScrollY.is_some() {
            loaded_count += 1;
        }
        if pointers.SetScrollFromPosX.is_some() {
            loaded_count += 1;
        }
        if pointers.SetScrollFromPosY.is_some() {
            loaded_count += 1;
        }
        if pointers.SetScrollHereX.is_some() {
            loaded_count += 1;
        }
        if pointers.SetScrollHereY.is_some() {
            loaded_count += 1;
        }
        if pointers.SetScrollX.is_some() {
            loaded_count += 1;
        }
        if pointers.SetScrollY.is_some() {
            loaded_count += 1;
        }
        pointers.loaded_count = loaded_count;
        Self {
            pointers,
            plugin_context: Some(plugin_context),
            Dir_Down: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Dir_Down").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Dir_Down").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Dir_Left: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Dir_Left").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Dir_Left").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Dir_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Dir_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Dir_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Dir_Right: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Dir_Right").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Dir_Right").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Dir_Up: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Dir_Up").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Dir_Up").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            ButtonFlags_MouseButtonLeft: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ButtonFlags_MouseButtonLeft").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ButtonFlags_MouseButtonLeft").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ButtonFlags_MouseButtonMiddle: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ButtonFlags_MouseButtonMiddle").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ButtonFlags_MouseButtonMiddle").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ButtonFlags_MouseButtonRight: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ButtonFlags_MouseButtonRight").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ButtonFlags_MouseButtonRight").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ButtonFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ButtonFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_ButtonFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_NoAlpha: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoAlpha").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ColorEditFlags_NoAlpha").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            ColorEditFlags_NoBorder: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoBorder").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_NoBorder").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_NoDragDrop: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoDragDrop").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_NoDragDrop").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_NoInputs: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoInputs").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_NoInputs").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_NoLabel: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoLabel").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ColorEditFlags_NoLabel").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            ColorEditFlags_NoOptions: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoOptions").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_NoOptions").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_NoPicker: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoPicker").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_NoPicker").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_NoSidePreview: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoSidePreview").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_NoSidePreview").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_NoSmallPreview: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoSmallPreview").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_NoSmallPreview").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_NoTooltip: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_NoTooltip").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_NoTooltip").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_AlphaBar: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_AlphaBar").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_AlphaBar").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_AlphaPreview: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_AlphaPreview").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_AlphaPreview").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_AlphaPreviewHalf: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_AlphaPreviewHalf").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_AlphaPreviewHalf").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_DisplayHSV: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_DisplayHSV").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_DisplayHSV").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_DisplayHex: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_DisplayHex").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_DisplayHex").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_DisplayRGB: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_DisplayRGB").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_DisplayRGB").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_Float: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_Float").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ColorEditFlags_Float").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            ColorEditFlags_InputHSV: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_InputHSV").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_InputHSV").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_InputRGB: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_InputRGB").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_InputRGB").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_PickerHueBar: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_PickerHueBar").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_PickerHueBar").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_PickerHueWheel: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_PickerHueWheel").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ColorEditFlags_PickerHueWheel").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ColorEditFlags_Uint8: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ColorEditFlags_Uint8").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ColorEditFlags_Uint8").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            ComboFlags_HeightLarge: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_HeightLarge").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ComboFlags_HeightLarge").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            ComboFlags_HeightLargest: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_HeightLargest").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ComboFlags_HeightLargest").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ComboFlags_HeightRegular: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_HeightRegular").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ComboFlags_HeightRegular").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ComboFlags_HeightSmall: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_HeightSmall").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ComboFlags_HeightSmall").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            ComboFlags_NoArrowButton: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_NoArrowButton").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ComboFlags_NoArrowButton").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ComboFlags_NoPreview: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_NoPreview").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ComboFlags_NoPreview").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            ComboFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            ComboFlags_PopupAlignLeft: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ComboFlags_PopupAlignLeft").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ComboFlags_PopupAlignLeft").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SelectableFlags_AllowDoubleClick: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SelectableFlags_AllowDoubleClick").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SelectableFlags_AllowDoubleClick").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SelectableFlags_AllowItemOverlap: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SelectableFlags_AllowItemOverlap").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SelectableFlags_AllowItemOverlap").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SelectableFlags_Disabled: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SelectableFlags_Disabled").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SelectableFlags_Disabled").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SelectableFlags_DontClosePopups: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SelectableFlags_DontClosePopups").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SelectableFlags_DontClosePopups").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SelectableFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SelectableFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_SelectableFlags_None").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            SelectableFlags_SpanAllColumns: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SelectableFlags_SpanAllColumns").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SelectableFlags_SpanAllColumns").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigFlags_DockingEnable: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_DockingEnable").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigFlags_DockingEnable").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigFlags_NavEnableKeyboard: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_NavEnableKeyboard").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigFlags_NavEnableKeyboard").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigFlags_NavEnableSetMousePos: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_NavEnableSetMousePos").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigFlags_NavEnableSetMousePos").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigFlags_NavNoCaptureKeyboard: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_NavNoCaptureKeyboard").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigFlags_NavNoCaptureKeyboard").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigFlags_NoMouse: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_NoMouse").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_NoMouse").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            ConfigFlags_NoMouseCursorChange: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_NoMouseCursorChange").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigFlags_NoMouseCursorChange").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigFlags_NoSavedSettings: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_NoSavedSettings").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigFlags_NoSavedSettings").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_ConfigFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            ConfigVar_DockingNoSplit: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_DockingNoSplit").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_DockingNoSplit").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_DockingTransparentPayload: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_ConfigVar_DockingTransparentPayload").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ConfigVar_DockingTransparentPayload")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            ConfigVar_DockingWithShift: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_DockingWithShift").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_DockingWithShift").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_DragClickToInputText: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_DragClickToInputText").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_DragClickToInputText").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_Flags: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_Flags").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_Flags").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            ConfigVar_HoverDelayNormal: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_HoverDelayNormal").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_HoverDelayNormal").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_HoverDelayShort: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_HoverDelayShort").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_HoverDelayShort").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_InputTextCursorBlink: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_InputTextCursorBlink").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_InputTextCursorBlink").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_InputTextEnterKeepActive: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_ConfigVar_InputTextEnterKeepActive").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ConfigVar_InputTextEnterKeepActive")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            ConfigVar_InputTrickleEventQueue: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_InputTrickleEventQueue").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_InputTrickleEventQueue").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_KeyRepeatDelay: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_KeyRepeatDelay").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_KeyRepeatDelay").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_KeyRepeatRate: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_KeyRepeatRate").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_KeyRepeatRate").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_MacOSXBehaviors: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_MacOSXBehaviors").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_MacOSXBehaviors").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_MouseDoubleClickMaxDist: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_ConfigVar_MouseDoubleClickMaxDist").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_MouseDoubleClickMaxDist").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_MouseDoubleClickTime: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_MouseDoubleClickTime").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_MouseDoubleClickTime").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_MouseDragThreshold: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_MouseDragThreshold").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_MouseDragThreshold").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_ViewportsNoDecoration: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_ViewportsNoDecoration").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_ViewportsNoDecoration").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            ConfigVar_WindowsMoveFromTitleBarOnly: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_ConfigVar_WindowsMoveFromTitleBarOnly").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_ConfigVar_WindowsMoveFromTitleBarOnly")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            ConfigVar_WindowsResizeFromEdges: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_ConfigVar_WindowsResizeFromEdges").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_ConfigVar_WindowsResizeFromEdges").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DragDropFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DragDropFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_DragDropFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            DragDropFlags_AcceptBeforeDelivery: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_DragDropFlags_AcceptBeforeDelivery").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_DragDropFlags_AcceptBeforeDelivery")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            DragDropFlags_AcceptNoDrawDefaultRect: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_DragDropFlags_AcceptNoDrawDefaultRect").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_DragDropFlags_AcceptNoDrawDefaultRect")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            DragDropFlags_AcceptNoPreviewTooltip: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_DragDropFlags_AcceptNoPreviewTooltip").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_DragDropFlags_AcceptNoPreviewTooltip")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            DragDropFlags_AcceptPeekOnly: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DragDropFlags_AcceptPeekOnly").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DragDropFlags_AcceptPeekOnly").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DragDropFlags_SourceAllowNullID: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DragDropFlags_SourceAllowNullID").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DragDropFlags_SourceAllowNullID").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DragDropFlags_SourceAutoExpirePayload: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_DragDropFlags_SourceAutoExpirePayload").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_DragDropFlags_SourceAutoExpirePayload")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            DragDropFlags_SourceExtern: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DragDropFlags_SourceExtern").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DragDropFlags_SourceExtern").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DragDropFlags_SourceNoDisableHover: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_DragDropFlags_SourceNoDisableHover").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_DragDropFlags_SourceNoDisableHover")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            DragDropFlags_SourceNoHoldToOpenOthers: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_DragDropFlags_SourceNoHoldToOpenOthers")
                            .as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_DragDropFlags_SourceNoHoldToOpenOthers")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            DragDropFlags_SourceNoPreviewTooltip: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_DragDropFlags_SourceNoPreviewTooltip").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_DragDropFlags_SourceNoPreviewTooltip")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            SliderFlags_AlwaysClamp: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SliderFlags_AlwaysClamp").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SliderFlags_AlwaysClamp").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SliderFlags_Logarithmic: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SliderFlags_Logarithmic").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SliderFlags_Logarithmic").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SliderFlags_NoInput: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SliderFlags_NoInput").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_SliderFlags_NoInput").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            SliderFlags_NoRoundToFormat: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SliderFlags_NoRoundToFormat").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SliderFlags_NoRoundToFormat").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SliderFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SliderFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_SliderFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            DrawFlags_Closed: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_Closed").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_Closed").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            DrawFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersAll: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersAll").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersAll").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersBottom: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersBottom").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersBottom").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersBottomLeft: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersBottomLeft").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersBottomLeft").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersBottomRight: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersBottomRight").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersBottomRight").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersLeft: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersLeft").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersLeft").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersNone: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersNone").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersNone").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersRight: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersRight").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersRight").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersTop: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersTop").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersTop").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersTopLeft: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersTopLeft").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersTopLeft").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            DrawFlags_RoundCornersTopRight: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersTopRight").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_DrawFlags_RoundCornersTopRight").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            FontFlags_Bold: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FontFlags_Bold").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_FontFlags_Bold").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            FontFlags_Italic: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FontFlags_Italic").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_FontFlags_Italic").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            FontFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FontFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_FontFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            HoveredFlags_AllowWhenBlockedByActiveItem: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_HoveredFlags_AllowWhenBlockedByActiveItem")
                            .as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!(
                                    "ImGui_HoveredFlags_AllowWhenBlockedByActiveItem"
                                )
                                .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            HoveredFlags_AllowWhenBlockedByPopup: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_HoveredFlags_AllowWhenBlockedByPopup").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_HoveredFlags_AllowWhenBlockedByPopup")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            HoveredFlags_DelayNormal: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_DelayNormal").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_DelayNormal").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_DelayShort: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_DelayShort").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_DelayShort").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_NoNavOverride: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_NoNavOverride").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_NoNavOverride").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_NoSharedDelay: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_NoSharedDelay").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_NoSharedDelay").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            HoveredFlags_AllowWhenDisabled: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_AllowWhenDisabled").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_AllowWhenDisabled").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_AllowWhenOverlapped: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_AllowWhenOverlapped").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_AllowWhenOverlapped").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_RectOnly: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_RectOnly").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_HoveredFlags_RectOnly").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            HoveredFlags_AnyWindow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_AnyWindow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_HoveredFlags_AnyWindow").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            HoveredFlags_ChildWindows: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_ChildWindows").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_ChildWindows").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_DockHierarchy: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_DockHierarchy").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_DockHierarchy").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_NoPopupHierarchy: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_NoPopupHierarchy").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_NoPopupHierarchy").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_RootAndChildWindows: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_RootAndChildWindows").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_RootAndChildWindows").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            HoveredFlags_RootWindow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_HoveredFlags_RootWindow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_HoveredFlags_RootWindow").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            Key_0: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_0").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_0").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_1: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_1").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_1").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_2: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_2").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_2").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_3: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_3").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_3").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_4: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_4").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_4").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_5: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_5").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_5").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_6: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_6").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_6").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_7: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_7").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_7").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_8: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_8").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_8").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_9: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_9").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_9").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_A: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_A").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_A").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Apostrophe: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Apostrophe").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Apostrophe").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_B: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_B").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_B").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Backslash: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Backslash").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Backslash").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Backspace: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Backspace").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Backspace").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_C: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_C").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_C").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_CapsLock: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_CapsLock").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_CapsLock").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Comma: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Comma").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Comma").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_D: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_D").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_D").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Delete: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Delete").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Delete").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_DownArrow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_DownArrow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_DownArrow").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_E: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_E").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_E").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_End: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_End").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_End").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Enter: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Enter").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Enter").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Equal: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Equal").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Equal").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Escape: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Escape").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Escape").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F1: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F1").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F1").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F10: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F10").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F10").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F11: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F11").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F11").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F12: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F12").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F12").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F2: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F2").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F2").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F3: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F3").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F3").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F4: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F4").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F4").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F5: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F5").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F5").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F6: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F6").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F6").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F7: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F7").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F7").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F8: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F8").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F8").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_F9: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_F9").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_F9").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_G: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_G").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_G").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_GraveAccent: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_GraveAccent").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_GraveAccent").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_H: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_H").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_H").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Home: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Home").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Home").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_I: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_I").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_I").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Insert: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Insert").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Insert").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_J: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_J").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_J").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_K: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_K").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_K").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad0: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad0").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad0").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad1: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad1").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad1").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad2: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad2").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad2").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad3: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad3").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad3").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad4: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad4").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad4").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad5: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad5").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad5").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad6: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad6").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad6").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad7: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad7").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad7").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad8: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad8").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad8").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Keypad9: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad9").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Keypad9").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_KeypadAdd: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadAdd").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadAdd").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_KeypadDecimal: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadDecimal").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadDecimal").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_KeypadDivide: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadDivide").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadDivide").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_KeypadEnter: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadEnter").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadEnter").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_KeypadEqual: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadEqual").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadEqual").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_KeypadMultiply: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadMultiply").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadMultiply").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_KeypadSubtract: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadSubtract").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_KeypadSubtract").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_L: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_L").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_L").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_LeftAlt: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftAlt").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftAlt").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_LeftArrow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftArrow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftArrow").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_LeftBracket: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftBracket").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftBracket").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_LeftCtrl: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftCtrl").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftCtrl").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_LeftShift: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftShift").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftShift").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_LeftSuper: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftSuper").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_LeftSuper").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_M: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_M").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_M").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Menu: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Menu").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Menu").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Minus: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Minus").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Minus").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_N: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_N").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_N").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_NumLock: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_NumLock").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_NumLock").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_O: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_O").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_O").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_P: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_P").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_P").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_PageDown: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_PageDown").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_PageDown").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_PageUp: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_PageUp").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_PageUp").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Pause: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Pause").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Pause").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Period: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Period").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Period").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_PrintScreen: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_PrintScreen").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_PrintScreen").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Q: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Q").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Q").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_R: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_R").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_R").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_RightAlt: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_RightAlt").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_RightAlt").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_RightArrow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_RightArrow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_RightArrow").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_RightBracket: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_RightBracket").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_RightBracket").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_RightCtrl: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_RightCtrl").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_RightCtrl").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_RightShift: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_RightShift").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_RightShift").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_RightSuper: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_RightSuper").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_RightSuper").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_S: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_S").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_S").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_ScrollLock: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_ScrollLock").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_ScrollLock").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Semicolon: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Semicolon").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_Semicolon").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Slash: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Slash").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Slash").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Space: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Space").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Space").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_T: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_T").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_T").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Tab: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Tab").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Tab").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_U: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_U").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_U").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_UpArrow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_UpArrow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_UpArrow").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_V: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_V").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_V").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_W: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_W").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_W").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_X: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_X").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_X").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Y: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Y").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Y").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_Z: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_Z").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Key_Z").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Mod_Alt: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Mod_Alt").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Mod_Alt").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Mod_Ctrl: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Mod_Ctrl").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Mod_Ctrl").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Mod_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Mod_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Mod_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Mod_Shift: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Mod_Shift").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Mod_Shift").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Mod_Shortcut: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Mod_Shortcut").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Mod_Shortcut").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Mod_Super: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Mod_Super").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Mod_Super").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_MouseLeft: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseLeft").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseLeft").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_MouseMiddle: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseMiddle").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseMiddle").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_MouseRight: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseRight").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseRight").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_MouseWheelX: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseWheelX").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseWheelX").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_MouseWheelY: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseWheelY").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseWheelY").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_MouseX1: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseX1").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseX1").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Key_MouseX2: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseX2").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Key_MouseX2").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            MouseButton_Left: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseButton_Left").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_MouseButton_Left").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            MouseButton_Middle: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseButton_Middle").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_MouseButton_Middle").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            MouseButton_Right: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseButton_Right").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_MouseButton_Right").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            MouseCursor_Arrow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_Arrow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_Arrow").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            MouseCursor_Hand: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_Hand").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_Hand").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            MouseCursor_NotAllowed: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_NotAllowed").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_MouseCursor_NotAllowed").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            MouseCursor_ResizeAll: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_ResizeAll").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_MouseCursor_ResizeAll").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            MouseCursor_ResizeEW: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_ResizeEW").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_MouseCursor_ResizeEW").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            MouseCursor_ResizeNESW: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_ResizeNESW").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_MouseCursor_ResizeNESW").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            MouseCursor_ResizeNS: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_ResizeNS").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_MouseCursor_ResizeNS").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            MouseCursor_ResizeNWSE: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_ResizeNWSE").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_MouseCursor_ResizeNWSE").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            MouseCursor_TextInput: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_MouseCursor_TextInput").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_MouseCursor_TextInput").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            PopupFlags_NoOpenOverExistingPopup: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_PopupFlags_NoOpenOverExistingPopup").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_PopupFlags_NoOpenOverExistingPopup")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            PopupFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            PopupFlags_MouseButtonLeft: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_MouseButtonLeft").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_PopupFlags_MouseButtonLeft").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            PopupFlags_MouseButtonMiddle: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_MouseButtonMiddle").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_PopupFlags_MouseButtonMiddle").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            PopupFlags_MouseButtonRight: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_MouseButtonRight").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_PopupFlags_MouseButtonRight").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            PopupFlags_NoOpenOverItems: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_NoOpenOverItems").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_PopupFlags_NoOpenOverItems").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            PopupFlags_AnyPopup: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_AnyPopup").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_AnyPopup").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            PopupFlags_AnyPopupId: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_AnyPopupId").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_PopupFlags_AnyPopupId").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            PopupFlags_AnyPopupLevel: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_PopupFlags_AnyPopupLevel").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_PopupFlags_AnyPopupLevel").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            Col_Border: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_Border").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_Border").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_BorderShadow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_BorderShadow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_BorderShadow").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_Button: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_Button").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_Button").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_ButtonActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ButtonActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_ButtonActive").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_ButtonHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ButtonHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_ButtonHovered").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_CheckMark: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_CheckMark").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_CheckMark").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_ChildBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ChildBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_ChildBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_DockingEmptyBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_DockingEmptyBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_DockingEmptyBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_DockingPreview: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_DockingPreview").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_DockingPreview").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_DragDropTarget: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_DragDropTarget").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_DragDropTarget").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_FrameBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_FrameBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_FrameBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_FrameBgActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_FrameBgActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_FrameBgActive").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_FrameBgHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_FrameBgHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_FrameBgHovered").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_Header: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_Header").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_Header").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_HeaderActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_HeaderActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_HeaderActive").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_HeaderHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_HeaderHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_HeaderHovered").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_MenuBarBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_MenuBarBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_MenuBarBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_ModalWindowDimBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ModalWindowDimBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_ModalWindowDimBg").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_NavHighlight: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_NavHighlight").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_NavHighlight").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_NavWindowingDimBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_NavWindowingDimBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_NavWindowingDimBg").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_NavWindowingHighlight: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_NavWindowingHighlight").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_Col_NavWindowingHighlight").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            Col_PlotHistogram: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_PlotHistogram").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_PlotHistogram").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_PlotHistogramHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_PlotHistogramHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_Col_PlotHistogramHovered").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            Col_PlotLines: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_PlotLines").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_PlotLines").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_PlotLinesHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_PlotLinesHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_PlotLinesHovered").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_PopupBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_PopupBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_PopupBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_ResizeGrip: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ResizeGrip").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_ResizeGrip").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_ResizeGripActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ResizeGripActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_ResizeGripActive").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_ResizeGripHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ResizeGripHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_ResizeGripHovered").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_ScrollbarBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ScrollbarBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_ScrollbarBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_ScrollbarGrab: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ScrollbarGrab").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_ScrollbarGrab").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_ScrollbarGrabActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ScrollbarGrabActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_Col_ScrollbarGrabActive").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            Col_ScrollbarGrabHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_ScrollbarGrabHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_Col_ScrollbarGrabHovered").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            Col_Separator: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_Separator").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_Separator").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_SeparatorActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_SeparatorActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_SeparatorActive").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_SeparatorHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_SeparatorHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_SeparatorHovered").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_SliderGrab: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_SliderGrab").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_SliderGrab").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_SliderGrabActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_SliderGrabActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_SliderGrabActive").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_Tab: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_Tab").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Col_Tab").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TabActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TabActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TabActive").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TabHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TabHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TabHovered").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TabUnfocused: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TabUnfocused").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TabUnfocused").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TabUnfocusedActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TabUnfocusedActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_TabUnfocusedActive").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_TableBorderLight: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TableBorderLight").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_TableBorderLight").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_TableBorderStrong: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TableBorderStrong").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_TableBorderStrong").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_TableHeaderBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TableHeaderBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TableHeaderBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TableRowBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TableRowBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TableRowBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TableRowBgAlt: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TableRowBgAlt").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TableRowBgAlt").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_Text: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_Text").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Col_Text").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TextDisabled: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TextDisabled").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TextDisabled").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TextSelectedBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TextSelectedBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TextSelectedBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TitleBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TitleBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TitleBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TitleBgActive: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TitleBgActive").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_TitleBgActive").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Col_TitleBgCollapsed: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_TitleBgCollapsed").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_Col_TitleBgCollapsed").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            Col_WindowBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Col_WindowBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Col_WindowBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            StyleVar_Alpha: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_Alpha").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_Alpha").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            StyleVar_ButtonTextAlign: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_ButtonTextAlign").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_ButtonTextAlign").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_CellPadding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_CellPadding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_CellPadding").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_ChildBorderSize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_ChildBorderSize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_ChildBorderSize").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_ChildRounding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_ChildRounding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_ChildRounding").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_DisabledAlpha: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_DisabledAlpha").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_DisabledAlpha").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_FrameBorderSize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_FrameBorderSize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_FrameBorderSize").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_FramePadding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_FramePadding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_FramePadding").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_FrameRounding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_FrameRounding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_FrameRounding").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_GrabMinSize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_GrabMinSize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_GrabMinSize").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_GrabRounding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_GrabRounding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_GrabRounding").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_IndentSpacing: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_IndentSpacing").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_IndentSpacing").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_ItemInnerSpacing: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_ItemInnerSpacing").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_ItemInnerSpacing").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_ItemSpacing: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_ItemSpacing").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_ItemSpacing").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_PopupBorderSize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_PopupBorderSize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_PopupBorderSize").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_PopupRounding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_PopupRounding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_PopupRounding").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_ScrollbarRounding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_ScrollbarRounding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_ScrollbarRounding").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_ScrollbarSize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_ScrollbarSize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_ScrollbarSize").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_SelectableTextAlign: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_SelectableTextAlign").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_SelectableTextAlign").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_TabRounding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_TabRounding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_TabRounding").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_WindowBorderSize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_WindowBorderSize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_WindowBorderSize").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_WindowMinSize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_WindowMinSize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_WindowMinSize").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_WindowPadding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_WindowPadding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_StyleVar_WindowPadding").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            StyleVar_WindowRounding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_WindowRounding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_WindowRounding").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            StyleVar_WindowTitleAlign: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_StyleVar_WindowTitleAlign").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_StyleVar_WindowTitleAlign").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TabBarFlags_AutoSelectNewTabs: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabBarFlags_AutoSelectNewTabs").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TabBarFlags_AutoSelectNewTabs").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TabBarFlags_FittingPolicyResizeDown: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_TabBarFlags_FittingPolicyResizeDown").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TabBarFlags_FittingPolicyResizeDown")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            TabBarFlags_FittingPolicyScroll: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabBarFlags_FittingPolicyScroll").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TabBarFlags_FittingPolicyScroll").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TabBarFlags_NoCloseWithMiddleMouseButton: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_TabBarFlags_NoCloseWithMiddleMouseButton")
                            .as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!(
                                    "ImGui_TabBarFlags_NoCloseWithMiddleMouseButton"
                                )
                                .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            TabBarFlags_NoTabListScrollingButtons: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_TabBarFlags_NoTabListScrollingButtons").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TabBarFlags_NoTabListScrollingButtons")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            TabBarFlags_NoTooltip: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabBarFlags_NoTooltip").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TabBarFlags_NoTooltip").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TabBarFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabBarFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TabBarFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TabBarFlags_Reorderable: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabBarFlags_Reorderable").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TabBarFlags_Reorderable").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TabBarFlags_TabListPopupButton: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabBarFlags_TabListPopupButton").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TabBarFlags_TabListPopupButton").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TabItemFlags_Leading: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_Leading").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TabItemFlags_Leading").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TabItemFlags_NoCloseWithMiddleMouseButton: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_TabItemFlags_NoCloseWithMiddleMouseButton")
                            .as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!(
                                    "ImGui_TabItemFlags_NoCloseWithMiddleMouseButton"
                                )
                                .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            TabItemFlags_NoPushId: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_NoPushId").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TabItemFlags_NoPushId").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TabItemFlags_NoReorder: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_NoReorder").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TabItemFlags_NoReorder").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TabItemFlags_NoTooltip: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_NoTooltip").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TabItemFlags_NoTooltip").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TabItemFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TabItemFlags_SetSelected: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_SetSelected").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TabItemFlags_SetSelected").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TabItemFlags_Trailing: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_Trailing").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TabItemFlags_Trailing").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TabItemFlags_UnsavedDocument: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TabItemFlags_UnsavedDocument").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TabItemFlags_UnsavedDocument").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableRowFlags_Headers: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableRowFlags_Headers").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableRowFlags_Headers").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableRowFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableRowFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableRowFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableBgTarget_CellBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableBgTarget_CellBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableBgTarget_CellBg").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableBgTarget_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableBgTarget_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableBgTarget_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableBgTarget_RowBg0: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableBgTarget_RowBg0").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableBgTarget_RowBg0").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableBgTarget_RowBg1: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableBgTarget_RowBg1").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableBgTarget_RowBg1").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableColumnFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableColumnFlags_None").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableColumnFlags_DefaultHide: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_DefaultHide").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_DefaultHide").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_DefaultSort: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_DefaultSort").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_DefaultSort").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_Disabled: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_Disabled").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_Disabled").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_IndentDisable: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_IndentDisable").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_IndentDisable").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_IndentEnable: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_IndentEnable").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_IndentEnable").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoClip: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_NoClip").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoClip").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoHeaderLabel: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_NoHeaderLabel").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoHeaderLabel").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoHeaderWidth: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_NoHeaderWidth").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoHeaderWidth").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoHide: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_NoHide").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoHide").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoReorder: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_NoReorder").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoReorder").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoResize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_NoResize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoResize").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoSort: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_NoSort").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoSort").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoSortAscending: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_NoSortAscending").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoSortAscending").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_NoSortDescending: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_TableColumnFlags_NoSortDescending").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_NoSortDescending").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_PreferSortAscending: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_TableColumnFlags_PreferSortAscending").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableColumnFlags_PreferSortAscending")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_PreferSortDescending: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_TableColumnFlags_PreferSortDescending").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableColumnFlags_PreferSortDescending")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_WidthFixed: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_WidthFixed").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_WidthFixed").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_WidthStretch: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_WidthStretch").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_WidthStretch").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_IsEnabled: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_IsEnabled").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_IsEnabled").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_IsHovered: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_IsHovered").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_IsHovered").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_IsSorted: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_IsSorted").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_IsSorted").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableColumnFlags_IsVisible: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableColumnFlags_IsVisible").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableColumnFlags_IsVisible").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SortDirection_Ascending: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SortDirection_Ascending").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SortDirection_Ascending").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SortDirection_Descending: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SortDirection_Descending").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_SortDirection_Descending").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            SortDirection_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_SortDirection_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_SortDirection_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_NoClip: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_NoClip").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_NoClip").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_Borders: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_Borders").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_Borders").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_BordersH: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersH").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersH").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_BordersInner: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersInner").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_BordersInner").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_BordersInnerH: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersInnerH").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_BordersInnerH").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_BordersInnerV: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersInnerV").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_BordersInnerV").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_BordersOuter: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersOuter").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_BordersOuter").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_BordersOuterH: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersOuterH").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_BordersOuterH").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_BordersOuterV: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersOuterV").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_BordersOuterV").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_BordersV: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersV").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_BordersV").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_RowBg: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_RowBg").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_RowBg").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_ContextMenuInBody: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_ContextMenuInBody").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_ContextMenuInBody").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_Hideable: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_Hideable").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_Hideable").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_NoSavedSettings: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_NoSavedSettings").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_NoSavedSettings").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_Reorderable: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_Reorderable").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableFlags_Reorderable").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableFlags_Resizable: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_Resizable").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableFlags_Resizable").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableFlags_Sortable: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_Sortable").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_Sortable").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_NoPadInnerX: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_NoPadInnerX").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableFlags_NoPadInnerX").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableFlags_NoPadOuterX: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_NoPadOuterX").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableFlags_NoPadOuterX").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableFlags_PadOuterX: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_PadOuterX").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableFlags_PadOuterX").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableFlags_ScrollX: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_ScrollX").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_ScrollX").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_ScrollY: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_ScrollY").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_ScrollY").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TableFlags_NoHostExtendX: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_NoHostExtendX").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_NoHostExtendX").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_NoHostExtendY: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_NoHostExtendY").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_NoHostExtendY").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_NoKeepColumnsVisible: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_NoKeepColumnsVisible").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_NoKeepColumnsVisible").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_PreciseWidths: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_PreciseWidths").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_PreciseWidths").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_SizingFixedFit: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_SizingFixedFit").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_SizingFixedFit").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_SizingFixedSame: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_SizingFixedSame").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_SizingFixedSame").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_SizingStretchProp: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_SizingStretchProp").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_SizingStretchProp").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_SizingStretchSame: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_SizingStretchSame").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_SizingStretchSame").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TableFlags_SortMulti: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_SortMulti").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TableFlags_SortMulti").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TableFlags_SortTristate: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TableFlags_SortTristate").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TableFlags_SortTristate").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_AllowTabInput: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_AllowTabInput").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_AllowTabInput").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_AlwaysOverwrite: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_AlwaysOverwrite").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_AlwaysOverwrite").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_AutoSelectAll: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_AutoSelectAll").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_AutoSelectAll").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_CharsDecimal: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_CharsDecimal").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_CharsDecimal").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_CharsHexadecimal: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_CharsHexadecimal").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_CharsHexadecimal").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_CharsNoBlank: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_CharsNoBlank").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_CharsNoBlank").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_CharsScientific: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_CharsScientific").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_CharsScientific").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_CharsUppercase: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_CharsUppercase").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_CharsUppercase").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_CtrlEnterForNewLine: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_InputTextFlags_CtrlEnterForNewLine").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_InputTextFlags_CtrlEnterForNewLine")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            InputTextFlags_EnterReturnsTrue: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_EnterReturnsTrue").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_EnterReturnsTrue").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_EscapeClearsAll: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_EscapeClearsAll").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_EscapeClearsAll").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_NoHorizontalScroll: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_InputTextFlags_NoHorizontalScroll").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_NoHorizontalScroll").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_NoUndoRedo: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_NoUndoRedo").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_NoUndoRedo").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            InputTextFlags_Password: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_Password").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_Password").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            InputTextFlags_ReadOnly: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_InputTextFlags_ReadOnly").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_InputTextFlags_ReadOnly").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_AllowItemOverlap: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_AllowItemOverlap").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_AllowItemOverlap").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_Bullet: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_Bullet").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TreeNodeFlags_Bullet").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TreeNodeFlags_CollapsingHeader: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_CollapsingHeader").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_CollapsingHeader").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_DefaultOpen: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_DefaultOpen").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_DefaultOpen").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_FramePadding: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_FramePadding").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_FramePadding").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_Framed: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_Framed").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TreeNodeFlags_Framed").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TreeNodeFlags_Leaf: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_Leaf").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_Leaf").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_NoAutoOpenOnLog: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_NoAutoOpenOnLog").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_NoAutoOpenOnLog").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_NoTreePushOnOpen: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_NoTreePushOnOpen").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_NoTreePushOnOpen").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_OpenOnArrow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_OpenOnArrow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_OpenOnArrow").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_OpenOnDoubleClick: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_OpenOnDoubleClick").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_OpenOnDoubleClick").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_Selected: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_Selected").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_TreeNodeFlags_Selected").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            TreeNodeFlags_SpanAvailWidth: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_SpanAvailWidth").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_SpanAvailWidth").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            TreeNodeFlags_SpanFullWidth: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_TreeNodeFlags_SpanFullWidth").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_TreeNodeFlags_SpanFullWidth").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            Cond_Always: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Cond_Always").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Cond_Always").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Cond_Appearing: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Cond_Appearing").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Cond_Appearing").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Cond_FirstUseEver: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Cond_FirstUseEver").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_Cond_FirstUseEver").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            Cond_Once: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_Cond_Once").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(c_str_macro::c_str!("ImGui_Cond_Once").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_AlwaysAutoResize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_AlwaysAutoResize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_AlwaysAutoResize").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_AlwaysHorizontalScrollbar: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_WindowFlags_AlwaysHorizontalScrollbar").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_AlwaysHorizontalScrollbar")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_AlwaysUseWindowPadding: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_WindowFlags_AlwaysUseWindowPadding").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_AlwaysUseWindowPadding")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_AlwaysVerticalScrollbar: unsafe {
                match plugin_context
                    .GetFunc(
                        c_str_macro::c_str!("ImGui_WindowFlags_AlwaysVerticalScrollbar").as_ptr(),
                    )
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_AlwaysVerticalScrollbar")
                                    .as_ptr(),
                            ),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_HorizontalScrollbar: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_HorizontalScrollbar").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_HorizontalScrollbar").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_MenuBar: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_MenuBar").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_MenuBar").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoBackground: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoBackground").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_NoBackground").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoCollapse: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoCollapse").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_NoCollapse").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            WindowFlags_NoDecoration: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoDecoration").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_NoDecoration").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoDocking: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoDocking").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_NoDocking").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            WindowFlags_NoFocusOnAppearing: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoFocusOnAppearing").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_NoFocusOnAppearing").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoInputs: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoInputs").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_NoInputs").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            WindowFlags_NoMouseInputs: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoMouseInputs").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_NoMouseInputs").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoMove: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoMove").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoMove").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoNav: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoNav").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoNav").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoNavFocus: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoNavFocus").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_NoNavFocus").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            WindowFlags_NoNavInputs: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoNavInputs").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_NoNavInputs").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoResize: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoResize").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_NoResize").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            WindowFlags_NoSavedSettings: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoSavedSettings").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_NoSavedSettings").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoScrollWithMouse: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoScrollWithMouse").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_NoScrollWithMouse").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoScrollbar: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoScrollbar").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_NoScrollbar").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            WindowFlags_NoTitleBar: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_NoTitleBar").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_WindowFlags_NoTitleBar").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            WindowFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_TopMost: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_TopMost").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_TopMost").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            WindowFlags_UnsavedDocument: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_WindowFlags_UnsavedDocument").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_WindowFlags_UnsavedDocument").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            FocusedFlags_AnyWindow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FocusedFlags_AnyWindow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => {
                        Some((ConstLoader {
                            f: std::mem::transmute(plugin_context.GetFunc(
                                c_str_macro::c_str!("ImGui_FocusedFlags_AnyWindow").as_ptr(),
                            )),
                        }
                        .f)())
                    }
                }
            },
            FocusedFlags_ChildWindows: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FocusedFlags_ChildWindows").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_FocusedFlags_ChildWindows").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            FocusedFlags_DockHierarchy: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FocusedFlags_DockHierarchy").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_FocusedFlags_DockHierarchy").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            FocusedFlags_NoPopupHierarchy: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FocusedFlags_NoPopupHierarchy").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_FocusedFlags_NoPopupHierarchy").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            FocusedFlags_None: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FocusedFlags_None").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(
                            plugin_context
                                .GetFunc(c_str_macro::c_str!("ImGui_FocusedFlags_None").as_ptr()),
                        ),
                    }
                    .f)()),
                }
            },
            FocusedFlags_RootAndChildWindows: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FocusedFlags_RootAndChildWindows").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_FocusedFlags_RootAndChildWindows").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
            FocusedFlags_RootWindow: unsafe {
                match plugin_context
                    .GetFunc(c_str_macro::c_str!("ImGui_FocusedFlags_RootWindow").as_ptr())
                    .is_null()
                {
                    true => None,
                    false => Some((ConstLoader {
                        f: std::mem::transmute(plugin_context.GetFunc(
                            c_str_macro::c_str!("ImGui_FocusedFlags_RootWindow").as_ptr(),
                        )),
                    }
                    .f)()),
                }
            },
        }
    }
    pub unsafe fn ArrowButton(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        dir: std::ffi::c_int,
    ) -> bool {
        match self.pointers.ArrowButton {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ArrowButton)
            ),
            Some(f) => f(ctx, str_id, dir),
        }
    }
    pub unsafe fn Button(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        size_wInOptional: *mut f64,
        size_hInOptional: *mut f64,
    ) -> bool {
        match self.pointers.Button {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Button)
            ),
            Some(f) => f(ctx, label, size_wInOptional, size_hInOptional),
        }
    }
    pub unsafe fn Checkbox(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        vInOut: *mut bool,
    ) -> bool {
        match self.pointers.Checkbox {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Checkbox)
            ),
            Some(f) => f(ctx, label, vInOut),
        }
    }
    pub unsafe fn CheckboxFlags(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        flagsInOut: *mut std::ffi::c_int,
        flags_value: std::ffi::c_int,
    ) -> bool {
        match self.pointers.CheckboxFlags {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CheckboxFlags)
            ),
            Some(f) => f(ctx, label, flagsInOut, flags_value),
        }
    }
    pub unsafe fn InvisibleButton(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        size_w: f64,
        size_h: f64,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InvisibleButton {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InvisibleButton)
            ),
            Some(f) => f(ctx, str_id, size_w, size_h, flagsInOptional),
        }
    }
    pub unsafe fn PopButtonRepeat(&self, ctx: Context) -> () {
        match self.pointers.PopButtonRepeat {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopButtonRepeat)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn PushButtonRepeat(&self, ctx: Context, repeat: bool) -> () {
        match self.pointers.PushButtonRepeat {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushButtonRepeat)
            ),
            Some(f) => f(ctx, repeat),
        }
    }
    pub unsafe fn RadioButton(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        active: bool,
    ) -> bool {
        match self.pointers.RadioButton {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(RadioButton)
            ),
            Some(f) => f(ctx, label, active),
        }
    }
    pub unsafe fn RadioButtonEx(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        vInOut: *mut std::ffi::c_int,
        v_button: std::ffi::c_int,
    ) -> bool {
        match self.pointers.RadioButtonEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(RadioButtonEx)
            ),
            Some(f) => f(ctx, label, vInOut, v_button),
        }
    }
    pub unsafe fn SmallButton(&self, ctx: Context, label: *const std::ffi::c_char) -> bool {
        match self.pointers.SmallButton {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SmallButton)
            ),
            Some(f) => f(ctx, label),
        }
    }
    pub unsafe fn ColorButton(
        &self,
        ctx: Context,
        desc_id: *const std::ffi::c_char,
        col_rgba: std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
        size_wInOptional: *mut f64,
        size_hInOptional: *mut f64,
    ) -> bool {
        match self.pointers.ColorButton {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorButton)
            ),
            Some(f) => f(
                ctx,
                desc_id,
                col_rgba,
                flagsInOptional,
                size_wInOptional,
                size_hInOptional,
            ),
        }
    }
    pub unsafe fn ColorEdit3(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        col_rgbInOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.ColorEdit3 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorEdit3)
            ),
            Some(f) => f(ctx, label, col_rgbInOut, flagsInOptional),
        }
    }
    pub unsafe fn ColorEdit4(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        col_rgbaInOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.ColorEdit4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorEdit4)
            ),
            Some(f) => f(ctx, label, col_rgbaInOut, flagsInOptional),
        }
    }
    pub unsafe fn ColorPicker3(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        col_rgbInOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.ColorPicker3 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorPicker3)
            ),
            Some(f) => f(ctx, label, col_rgbInOut, flagsInOptional),
        }
    }
    pub unsafe fn ColorPicker4(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        col_rgbaInOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
        ref_colInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.ColorPicker4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorPicker4)
            ),
            Some(f) => f(
                ctx,
                label,
                col_rgbaInOut,
                flagsInOptional,
                ref_colInOptional,
            ),
        }
    }
    pub unsafe fn SetColorEditOptions(&self, ctx: Context, flags: std::ffi::c_int) -> () {
        match self.pointers.SetColorEditOptions {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetColorEditOptions)
            ),
            Some(f) => f(ctx, flags),
        }
    }
    pub unsafe fn BeginCombo(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        preview_value: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginCombo {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginCombo)
            ),
            Some(f) => f(ctx, label, preview_value, flagsInOptional),
        }
    }
    pub unsafe fn Combo(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        current_itemInOut: *mut std::ffi::c_int,
        items: *const std::ffi::c_char,
        items_sz: std::ffi::c_int,
        popup_max_height_in_itemsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.Combo {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Combo)
            ),
            Some(f) => f(
                ctx,
                label,
                current_itemInOut,
                items,
                items_sz,
                popup_max_height_in_itemsInOptional,
            ),
        }
    }
    pub unsafe fn EndCombo(&self, ctx: Context) -> () {
        match self.pointers.EndCombo {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndCombo)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn BeginListBox(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        size_wInOptional: *mut f64,
        size_hInOptional: *mut f64,
    ) -> bool {
        match self.pointers.BeginListBox {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginListBox)
            ),
            Some(f) => f(ctx, label, size_wInOptional, size_hInOptional),
        }
    }
    pub unsafe fn EndListBox(&self, ctx: Context) -> () {
        match self.pointers.EndListBox {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndListBox)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn ListBox(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        current_itemInOut: *mut std::ffi::c_int,
        items: *const std::ffi::c_char,
        items_sz: std::ffi::c_int,
        height_in_itemsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.ListBox {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ListBox)
            ),
            Some(f) => f(
                ctx,
                label,
                current_itemInOut,
                items,
                items_sz,
                height_in_itemsInOptional,
            ),
        }
    }
    pub unsafe fn Selectable(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        p_selectedInOut: *mut bool,
        flagsInOptional: *mut std::ffi::c_int,
        size_wInOptional: *mut f64,
        size_hInOptional: *mut f64,
    ) -> bool {
        match self.pointers.Selectable {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Selectable)
            ),
            Some(f) => f(
                ctx,
                label,
                p_selectedInOut,
                flagsInOptional,
                size_wInOptional,
                size_hInOptional,
            ),
        }
    }
    pub unsafe fn Attach(&self, ctx: Context, obj: Resource) -> () {
        match self.pointers.Attach {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Attach)
            ),
            Some(f) => f(ctx, obj),
        }
    }
    pub unsafe fn CreateContext(
        &self,
        label: *const std::ffi::c_char,
        config_flagsInOptional: *mut std::ffi::c_int,
    ) -> Context {
        match self.pointers.CreateContext {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CreateContext)
            ),
            Some(f) => f(label, config_flagsInOptional),
        }
    }
    pub unsafe fn DestroyContext(&self, ctx: Context) -> () {
        match self.pointers.DestroyContext {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DestroyContext)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn Detach(&self, ctx: Context, obj: Resource) -> () {
        match self.pointers.Detach {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Detach)
            ),
            Some(f) => f(ctx, obj),
        }
    }
    pub unsafe fn GetDeltaTime(&self, ctx: Context) -> f64 {
        match self.pointers.GetDeltaTime {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetDeltaTime)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetFrameCount(&self, ctx: Context) -> std::ffi::c_int {
        match self.pointers.GetFrameCount {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetFrameCount)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetFramerate(&self, ctx: Context) -> f64 {
        match self.pointers.GetFramerate {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetFramerate)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetTime(&self, ctx: Context) -> f64 {
        match self.pointers.GetTime {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetTime)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetConfigVar(&self, ctx: Context, var_idx: std::ffi::c_int) -> f64 {
        match self.pointers.GetConfigVar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetConfigVar)
            ),
            Some(f) => f(ctx, var_idx),
        }
    }
    pub unsafe fn SetConfigVar(&self, ctx: Context, var_idx: std::ffi::c_int, value: f64) -> () {
        match self.pointers.SetConfigVar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetConfigVar)
            ),
            Some(f) => f(ctx, var_idx, value),
        }
    }
    pub unsafe fn AcceptDragDropPayload(
        &self,
        ctx: Context,
        type_: *const std::ffi::c_char,
        payloadOutNeedBig: *mut std::ffi::c_char,
        payloadOutNeedBig_sz: std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.AcceptDragDropPayload {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(AcceptDragDropPayload)
            ),
            Some(f) => f(
                ctx,
                type_,
                payloadOutNeedBig,
                payloadOutNeedBig_sz,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn AcceptDragDropPayloadFiles(
        &self,
        ctx: Context,
        countOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.AcceptDragDropPayloadFiles {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(AcceptDragDropPayloadFiles)
            ),
            Some(f) => f(ctx, countOut, flagsInOptional),
        }
    }
    pub unsafe fn AcceptDragDropPayloadRGB(
        &self,
        ctx: Context,
        rgbOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.AcceptDragDropPayloadRGB {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(AcceptDragDropPayloadRGB)
            ),
            Some(f) => f(ctx, rgbOut, flagsInOptional),
        }
    }
    pub unsafe fn AcceptDragDropPayloadRGBA(
        &self,
        ctx: Context,
        rgbaOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.AcceptDragDropPayloadRGBA {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(AcceptDragDropPayloadRGBA)
            ),
            Some(f) => f(ctx, rgbaOut, flagsInOptional),
        }
    }
    pub unsafe fn BeginDragDropSource(
        &self,
        ctx: Context,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginDragDropSource {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginDragDropSource)
            ),
            Some(f) => f(ctx, flagsInOptional),
        }
    }
    pub unsafe fn BeginDragDropTarget(&self, ctx: Context) -> bool {
        match self.pointers.BeginDragDropTarget {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginDragDropTarget)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn EndDragDropSource(&self, ctx: Context) -> () {
        match self.pointers.EndDragDropSource {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndDragDropSource)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn EndDragDropTarget(&self, ctx: Context) -> () {
        match self.pointers.EndDragDropTarget {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndDragDropTarget)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetDragDropPayload(
        &self,
        ctx: Context,
        typeOut_: *mut std::ffi::c_char,
        typeOut_sz_: std::ffi::c_int,
        payloadOutNeedBig: *mut std::ffi::c_char,
        payloadOutNeedBig_sz: std::ffi::c_int,
        is_previewOut: *mut bool,
        is_deliveryOut: *mut bool,
    ) -> bool {
        match self.pointers.GetDragDropPayload {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetDragDropPayload)
            ),
            Some(f) => f(
                ctx,
                typeOut_,
                typeOut_sz_,
                payloadOutNeedBig,
                payloadOutNeedBig_sz,
                is_previewOut,
                is_deliveryOut,
            ),
        }
    }
    pub unsafe fn GetDragDropPayloadFile(
        &self,
        ctx: Context,
        index: std::ffi::c_int,
        filenameOut: *mut std::ffi::c_char,
        filenameOut_sz: std::ffi::c_int,
    ) -> bool {
        match self.pointers.GetDragDropPayloadFile {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetDragDropPayloadFile)
            ),
            Some(f) => f(ctx, index, filenameOut, filenameOut_sz),
        }
    }
    pub unsafe fn SetDragDropPayload(
        &self,
        ctx: Context,
        type_: *const std::ffi::c_char,
        data: *const std::ffi::c_char,
        condInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SetDragDropPayload {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetDragDropPayload)
            ),
            Some(f) => f(ctx, type_, data, condInOptional),
        }
    }
    pub unsafe fn DragDouble(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        vInOut: *mut f64,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut f64,
        v_maxInOptional: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragDouble {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragDouble)
            ),
            Some(f) => f(
                ctx,
                label,
                vInOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragDouble2(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut f64,
        v_maxInOptional: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragDouble2 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragDouble2)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragDouble3(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        v3InOut: *mut f64,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut f64,
        v_maxInOptional: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragDouble3 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragDouble3)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragDouble4(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        v3InOut: *mut f64,
        v4InOut: *mut f64,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut f64,
        v_maxInOptional: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragDouble4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragDouble4)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v4InOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragFloatRange2(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v_current_minInOut: *mut f64,
        v_current_maxInOut: *mut f64,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut f64,
        v_maxInOptional: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        format_maxInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragFloatRange2 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragFloatRange2)
            ),
            Some(f) => f(
                ctx,
                label,
                v_current_minInOut,
                v_current_maxInOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                format_maxInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragInt(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        vInOut: *mut std::ffi::c_int,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut std::ffi::c_int,
        v_maxInOptional: *mut std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragInt {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragInt)
            ),
            Some(f) => f(
                ctx,
                label,
                vInOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragInt2(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut std::ffi::c_int,
        v_maxInOptional: *mut std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragInt2 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragInt2)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragInt3(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        v3InOut: *mut std::ffi::c_int,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut std::ffi::c_int,
        v_maxInOptional: *mut std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragInt3 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragInt3)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragInt4(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        v3InOut: *mut std::ffi::c_int,
        v4InOut: *mut std::ffi::c_int,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut std::ffi::c_int,
        v_maxInOptional: *mut std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragInt4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragInt4)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v4InOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DragIntRange2(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v_current_minInOut: *mut std::ffi::c_int,
        v_current_maxInOut: *mut std::ffi::c_int,
        v_speedInOptional: *mut f64,
        v_minInOptional: *mut std::ffi::c_int,
        v_maxInOptional: *mut std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        format_maxInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.DragIntRange2 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DragIntRange2)
            ),
            Some(f) => f(
                ctx,
                label,
                v_current_minInOut,
                v_current_maxInOut,
                v_speedInOptional,
                v_minInOptional,
                v_maxInOptional,
                formatInOptional,
                format_maxInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderAngle(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v_radInOut: *mut f64,
        v_degrees_minInOptional: *mut f64,
        v_degrees_maxInOptional: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderAngle {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderAngle)
            ),
            Some(f) => f(
                ctx,
                label,
                v_radInOut,
                v_degrees_minInOptional,
                v_degrees_maxInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderDouble(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        vInOut: *mut f64,
        v_min: f64,
        v_max: f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderDouble {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderDouble)
            ),
            Some(f) => f(
                ctx,
                label,
                vInOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderDouble2(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        v_min: f64,
        v_max: f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderDouble2 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderDouble2)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderDouble3(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        v3InOut: *mut f64,
        v_min: f64,
        v_max: f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderDouble3 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderDouble3)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderDouble4(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        v3InOut: *mut f64,
        v4InOut: *mut f64,
        v_min: f64,
        v_max: f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderDouble4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderDouble4)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v4InOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderInt(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        vInOut: *mut std::ffi::c_int,
        v_min: std::ffi::c_int,
        v_max: std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderInt {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderInt)
            ),
            Some(f) => f(
                ctx,
                label,
                vInOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderInt2(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        v_min: std::ffi::c_int,
        v_max: std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderInt2 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderInt2)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderInt3(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        v3InOut: *mut std::ffi::c_int,
        v_min: std::ffi::c_int,
        v_max: std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderInt3 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderInt3)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn SliderInt4(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        v3InOut: *mut std::ffi::c_int,
        v4InOut: *mut std::ffi::c_int,
        v_min: std::ffi::c_int,
        v_max: std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.SliderInt4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SliderInt4)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v4InOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn VSliderDouble(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        size_w: f64,
        size_h: f64,
        vInOut: *mut f64,
        v_min: f64,
        v_max: f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.VSliderDouble {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(VSliderDouble)
            ),
            Some(f) => f(
                ctx,
                label,
                size_w,
                size_h,
                vInOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn VSliderInt(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        size_w: f64,
        size_h: f64,
        vInOut: *mut std::ffi::c_int,
        v_min: std::ffi::c_int,
        v_max: std::ffi::c_int,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.VSliderInt {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(VSliderInt)
            ),
            Some(f) => f(
                ctx,
                label,
                size_w,
                size_h,
                vInOut,
                v_min,
                v_max,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_PopClipRect(&self, draw_list: DrawList) -> () {
        match self.pointers.DrawList_PopClipRect {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PopClipRect)
            ),
            Some(f) => f(draw_list),
        }
    }
    pub unsafe fn DrawList_PushClipRect(
        &self,
        draw_list: DrawList,
        clip_rect_min_x: f64,
        clip_rect_min_y: f64,
        clip_rect_max_x: f64,
        clip_rect_max_y: f64,
        intersect_with_current_clip_rectInOptional: *mut bool,
    ) -> () {
        match self.pointers.DrawList_PushClipRect {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PushClipRect)
            ),
            Some(f) => f(
                draw_list,
                clip_rect_min_x,
                clip_rect_min_y,
                clip_rect_max_x,
                clip_rect_max_y,
                intersect_with_current_clip_rectInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_PushClipRectFullScreen(&self, draw_list: DrawList) -> () {
        match self.pointers.DrawList_PushClipRectFullScreen {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PushClipRectFullScreen)
            ),
            Some(f) => f(draw_list),
        }
    }
    pub unsafe fn GetBackgroundDrawList(&self, ctx: Context) -> DrawList {
        match self.pointers.GetBackgroundDrawList {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetBackgroundDrawList)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetForegroundDrawList(&self, ctx: Context) -> DrawList {
        match self.pointers.GetForegroundDrawList {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetForegroundDrawList)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetWindowDrawList(&self, ctx: Context) -> DrawList {
        match self.pointers.GetWindowDrawList {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowDrawList)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn DrawList_AddBezierCubic(
        &self,
        draw_list: DrawList,
        p1_x: f64,
        p1_y: f64,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        p4_x: f64,
        p4_y: f64,
        col_rgba: std::ffi::c_int,
        thickness: f64,
        num_segmentsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddBezierCubic {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddBezierCubic)
            ),
            Some(f) => f(
                draw_list,
                p1_x,
                p1_y,
                p2_x,
                p2_y,
                p3_x,
                p3_y,
                p4_x,
                p4_y,
                col_rgba,
                thickness,
                num_segmentsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddBezierQuadratic(
        &self,
        draw_list: DrawList,
        p1_x: f64,
        p1_y: f64,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        col_rgba: std::ffi::c_int,
        thickness: f64,
        num_segmentsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddBezierQuadratic {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddBezierQuadratic)
            ),
            Some(f) => f(
                draw_list,
                p1_x,
                p1_y,
                p2_x,
                p2_y,
                p3_x,
                p3_y,
                col_rgba,
                thickness,
                num_segmentsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddCircle(
        &self,
        draw_list: DrawList,
        center_x: f64,
        center_y: f64,
        radius: f64,
        col_rgba: std::ffi::c_int,
        num_segmentsInOptional: *mut std::ffi::c_int,
        thicknessInOptional: *mut f64,
    ) -> () {
        match self.pointers.DrawList_AddCircle {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddCircle)
            ),
            Some(f) => f(
                draw_list,
                center_x,
                center_y,
                radius,
                col_rgba,
                num_segmentsInOptional,
                thicknessInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddCircleFilled(
        &self,
        draw_list: DrawList,
        center_x: f64,
        center_y: f64,
        radius: f64,
        col_rgba: std::ffi::c_int,
        num_segmentsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddCircleFilled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddCircleFilled)
            ),
            Some(f) => f(
                draw_list,
                center_x,
                center_y,
                radius,
                col_rgba,
                num_segmentsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddImage(
        &self,
        draw_list: DrawList,
        img: Image,
        p_min_x: f64,
        p_min_y: f64,
        p_max_x: f64,
        p_max_y: f64,
        uv_min_xInOptional: *mut f64,
        uv_min_yInOptional: *mut f64,
        uv_max_xInOptional: *mut f64,
        uv_max_yInOptional: *mut f64,
        col_rgbaInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddImage {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddImage)
            ),
            Some(f) => f(
                draw_list,
                img,
                p_min_x,
                p_min_y,
                p_max_x,
                p_max_y,
                uv_min_xInOptional,
                uv_min_yInOptional,
                uv_max_xInOptional,
                uv_max_yInOptional,
                col_rgbaInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddImageQuad(
        &self,
        draw_list: DrawList,
        img: Image,
        p1_x: f64,
        p1_y: f64,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        p4_x: f64,
        p4_y: f64,
        uv1_xInOptional: *mut f64,
        uv1_yInOptional: *mut f64,
        uv2_xInOptional: *mut f64,
        uv2_yInOptional: *mut f64,
        uv3_xInOptional: *mut f64,
        uv3_yInOptional: *mut f64,
        uv4_xInOptional: *mut f64,
        uv4_yInOptional: *mut f64,
        col_rgbaInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddImageQuad {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddImageQuad)
            ),
            Some(f) => f(
                draw_list,
                img,
                p1_x,
                p1_y,
                p2_x,
                p2_y,
                p3_x,
                p3_y,
                p4_x,
                p4_y,
                uv1_xInOptional,
                uv1_yInOptional,
                uv2_xInOptional,
                uv2_yInOptional,
                uv3_xInOptional,
                uv3_yInOptional,
                uv4_xInOptional,
                uv4_yInOptional,
                col_rgbaInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddImageRounded(
        &self,
        draw_list: DrawList,
        img: Image,
        p_min_x: f64,
        p_min_y: f64,
        p_max_x: f64,
        p_max_y: f64,
        uv_min_x: f64,
        uv_min_y: f64,
        uv_max_x: f64,
        uv_max_y: f64,
        col_rgba: std::ffi::c_int,
        rounding: f64,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddImageRounded {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddImageRounded)
            ),
            Some(f) => f(
                draw_list,
                img,
                p_min_x,
                p_min_y,
                p_max_x,
                p_max_y,
                uv_min_x,
                uv_min_y,
                uv_max_x,
                uv_max_y,
                col_rgba,
                rounding,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddLine(
        &self,
        draw_list: DrawList,
        p1_x: f64,
        p1_y: f64,
        p2_x: f64,
        p2_y: f64,
        col_rgba: std::ffi::c_int,
        thicknessInOptional: *mut f64,
    ) -> () {
        match self.pointers.DrawList_AddLine {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddLine)
            ),
            Some(f) => f(
                draw_list,
                p1_x,
                p1_y,
                p2_x,
                p2_y,
                col_rgba,
                thicknessInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddNgon(
        &self,
        draw_list: DrawList,
        center_x: f64,
        center_y: f64,
        radius: f64,
        col_rgba: std::ffi::c_int,
        num_segments: std::ffi::c_int,
        thicknessInOptional: *mut f64,
    ) -> () {
        match self.pointers.DrawList_AddNgon {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddNgon)
            ),
            Some(f) => f(
                draw_list,
                center_x,
                center_y,
                radius,
                col_rgba,
                num_segments,
                thicknessInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddNgonFilled(
        &self,
        draw_list: DrawList,
        center_x: f64,
        center_y: f64,
        radius: f64,
        col_rgba: std::ffi::c_int,
        num_segments: std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddNgonFilled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddNgonFilled)
            ),
            Some(f) => f(
                draw_list,
                center_x,
                center_y,
                radius,
                col_rgba,
                num_segments,
            ),
        }
    }
    pub unsafe fn DrawList_AddQuad(
        &self,
        draw_list: DrawList,
        p1_x: f64,
        p1_y: f64,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        p4_x: f64,
        p4_y: f64,
        col_rgba: std::ffi::c_int,
        thicknessInOptional: *mut f64,
    ) -> () {
        match self.pointers.DrawList_AddQuad {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddQuad)
            ),
            Some(f) => f(
                draw_list,
                p1_x,
                p1_y,
                p2_x,
                p2_y,
                p3_x,
                p3_y,
                p4_x,
                p4_y,
                col_rgba,
                thicknessInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddQuadFilled(
        &self,
        draw_list: DrawList,
        p1_x: f64,
        p1_y: f64,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        p4_x: f64,
        p4_y: f64,
        col_rgba: std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddQuadFilled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddQuadFilled)
            ),
            Some(f) => f(
                draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, col_rgba,
            ),
        }
    }
    pub unsafe fn DrawList_AddRect(
        &self,
        draw_list: DrawList,
        p_min_x: f64,
        p_min_y: f64,
        p_max_x: f64,
        p_max_y: f64,
        col_rgba: std::ffi::c_int,
        roundingInOptional: *mut f64,
        flagsInOptional: *mut std::ffi::c_int,
        thicknessInOptional: *mut f64,
    ) -> () {
        match self.pointers.DrawList_AddRect {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddRect)
            ),
            Some(f) => f(
                draw_list,
                p_min_x,
                p_min_y,
                p_max_x,
                p_max_y,
                col_rgba,
                roundingInOptional,
                flagsInOptional,
                thicknessInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddRectFilled(
        &self,
        draw_list: DrawList,
        p_min_x: f64,
        p_min_y: f64,
        p_max_x: f64,
        p_max_y: f64,
        col_rgba: std::ffi::c_int,
        roundingInOptional: *mut f64,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddRectFilled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddRectFilled)
            ),
            Some(f) => f(
                draw_list,
                p_min_x,
                p_min_y,
                p_max_x,
                p_max_y,
                col_rgba,
                roundingInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddRectFilledMultiColor(
        &self,
        draw_list: DrawList,
        p_min_x: f64,
        p_min_y: f64,
        p_max_x: f64,
        p_max_y: f64,
        col_upr_left: std::ffi::c_int,
        col_upr_right: std::ffi::c_int,
        col_bot_right: std::ffi::c_int,
        col_bot_left: std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddRectFilledMultiColor {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddRectFilledMultiColor)
            ),
            Some(f) => f(
                draw_list,
                p_min_x,
                p_min_y,
                p_max_x,
                p_max_y,
                col_upr_left,
                col_upr_right,
                col_bot_right,
                col_bot_left,
            ),
        }
    }
    pub unsafe fn DrawList_AddText(
        &self,
        draw_list: DrawList,
        x: f64,
        y: f64,
        col_rgba: std::ffi::c_int,
        text: *const std::ffi::c_char,
    ) -> () {
        match self.pointers.DrawList_AddText {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddText)
            ),
            Some(f) => f(draw_list, x, y, col_rgba, text),
        }
    }
    pub unsafe fn DrawList_AddTextEx(
        &self,
        draw_list: DrawList,
        font: Font,
        font_size: f64,
        pos_x: f64,
        pos_y: f64,
        col_rgba: std::ffi::c_int,
        text: *const std::ffi::c_char,
        wrap_widthInOptional: *mut f64,
        cpu_fine_clip_rect_xInOptional: *mut f64,
        cpu_fine_clip_rect_yInOptional: *mut f64,
        cpu_fine_clip_rect_wInOptional: *mut f64,
        cpu_fine_clip_rect_hInOptional: *mut f64,
    ) -> () {
        match self.pointers.DrawList_AddTextEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddTextEx)
            ),
            Some(f) => f(
                draw_list,
                font,
                font_size,
                pos_x,
                pos_y,
                col_rgba,
                text,
                wrap_widthInOptional,
                cpu_fine_clip_rect_xInOptional,
                cpu_fine_clip_rect_yInOptional,
                cpu_fine_clip_rect_wInOptional,
                cpu_fine_clip_rect_hInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddTriangle(
        &self,
        draw_list: DrawList,
        p1_x: f64,
        p1_y: f64,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        col_rgba: std::ffi::c_int,
        thicknessInOptional: *mut f64,
    ) -> () {
        match self.pointers.DrawList_AddTriangle {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddTriangle)
            ),
            Some(f) => f(
                draw_list,
                p1_x,
                p1_y,
                p2_x,
                p2_y,
                p3_x,
                p3_y,
                col_rgba,
                thicknessInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_AddTriangleFilled(
        &self,
        draw_list: DrawList,
        p1_x: f64,
        p1_y: f64,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        col_rgba: std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_AddTriangleFilled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_AddTriangleFilled)
            ),
            Some(f) => f(draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, col_rgba),
        }
    }
    pub unsafe fn CreateDrawListSplitter(&self, draw_list: DrawList) -> DrawListSplitter {
        match self.pointers.CreateDrawListSplitter {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CreateDrawListSplitter)
            ),
            Some(f) => f(draw_list),
        }
    }
    pub unsafe fn DrawListSplitter_Clear(&self, splitter: DrawListSplitter) -> () {
        match self.pointers.DrawListSplitter_Clear {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawListSplitter_Clear)
            ),
            Some(f) => f(splitter),
        }
    }
    pub unsafe fn DrawListSplitter_Merge(&self, splitter: DrawListSplitter) -> () {
        match self.pointers.DrawListSplitter_Merge {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawListSplitter_Merge)
            ),
            Some(f) => f(splitter),
        }
    }
    pub unsafe fn DrawListSplitter_SetCurrentChannel(
        &self,
        splitter: DrawListSplitter,
        channel_idx: std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawListSplitter_SetCurrentChannel {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawListSplitter_SetCurrentChannel)
            ),
            Some(f) => f(splitter, channel_idx),
        }
    }
    pub unsafe fn DrawListSplitter_Split(
        &self,
        splitter: DrawListSplitter,
        count: std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawListSplitter_Split {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawListSplitter_Split)
            ),
            Some(f) => f(splitter, count),
        }
    }
    pub unsafe fn DrawList_PathArcTo(
        &self,
        draw_list: DrawList,
        center_x: f64,
        center_y: f64,
        radius: f64,
        a_min: f64,
        a_max: f64,
        num_segmentsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_PathArcTo {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathArcTo)
            ),
            Some(f) => f(
                draw_list,
                center_x,
                center_y,
                radius,
                a_min,
                a_max,
                num_segmentsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_PathArcToFast(
        &self,
        draw_list: DrawList,
        center_x: f64,
        center_y: f64,
        radius: f64,
        a_min_of_12: std::ffi::c_int,
        a_max_of_12: std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_PathArcToFast {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathArcToFast)
            ),
            Some(f) => f(
                draw_list,
                center_x,
                center_y,
                radius,
                a_min_of_12,
                a_max_of_12,
            ),
        }
    }
    pub unsafe fn DrawList_PathBezierCubicCurveTo(
        &self,
        draw_list: DrawList,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        p4_x: f64,
        p4_y: f64,
        num_segmentsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_PathBezierCubicCurveTo {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathBezierCubicCurveTo)
            ),
            Some(f) => f(
                draw_list,
                p2_x,
                p2_y,
                p3_x,
                p3_y,
                p4_x,
                p4_y,
                num_segmentsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_PathBezierQuadraticCurveTo(
        &self,
        draw_list: DrawList,
        p2_x: f64,
        p2_y: f64,
        p3_x: f64,
        p3_y: f64,
        num_segmentsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_PathBezierQuadraticCurveTo {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathBezierQuadraticCurveTo)
            ),
            Some(f) => f(draw_list, p2_x, p2_y, p3_x, p3_y, num_segmentsInOptional),
        }
    }
    pub unsafe fn DrawList_PathClear(&self, draw_list: DrawList) -> () {
        match self.pointers.DrawList_PathClear {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathClear)
            ),
            Some(f) => f(draw_list),
        }
    }
    pub unsafe fn DrawList_PathFillConvex(
        &self,
        draw_list: DrawList,
        col_rgba: std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_PathFillConvex {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathFillConvex)
            ),
            Some(f) => f(draw_list, col_rgba),
        }
    }
    pub unsafe fn DrawList_PathLineTo(&self, draw_list: DrawList, pos_x: f64, pos_y: f64) -> () {
        match self.pointers.DrawList_PathLineTo {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathLineTo)
            ),
            Some(f) => f(draw_list, pos_x, pos_y),
        }
    }
    pub unsafe fn DrawList_PathRect(
        &self,
        draw_list: DrawList,
        rect_min_x: f64,
        rect_min_y: f64,
        rect_max_x: f64,
        rect_max_y: f64,
        roundingInOptional: *mut f64,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.DrawList_PathRect {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathRect)
            ),
            Some(f) => f(
                draw_list,
                rect_min_x,
                rect_min_y,
                rect_max_x,
                rect_max_y,
                roundingInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn DrawList_PathStroke(
        &self,
        draw_list: DrawList,
        col_rgba: std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
        thicknessInOptional: *mut f64,
    ) -> () {
        match self.pointers.DrawList_PathStroke {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DrawList_PathStroke)
            ),
            Some(f) => f(draw_list, col_rgba, flagsInOptional, thicknessInOptional),
        }
    }
    pub unsafe fn CreateFont(
        &self,
        family_or_file: *const std::ffi::c_char,
        size: std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> Font {
        match self.pointers.CreateFont {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CreateFont)
            ),
            Some(f) => f(family_or_file, size, flagsInOptional),
        }
    }
    pub unsafe fn GetFont(&self, ctx: Context) -> Font {
        match self.pointers.GetFont {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetFont)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetFontSize(&self, ctx: Context) -> f64 {
        match self.pointers.GetFontSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetFontSize)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn PopFont(&self, ctx: Context) -> () {
        match self.pointers.PopFont {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopFont)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn PushFont(&self, ctx: Context, font: Font) -> () {
        match self.pointers.PushFont {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushFont)
            ),
            Some(f) => f(ctx, font),
        }
    }
    pub unsafe fn CreateImage(
        &self,
        file: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> Image {
        match self.pointers.CreateImage {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CreateImage)
            ),
            Some(f) => f(file, flagsInOptional),
        }
    }
    pub unsafe fn CreateImageFromMem(
        &self,
        data: *const std::ffi::c_char,
        data_sz: std::ffi::c_int,
    ) -> Image {
        match self.pointers.CreateImageFromMem {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CreateImageFromMem)
            ),
            Some(f) => f(data, data_sz),
        }
    }
    pub unsafe fn Image(
        &self,
        ctx: Context,
        img: Image,
        size_w: f64,
        size_h: f64,
        uv0_xInOptional: *mut f64,
        uv0_yInOptional: *mut f64,
        uv1_xInOptional: *mut f64,
        uv1_yInOptional: *mut f64,
        tint_col_rgbaInOptional: *mut std::ffi::c_int,
        border_col_rgbaInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.Image {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Image)
            ),
            Some(f) => f(
                ctx,
                img,
                size_w,
                size_h,
                uv0_xInOptional,
                uv0_yInOptional,
                uv1_xInOptional,
                uv1_yInOptional,
                tint_col_rgbaInOptional,
                border_col_rgbaInOptional,
            ),
        }
    }
    pub unsafe fn ImageButton(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        img: Image,
        size_w: f64,
        size_h: f64,
        uv0_xInOptional: *mut f64,
        uv0_yInOptional: *mut f64,
        uv1_xInOptional: *mut f64,
        uv1_yInOptional: *mut f64,
        bg_col_rgbaInOptional: *mut std::ffi::c_int,
        tint_col_rgbaInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.ImageButton {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ImageButton)
            ),
            Some(f) => f(
                ctx,
                str_id,
                img,
                size_w,
                size_h,
                uv0_xInOptional,
                uv0_yInOptional,
                uv1_xInOptional,
                uv1_yInOptional,
                bg_col_rgbaInOptional,
                tint_col_rgbaInOptional,
            ),
        }
    }
    pub unsafe fn Image_GetSize(&self, img: Image, wOut: *mut f64, hOut: *mut f64) -> () {
        match self.pointers.Image_GetSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Image_GetSize)
            ),
            Some(f) => f(img, wOut, hOut),
        }
    }
    pub unsafe fn ImageSet_Add(&self, set: ImageSet, scale: f64, img: Image) -> () {
        match self.pointers.ImageSet_Add {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ImageSet_Add)
            ),
            Some(f) => f(set, scale, img),
        }
    }
    pub unsafe fn BeginDisabled(&self, ctx: Context, disabledInOptional: *mut bool) -> () {
        match self.pointers.BeginDisabled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginDisabled)
            ),
            Some(f) => f(ctx, disabledInOptional),
        }
    }
    pub unsafe fn EndDisabled(&self, ctx: Context) -> () {
        match self.pointers.EndDisabled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndDisabled)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetItemAllowOverlap(&self, ctx: Context) -> () {
        match self.pointers.SetItemAllowOverlap {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetItemAllowOverlap)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn CalcItemWidth(&self, ctx: Context) -> f64 {
        match self.pointers.CalcItemWidth {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CalcItemWidth)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetItemRectMax(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetItemRectMax {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetItemRectMax)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetItemRectMin(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetItemRectMin {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetItemRectMin)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetItemRectSize(&self, ctx: Context, wOut: *mut f64, hOut: *mut f64) -> () {
        match self.pointers.GetItemRectSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetItemRectSize)
            ),
            Some(f) => f(ctx, wOut, hOut),
        }
    }
    pub unsafe fn PopItemWidth(&self, ctx: Context) -> () {
        match self.pointers.PopItemWidth {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopItemWidth)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn PushItemWidth(&self, ctx: Context, item_width: f64) -> () {
        match self.pointers.PushItemWidth {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushItemWidth)
            ),
            Some(f) => f(ctx, item_width),
        }
    }
    pub unsafe fn SetNextItemWidth(&self, ctx: Context, item_width: f64) -> () {
        match self.pointers.SetNextItemWidth {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextItemWidth)
            ),
            Some(f) => f(ctx, item_width),
        }
    }
    pub unsafe fn PopAllowKeyboardFocus(&self, ctx: Context) -> () {
        match self.pointers.PopAllowKeyboardFocus {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopAllowKeyboardFocus)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn PushAllowKeyboardFocus(&self, ctx: Context, allow_keyboard_focus: bool) -> () {
        match self.pointers.PushAllowKeyboardFocus {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushAllowKeyboardFocus)
            ),
            Some(f) => f(ctx, allow_keyboard_focus),
        }
    }
    pub unsafe fn SetItemDefaultFocus(&self, ctx: Context) -> () {
        match self.pointers.SetItemDefaultFocus {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetItemDefaultFocus)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetKeyboardFocusHere(
        &self,
        ctx: Context,
        offsetInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetKeyboardFocusHere {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetKeyboardFocusHere)
            ),
            Some(f) => f(ctx, offsetInOptional),
        }
    }
    pub unsafe fn IsAnyItemActive(&self, ctx: Context) -> bool {
        match self.pointers.IsAnyItemActive {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsAnyItemActive)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsAnyItemFocused(&self, ctx: Context) -> bool {
        match self.pointers.IsAnyItemFocused {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsAnyItemFocused)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsAnyItemHovered(&self, ctx: Context) -> bool {
        match self.pointers.IsAnyItemHovered {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsAnyItemHovered)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsItemActivated(&self, ctx: Context) -> bool {
        match self.pointers.IsItemActivated {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemActivated)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsItemActive(&self, ctx: Context) -> bool {
        match self.pointers.IsItemActive {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemActive)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsItemClicked(
        &self,
        ctx: Context,
        mouse_buttonInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.IsItemClicked {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemClicked)
            ),
            Some(f) => f(ctx, mouse_buttonInOptional),
        }
    }
    pub unsafe fn IsItemDeactivated(&self, ctx: Context) -> bool {
        match self.pointers.IsItemDeactivated {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemDeactivated)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsItemDeactivatedAfterEdit(&self, ctx: Context) -> bool {
        match self.pointers.IsItemDeactivatedAfterEdit {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemDeactivatedAfterEdit)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsItemEdited(&self, ctx: Context) -> bool {
        match self.pointers.IsItemEdited {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemEdited)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsItemFocused(&self, ctx: Context) -> bool {
        match self.pointers.IsItemFocused {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemFocused)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsItemHovered(
        &self,
        ctx: Context,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.IsItemHovered {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemHovered)
            ),
            Some(f) => f(ctx, flagsInOptional),
        }
    }
    pub unsafe fn IsItemVisible(&self, ctx: Context) -> bool {
        match self.pointers.IsItemVisible {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemVisible)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetInputQueueCharacter(
        &self,
        ctx: Context,
        idx: std::ffi::c_int,
        unicode_charOut: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.GetInputQueueCharacter {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetInputQueueCharacter)
            ),
            Some(f) => f(ctx, idx, unicode_charOut),
        }
    }
    pub unsafe fn GetKeyDownDuration(&self, ctx: Context, key: std::ffi::c_int) -> f64 {
        match self.pointers.GetKeyDownDuration {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetKeyDownDuration)
            ),
            Some(f) => f(ctx, key),
        }
    }
    pub unsafe fn GetKeyMods(&self, ctx: Context) -> std::ffi::c_int {
        match self.pointers.GetKeyMods {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetKeyMods)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetKeyPressedAmount(
        &self,
        ctx: Context,
        key: std::ffi::c_int,
        repeat_delay: f64,
        rate: f64,
    ) -> std::ffi::c_int {
        match self.pointers.GetKeyPressedAmount {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetKeyPressedAmount)
            ),
            Some(f) => f(ctx, key, repeat_delay, rate),
        }
    }
    pub unsafe fn IsKeyDown(&self, ctx: Context, key: std::ffi::c_int) -> bool {
        match self.pointers.IsKeyDown {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsKeyDown)
            ),
            Some(f) => f(ctx, key),
        }
    }
    pub unsafe fn IsKeyPressed(
        &self,
        ctx: Context,
        key: std::ffi::c_int,
        repeatInOptional: *mut bool,
    ) -> bool {
        match self.pointers.IsKeyPressed {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsKeyPressed)
            ),
            Some(f) => f(ctx, key, repeatInOptional),
        }
    }
    pub unsafe fn IsKeyReleased(&self, ctx: Context, key: std::ffi::c_int) -> bool {
        match self.pointers.IsKeyReleased {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsKeyReleased)
            ),
            Some(f) => f(ctx, key),
        }
    }
    pub unsafe fn SetNextFrameWantCaptureKeyboard(
        &self,
        ctx: Context,
        want_capture_keyboard: bool,
    ) -> () {
        match self.pointers.SetNextFrameWantCaptureKeyboard {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextFrameWantCaptureKeyboard)
            ),
            Some(f) => f(ctx, want_capture_keyboard),
        }
    }
    pub unsafe fn GetMouseClickedCount(
        &self,
        ctx: Context,
        button: std::ffi::c_int,
    ) -> std::ffi::c_int {
        match self.pointers.GetMouseClickedCount {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMouseClickedCount)
            ),
            Some(f) => f(ctx, button),
        }
    }
    pub unsafe fn GetMouseClickedPos(
        &self,
        ctx: Context,
        button: std::ffi::c_int,
        xOut: *mut f64,
        yOut: *mut f64,
    ) -> () {
        match self.pointers.GetMouseClickedPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMouseClickedPos)
            ),
            Some(f) => f(ctx, button, xOut, yOut),
        }
    }
    pub unsafe fn GetMouseCursor(&self, ctx: Context) -> std::ffi::c_int {
        match self.pointers.GetMouseCursor {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMouseCursor)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetMouseDelta(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetMouseDelta {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMouseDelta)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetMouseDownDuration(&self, ctx: Context, button: std::ffi::c_int) -> f64 {
        match self.pointers.GetMouseDownDuration {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMouseDownDuration)
            ),
            Some(f) => f(ctx, button),
        }
    }
    pub unsafe fn GetMouseDragDelta(
        &self,
        ctx: Context,
        xOut: *mut f64,
        yOut: *mut f64,
        buttonInOptional: *mut std::ffi::c_int,
        lock_thresholdInOptional: *mut f64,
    ) -> () {
        match self.pointers.GetMouseDragDelta {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMouseDragDelta)
            ),
            Some(f) => f(ctx, xOut, yOut, buttonInOptional, lock_thresholdInOptional),
        }
    }
    pub unsafe fn GetMousePos(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetMousePos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMousePos)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetMousePosOnOpeningCurrentPopup(
        &self,
        ctx: Context,
        xOut: *mut f64,
        yOut: *mut f64,
    ) -> () {
        match self.pointers.GetMousePosOnOpeningCurrentPopup {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMousePosOnOpeningCurrentPopup)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetMouseWheel(
        &self,
        ctx: Context,
        verticalOut: *mut f64,
        horizontalOut: *mut f64,
    ) -> () {
        match self.pointers.GetMouseWheel {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMouseWheel)
            ),
            Some(f) => f(ctx, verticalOut, horizontalOut),
        }
    }
    pub unsafe fn IsAnyMouseDown(&self, ctx: Context) -> bool {
        match self.pointers.IsAnyMouseDown {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsAnyMouseDown)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsMouseClicked(
        &self,
        ctx: Context,
        button: std::ffi::c_int,
        repeatInOptional: *mut bool,
    ) -> bool {
        match self.pointers.IsMouseClicked {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsMouseClicked)
            ),
            Some(f) => f(ctx, button, repeatInOptional),
        }
    }
    pub unsafe fn IsMouseDoubleClicked(&self, ctx: Context, button: std::ffi::c_int) -> bool {
        match self.pointers.IsMouseDoubleClicked {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsMouseDoubleClicked)
            ),
            Some(f) => f(ctx, button),
        }
    }
    pub unsafe fn IsMouseDown(&self, ctx: Context, button: std::ffi::c_int) -> bool {
        match self.pointers.IsMouseDown {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsMouseDown)
            ),
            Some(f) => f(ctx, button),
        }
    }
    pub unsafe fn IsMouseDragging(
        &self,
        ctx: Context,
        button: std::ffi::c_int,
        lock_thresholdInOptional: *mut f64,
    ) -> bool {
        match self.pointers.IsMouseDragging {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsMouseDragging)
            ),
            Some(f) => f(ctx, button, lock_thresholdInOptional),
        }
    }
    pub unsafe fn IsMouseHoveringRect(
        &self,
        ctx: Context,
        r_min_x: f64,
        r_min_y: f64,
        r_max_x: f64,
        r_max_y: f64,
        clipInOptional: *mut bool,
    ) -> bool {
        match self.pointers.IsMouseHoveringRect {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsMouseHoveringRect)
            ),
            Some(f) => f(ctx, r_min_x, r_min_y, r_max_x, r_max_y, clipInOptional),
        }
    }
    pub unsafe fn IsMousePosValid(
        &self,
        ctx: Context,
        mouse_pos_xInOptional: *mut f64,
        mouse_pos_yInOptional: *mut f64,
    ) -> bool {
        match self.pointers.IsMousePosValid {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsMousePosValid)
            ),
            Some(f) => f(ctx, mouse_pos_xInOptional, mouse_pos_yInOptional),
        }
    }
    pub unsafe fn IsMouseReleased(&self, ctx: Context, button: std::ffi::c_int) -> bool {
        match self.pointers.IsMouseReleased {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsMouseReleased)
            ),
            Some(f) => f(ctx, button),
        }
    }
    pub unsafe fn ResetMouseDragDelta(
        &self,
        ctx: Context,
        buttonInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.ResetMouseDragDelta {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ResetMouseDragDelta)
            ),
            Some(f) => f(ctx, buttonInOptional),
        }
    }
    pub unsafe fn SetMouseCursor(&self, ctx: Context, cursor_type_: std::ffi::c_int) -> () {
        match self.pointers.SetMouseCursor {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetMouseCursor)
            ),
            Some(f) => f(ctx, cursor_type_),
        }
    }
    pub unsafe fn Separator(&self, ctx: Context) -> () {
        match self.pointers.Separator {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Separator)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsRectVisible(&self, ctx: Context, size_w: f64, size_h: f64) -> bool {
        match self.pointers.IsRectVisible {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsRectVisible)
            ),
            Some(f) => f(ctx, size_w, size_h),
        }
    }
    pub unsafe fn IsRectVisibleEx(
        &self,
        ctx: Context,
        rect_min_x: f64,
        rect_min_y: f64,
        rect_max_x: f64,
        rect_max_y: f64,
    ) -> bool {
        match self.pointers.IsRectVisibleEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsRectVisibleEx)
            ),
            Some(f) => f(ctx, rect_min_x, rect_min_y, rect_max_x, rect_max_y),
        }
    }
    pub unsafe fn PopClipRect(&self, ctx: Context) -> () {
        match self.pointers.PopClipRect {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopClipRect)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn PushClipRect(
        &self,
        ctx: Context,
        clip_rect_min_x: f64,
        clip_rect_min_y: f64,
        clip_rect_max_x: f64,
        clip_rect_max_y: f64,
        intersect_with_current_clip_rect: bool,
    ) -> () {
        match self.pointers.PushClipRect {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushClipRect)
            ),
            Some(f) => f(
                ctx,
                clip_rect_min_x,
                clip_rect_min_y,
                clip_rect_max_x,
                clip_rect_max_y,
                intersect_with_current_clip_rect,
            ),
        }
    }
    pub unsafe fn BeginGroup(&self, ctx: Context) -> () {
        match self.pointers.BeginGroup {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginGroup)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn Dummy(&self, ctx: Context, size_w: f64, size_h: f64) -> () {
        match self.pointers.Dummy {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Dummy)
            ),
            Some(f) => f(ctx, size_w, size_h),
        }
    }
    pub unsafe fn EndGroup(&self, ctx: Context) -> () {
        match self.pointers.EndGroup {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndGroup)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetCursorPos(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetCursorPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetCursorPos)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetCursorPosX(&self, ctx: Context) -> f64 {
        match self.pointers.GetCursorPosX {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetCursorPosX)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetCursorPosY(&self, ctx: Context) -> f64 {
        match self.pointers.GetCursorPosY {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetCursorPosY)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetCursorScreenPos(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetCursorScreenPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetCursorScreenPos)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetCursorStartPos(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetCursorStartPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetCursorStartPos)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn Indent(&self, ctx: Context, indent_wInOptional: *mut f64) -> () {
        match self.pointers.Indent {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Indent)
            ),
            Some(f) => f(ctx, indent_wInOptional),
        }
    }
    pub unsafe fn NewLine(&self, ctx: Context) -> () {
        match self.pointers.NewLine {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(NewLine)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SameLine(
        &self,
        ctx: Context,
        offset_from_start_xInOptional: *mut f64,
        spacingInOptional: *mut f64,
    ) -> () {
        match self.pointers.SameLine {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SameLine)
            ),
            Some(f) => f(ctx, offset_from_start_xInOptional, spacingInOptional),
        }
    }
    pub unsafe fn SetCursorPos(&self, ctx: Context, local_pos_x: f64, local_pos_y: f64) -> () {
        match self.pointers.SetCursorPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetCursorPos)
            ),
            Some(f) => f(ctx, local_pos_x, local_pos_y),
        }
    }
    pub unsafe fn SetCursorPosX(&self, ctx: Context, local_x: f64) -> () {
        match self.pointers.SetCursorPosX {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetCursorPosX)
            ),
            Some(f) => f(ctx, local_x),
        }
    }
    pub unsafe fn SetCursorPosY(&self, ctx: Context, local_y: f64) -> () {
        match self.pointers.SetCursorPosY {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetCursorPosY)
            ),
            Some(f) => f(ctx, local_y),
        }
    }
    pub unsafe fn SetCursorScreenPos(&self, ctx: Context, pos_x: f64, pos_y: f64) -> () {
        match self.pointers.SetCursorScreenPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetCursorScreenPos)
            ),
            Some(f) => f(ctx, pos_x, pos_y),
        }
    }
    pub unsafe fn Spacing(&self, ctx: Context) -> () {
        match self.pointers.Spacing {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Spacing)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn Unindent(&self, ctx: Context, indent_wInOptional: *mut f64) -> () {
        match self.pointers.Unindent {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Unindent)
            ),
            Some(f) => f(ctx, indent_wInOptional),
        }
    }
    pub unsafe fn CreateListClipper(&self, ctx: Context) -> ListClipper {
        match self.pointers.CreateListClipper {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CreateListClipper)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn ListClipper_Begin(
        &self,
        clipper: ListClipper,
        items_count: std::ffi::c_int,
        items_heightInOptional: *mut f64,
    ) -> () {
        match self.pointers.ListClipper_Begin {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ListClipper_Begin)
            ),
            Some(f) => f(clipper, items_count, items_heightInOptional),
        }
    }
    pub unsafe fn ListClipper_End(&self, clipper: ListClipper) -> () {
        match self.pointers.ListClipper_End {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ListClipper_End)
            ),
            Some(f) => f(clipper),
        }
    }
    pub unsafe fn ListClipper_ForceDisplayRangeByIndices(
        &self,
        clipper: ListClipper,
        item_min: std::ffi::c_int,
        item_max: std::ffi::c_int,
    ) -> () {
        match self.pointers.ListClipper_ForceDisplayRangeByIndices {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ListClipper_ForceDisplayRangeByIndices)
            ),
            Some(f) => f(clipper, item_min, item_max),
        }
    }
    pub unsafe fn ListClipper_GetDisplayRange(
        &self,
        clipper: ListClipper,
        display_startOut: *mut std::ffi::c_int,
        display_endOut: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.ListClipper_GetDisplayRange {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ListClipper_GetDisplayRange)
            ),
            Some(f) => f(clipper, display_startOut, display_endOut),
        }
    }
    pub unsafe fn ListClipper_Step(&self, clipper: ListClipper) -> bool {
        match self.pointers.ListClipper_Step {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ListClipper_Step)
            ),
            Some(f) => f(clipper),
        }
    }
    pub unsafe fn BeginMenu(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        enabledInOptional: *mut bool,
    ) -> bool {
        match self.pointers.BeginMenu {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginMenu)
            ),
            Some(f) => f(ctx, label, enabledInOptional),
        }
    }
    pub unsafe fn BeginMenuBar(&self, ctx: Context) -> bool {
        match self.pointers.BeginMenuBar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginMenuBar)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn EndMenu(&self, ctx: Context) -> () {
        match self.pointers.EndMenu {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndMenu)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn EndMenuBar(&self, ctx: Context) -> () {
        match self.pointers.EndMenuBar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndMenuBar)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn MenuItem(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        shortcutInOptional: *const std::ffi::c_char,
        p_selectedInOutOptional: *mut bool,
        enabledInOptional: *mut bool,
    ) -> bool {
        match self.pointers.MenuItem {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(MenuItem)
            ),
            Some(f) => f(
                ctx,
                label,
                shortcutInOptional,
                p_selectedInOutOptional,
                enabledInOptional,
            ),
        }
    }
    pub unsafe fn BeginPopup(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginPopup {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginPopup)
            ),
            Some(f) => f(ctx, str_id, flagsInOptional),
        }
    }
    pub unsafe fn BeginPopupModal(
        &self,
        ctx: Context,
        name: *const std::ffi::c_char,
        p_openInOutOptional: *mut bool,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginPopupModal {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginPopupModal)
            ),
            Some(f) => f(ctx, name, p_openInOutOptional, flagsInOptional),
        }
    }
    pub unsafe fn CloseCurrentPopup(&self, ctx: Context) -> () {
        match self.pointers.CloseCurrentPopup {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CloseCurrentPopup)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn EndPopup(&self, ctx: Context) -> () {
        match self.pointers.EndPopup {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndPopup)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsPopupOpen(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.IsPopupOpen {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsPopupOpen)
            ),
            Some(f) => f(ctx, str_id, flagsInOptional),
        }
    }
    pub unsafe fn OpenPopup(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        popup_flagsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.OpenPopup {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(OpenPopup)
            ),
            Some(f) => f(ctx, str_id, popup_flagsInOptional),
        }
    }
    pub unsafe fn OpenPopupOnItemClick(
        &self,
        ctx: Context,
        str_idInOptional: *const std::ffi::c_char,
        popup_flagsInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.OpenPopupOnItemClick {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(OpenPopupOnItemClick)
            ),
            Some(f) => f(ctx, str_idInOptional, popup_flagsInOptional),
        }
    }
    pub unsafe fn BeginPopupContextItem(
        &self,
        ctx: Context,
        str_idInOptional: *const std::ffi::c_char,
        popup_flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginPopupContextItem {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginPopupContextItem)
            ),
            Some(f) => f(ctx, str_idInOptional, popup_flagsInOptional),
        }
    }
    pub unsafe fn BeginPopupContextWindow(
        &self,
        ctx: Context,
        str_idInOptional: *const std::ffi::c_char,
        popup_flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginPopupContextWindow {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginPopupContextWindow)
            ),
            Some(f) => f(ctx, str_idInOptional, popup_flagsInOptional),
        }
    }
    pub unsafe fn BeginTooltip(&self, ctx: Context) -> () {
        match self.pointers.BeginTooltip {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginTooltip)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn EndTooltip(&self, ctx: Context) -> () {
        match self.pointers.EndTooltip {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndTooltip)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetTooltip(&self, ctx: Context, text: *const std::ffi::c_char) -> () {
        match self.pointers.SetTooltip {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetTooltip)
            ),
            Some(f) => f(ctx, text),
        }
    }
    pub unsafe fn GetColor(
        &self,
        ctx: Context,
        idx: std::ffi::c_int,
        alpha_mulInOptional: *mut f64,
    ) -> std::ffi::c_int {
        match self.pointers.GetColor {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetColor)
            ),
            Some(f) => f(ctx, idx, alpha_mulInOptional),
        }
    }
    pub unsafe fn GetColorEx(&self, ctx: Context, col_rgba: std::ffi::c_int) -> std::ffi::c_int {
        match self.pointers.GetColorEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetColorEx)
            ),
            Some(f) => f(ctx, col_rgba),
        }
    }
    pub unsafe fn GetStyleColor(&self, ctx: Context, idx: std::ffi::c_int) -> std::ffi::c_int {
        match self.pointers.GetStyleColor {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetStyleColor)
            ),
            Some(f) => f(ctx, idx),
        }
    }
    pub unsafe fn PopStyleColor(&self, ctx: Context, countInOptional: *mut std::ffi::c_int) -> () {
        match self.pointers.PopStyleColor {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopStyleColor)
            ),
            Some(f) => f(ctx, countInOptional),
        }
    }
    pub unsafe fn PushStyleColor(
        &self,
        ctx: Context,
        idx: std::ffi::c_int,
        col_rgba: std::ffi::c_int,
    ) -> () {
        match self.pointers.PushStyleColor {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushStyleColor)
            ),
            Some(f) => f(ctx, idx, col_rgba),
        }
    }
    pub unsafe fn GetStyleVar(
        &self,
        ctx: Context,
        var_idx: std::ffi::c_int,
        val1Out: *mut f64,
        val2Out: *mut f64,
    ) -> () {
        match self.pointers.GetStyleVar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetStyleVar)
            ),
            Some(f) => f(ctx, var_idx, val1Out, val2Out),
        }
    }
    pub unsafe fn PopStyleVar(&self, ctx: Context, countInOptional: *mut std::ffi::c_int) -> () {
        match self.pointers.PopStyleVar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopStyleVar)
            ),
            Some(f) => f(ctx, countInOptional),
        }
    }
    pub unsafe fn PushStyleVar(
        &self,
        ctx: Context,
        var_idx: std::ffi::c_int,
        val1: f64,
        val2InOptional: *mut f64,
    ) -> () {
        match self.pointers.PushStyleVar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushStyleVar)
            ),
            Some(f) => f(ctx, var_idx, val1, val2InOptional),
        }
    }
    pub unsafe fn BeginTabBar(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginTabBar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginTabBar)
            ),
            Some(f) => f(ctx, str_id, flagsInOptional),
        }
    }
    pub unsafe fn EndTabBar(&self, ctx: Context) -> () {
        match self.pointers.EndTabBar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndTabBar)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn BeginTabItem(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        p_openInOutOptional: *mut bool,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginTabItem {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginTabItem)
            ),
            Some(f) => f(ctx, label, p_openInOutOptional, flagsInOptional),
        }
    }
    pub unsafe fn EndTabItem(&self, ctx: Context) -> () {
        match self.pointers.EndTabItem {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndTabItem)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetTabItemClosed(
        &self,
        ctx: Context,
        tab_or_docked_window_label: *const std::ffi::c_char,
    ) -> () {
        match self.pointers.SetTabItemClosed {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetTabItemClosed)
            ),
            Some(f) => f(ctx, tab_or_docked_window_label),
        }
    }
    pub unsafe fn TabItemButton(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.TabItemButton {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TabItemButton)
            ),
            Some(f) => f(ctx, label, flagsInOptional),
        }
    }
    pub unsafe fn BeginTable(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        column: std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
        outer_size_wInOptional: *mut f64,
        outer_size_hInOptional: *mut f64,
        inner_widthInOptional: *mut f64,
    ) -> bool {
        match self.pointers.BeginTable {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginTable)
            ),
            Some(f) => f(
                ctx,
                str_id,
                column,
                flagsInOptional,
                outer_size_wInOptional,
                outer_size_hInOptional,
                inner_widthInOptional,
            ),
        }
    }
    pub unsafe fn EndTable(&self, ctx: Context) -> () {
        match self.pointers.EndTable {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndTable)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn TableGetColumnCount(&self, ctx: Context) -> std::ffi::c_int {
        match self.pointers.TableGetColumnCount {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableGetColumnCount)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn TableGetColumnIndex(&self, ctx: Context) -> std::ffi::c_int {
        match self.pointers.TableGetColumnIndex {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableGetColumnIndex)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn TableGetRowIndex(&self, ctx: Context) -> std::ffi::c_int {
        match self.pointers.TableGetRowIndex {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableGetRowIndex)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn TableNextColumn(&self, ctx: Context) -> bool {
        match self.pointers.TableNextColumn {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableNextColumn)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn TableNextRow(
        &self,
        ctx: Context,
        row_flagsInOptional: *mut std::ffi::c_int,
        min_row_heightInOptional: *mut f64,
    ) -> () {
        match self.pointers.TableNextRow {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableNextRow)
            ),
            Some(f) => f(ctx, row_flagsInOptional, min_row_heightInOptional),
        }
    }
    pub unsafe fn TableSetColumnIndex(&self, ctx: Context, column_n: std::ffi::c_int) -> bool {
        match self.pointers.TableSetColumnIndex {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableSetColumnIndex)
            ),
            Some(f) => f(ctx, column_n),
        }
    }
    pub unsafe fn TableSetBgColor(
        &self,
        ctx: Context,
        target: std::ffi::c_int,
        color_rgba: std::ffi::c_int,
        column_nInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.TableSetBgColor {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableSetBgColor)
            ),
            Some(f) => f(ctx, target, color_rgba, column_nInOptional),
        }
    }
    pub unsafe fn TableGetColumnFlags(
        &self,
        ctx: Context,
        column_nInOptional: *mut std::ffi::c_int,
    ) -> std::ffi::c_int {
        match self.pointers.TableGetColumnFlags {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableGetColumnFlags)
            ),
            Some(f) => f(ctx, column_nInOptional),
        }
    }
    pub unsafe fn TableHeader(&self, ctx: Context, label: *const std::ffi::c_char) -> () {
        match self.pointers.TableHeader {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableHeader)
            ),
            Some(f) => f(ctx, label),
        }
    }
    pub unsafe fn TableHeadersRow(&self, ctx: Context) -> () {
        match self.pointers.TableHeadersRow {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableHeadersRow)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn TableSetColumnEnabled(
        &self,
        ctx: Context,
        column_n: std::ffi::c_int,
        v: bool,
    ) -> () {
        match self.pointers.TableSetColumnEnabled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableSetColumnEnabled)
            ),
            Some(f) => f(ctx, column_n, v),
        }
    }
    pub unsafe fn TableSetupColumn(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
        init_width_or_weightInOptional: *mut f64,
        user_idInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.TableSetupColumn {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableSetupColumn)
            ),
            Some(f) => f(
                ctx,
                label,
                flagsInOptional,
                init_width_or_weightInOptional,
                user_idInOptional,
            ),
        }
    }
    pub unsafe fn TableSetupScrollFreeze(
        &self,
        ctx: Context,
        cols: std::ffi::c_int,
        rows: std::ffi::c_int,
    ) -> () {
        match self.pointers.TableSetupScrollFreeze {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableSetupScrollFreeze)
            ),
            Some(f) => f(ctx, cols, rows),
        }
    }
    pub unsafe fn TableGetColumnSortSpecs(
        &self,
        ctx: Context,
        id: std::ffi::c_int,
        column_user_idOut: *mut std::ffi::c_int,
        column_indexOut: *mut std::ffi::c_int,
        sort_orderOut: *mut std::ffi::c_int,
        sort_directionOut: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.TableGetColumnSortSpecs {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableGetColumnSortSpecs)
            ),
            Some(f) => f(
                ctx,
                id,
                column_user_idOut,
                column_indexOut,
                sort_orderOut,
                sort_directionOut,
            ),
        }
    }
    pub unsafe fn TableNeedSort(&self, ctx: Context, has_specsOut: *mut bool) -> bool {
        match self.pointers.TableNeedSort {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TableNeedSort)
            ),
            Some(f) => f(ctx, has_specsOut),
        }
    }
    pub unsafe fn AlignTextToFramePadding(&self, ctx: Context) -> () {
        match self.pointers.AlignTextToFramePadding {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(AlignTextToFramePadding)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn Bullet(&self, ctx: Context) -> () {
        match self.pointers.Bullet {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Bullet)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn BulletText(&self, ctx: Context, text: *const std::ffi::c_char) -> () {
        match self.pointers.BulletText {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BulletText)
            ),
            Some(f) => f(ctx, text),
        }
    }
    pub unsafe fn CalcTextSize(
        &self,
        ctx: Context,
        text: *const std::ffi::c_char,
        wOut: *mut f64,
        hOut: *mut f64,
        hide_text_after_double_hashInOptional: *mut bool,
        wrap_widthInOptional: *mut f64,
    ) -> () {
        match self.pointers.CalcTextSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CalcTextSize)
            ),
            Some(f) => f(
                ctx,
                text,
                wOut,
                hOut,
                hide_text_after_double_hashInOptional,
                wrap_widthInOptional,
            ),
        }
    }
    pub unsafe fn DebugTextEncoding(&self, ctx: Context, text: *const std::ffi::c_char) -> () {
        match self.pointers.DebugTextEncoding {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(DebugTextEncoding)
            ),
            Some(f) => f(ctx, text),
        }
    }
    pub unsafe fn GetFrameHeight(&self, ctx: Context) -> f64 {
        match self.pointers.GetFrameHeight {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetFrameHeight)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetFrameHeightWithSpacing(&self, ctx: Context) -> f64 {
        match self.pointers.GetFrameHeightWithSpacing {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetFrameHeightWithSpacing)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetTextLineHeight(&self, ctx: Context) -> f64 {
        match self.pointers.GetTextLineHeight {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetTextLineHeight)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetTextLineHeightWithSpacing(&self, ctx: Context) -> f64 {
        match self.pointers.GetTextLineHeightWithSpacing {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetTextLineHeightWithSpacing)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn LabelText(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        text: *const std::ffi::c_char,
    ) -> () {
        match self.pointers.LabelText {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(LabelText)
            ),
            Some(f) => f(ctx, label, text),
        }
    }
    pub unsafe fn PopTextWrapPos(&self, ctx: Context) -> () {
        match self.pointers.PopTextWrapPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopTextWrapPos)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn PushTextWrapPos(&self, ctx: Context, wrap_local_pos_xInOptional: *mut f64) -> () {
        match self.pointers.PushTextWrapPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushTextWrapPos)
            ),
            Some(f) => f(ctx, wrap_local_pos_xInOptional),
        }
    }
    pub unsafe fn Text(&self, ctx: Context, text: *const std::ffi::c_char) -> () {
        match self.pointers.Text {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Text)
            ),
            Some(f) => f(ctx, text),
        }
    }
    pub unsafe fn TextColored(
        &self,
        ctx: Context,
        col_rgba: std::ffi::c_int,
        text: *const std::ffi::c_char,
    ) -> () {
        match self.pointers.TextColored {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TextColored)
            ),
            Some(f) => f(ctx, col_rgba, text),
        }
    }
    pub unsafe fn TextDisabled(&self, ctx: Context, text: *const std::ffi::c_char) -> () {
        match self.pointers.TextDisabled {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TextDisabled)
            ),
            Some(f) => f(ctx, text),
        }
    }
    pub unsafe fn TextWrapped(&self, ctx: Context, text: *const std::ffi::c_char) -> () {
        match self.pointers.TextWrapped {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TextWrapped)
            ),
            Some(f) => f(ctx, text),
        }
    }
    pub unsafe fn InputDouble(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        vInOut: *mut f64,
        stepInOptional: *mut f64,
        step_fastInOptional: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputDouble {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputDouble)
            ),
            Some(f) => f(
                ctx,
                label,
                vInOut,
                stepInOptional,
                step_fastInOptional,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn InputDouble2(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputDouble2 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputDouble2)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn InputDouble3(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        v3InOut: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputDouble3 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputDouble3)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn InputDouble4(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut f64,
        v2InOut: *mut f64,
        v3InOut: *mut f64,
        v4InOut: *mut f64,
        formatInOptional: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputDouble4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputDouble4)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v4InOut,
                formatInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn InputInt(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        vInOut: *mut std::ffi::c_int,
        stepInOptional: *mut std::ffi::c_int,
        step_fastInOptional: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputInt {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputInt)
            ),
            Some(f) => f(
                ctx,
                label,
                vInOut,
                stepInOptional,
                step_fastInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn InputInt2(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputInt2 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputInt2)
            ),
            Some(f) => f(ctx, label, v1InOut, v2InOut, flagsInOptional),
        }
    }
    pub unsafe fn InputInt3(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        v3InOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputInt3 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputInt3)
            ),
            Some(f) => f(ctx, label, v1InOut, v2InOut, v3InOut, flagsInOptional),
        }
    }
    pub unsafe fn InputInt4(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        v1InOut: *mut std::ffi::c_int,
        v2InOut: *mut std::ffi::c_int,
        v3InOut: *mut std::ffi::c_int,
        v4InOut: *mut std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputInt4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputInt4)
            ),
            Some(f) => f(
                ctx,
                label,
                v1InOut,
                v2InOut,
                v3InOut,
                v4InOut,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn InputText(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        bufInOutNeedBig: *mut std::ffi::c_char,
        bufInOutNeedBig_sz: std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputText {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputText)
            ),
            Some(f) => f(
                ctx,
                label,
                bufInOutNeedBig,
                bufInOutNeedBig_sz,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn InputTextMultiline(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        bufInOutNeedBig: *mut std::ffi::c_char,
        bufInOutNeedBig_sz: std::ffi::c_int,
        size_wInOptional: *mut f64,
        size_hInOptional: *mut f64,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputTextMultiline {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputTextMultiline)
            ),
            Some(f) => f(
                ctx,
                label,
                bufInOutNeedBig,
                bufInOutNeedBig_sz,
                size_wInOptional,
                size_hInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn InputTextWithHint(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        hint: *const std::ffi::c_char,
        bufInOutNeedBig: *mut std::ffi::c_char,
        bufInOutNeedBig_sz: std::ffi::c_int,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.InputTextWithHint {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(InputTextWithHint)
            ),
            Some(f) => f(
                ctx,
                label,
                hint,
                bufInOutNeedBig,
                bufInOutNeedBig_sz,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn CreateTextFilter(
        &self,
        default_filterInOptional: *const std::ffi::c_char,
    ) -> TextFilter {
        match self.pointers.CreateTextFilter {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CreateTextFilter)
            ),
            Some(f) => f(default_filterInOptional),
        }
    }
    pub unsafe fn TextFilter_Clear(&self, filter: TextFilter) -> () {
        match self.pointers.TextFilter_Clear {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TextFilter_Clear)
            ),
            Some(f) => f(filter),
        }
    }
    pub unsafe fn TextFilter_Draw(
        &self,
        filter: TextFilter,
        ctx: Context,
        labelInOptional: *const std::ffi::c_char,
        widthInOptional: *mut f64,
    ) -> bool {
        match self.pointers.TextFilter_Draw {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TextFilter_Draw)
            ),
            Some(f) => f(filter, ctx, labelInOptional, widthInOptional),
        }
    }
    pub unsafe fn TextFilter_IsActive(&self, filter: TextFilter) -> bool {
        match self.pointers.TextFilter_IsActive {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TextFilter_IsActive)
            ),
            Some(f) => f(filter),
        }
    }
    pub unsafe fn TextFilter_PassFilter(
        &self,
        filter: TextFilter,
        text: *const std::ffi::c_char,
    ) -> bool {
        match self.pointers.TextFilter_PassFilter {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TextFilter_PassFilter)
            ),
            Some(f) => f(filter, text),
        }
    }
    pub unsafe fn TextFilter_Set(
        &self,
        filter: TextFilter,
        filter_text: *const std::ffi::c_char,
    ) -> () {
        match self.pointers.TextFilter_Set {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TextFilter_Set)
            ),
            Some(f) => f(filter, filter_text),
        }
    }
    pub unsafe fn CollapsingHeader(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        p_visibleInOut: *mut bool,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.CollapsingHeader {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(CollapsingHeader)
            ),
            Some(f) => f(ctx, label, p_visibleInOut, flagsInOptional),
        }
    }
    pub unsafe fn GetTreeNodeToLabelSpacing(&self, ctx: Context) -> f64 {
        match self.pointers.GetTreeNodeToLabelSpacing {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetTreeNodeToLabelSpacing)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsItemToggledOpen(&self, ctx: Context) -> bool {
        match self.pointers.IsItemToggledOpen {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsItemToggledOpen)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetNextItemOpen(
        &self,
        ctx: Context,
        is_open: bool,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetNextItemOpen {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextItemOpen)
            ),
            Some(f) => f(ctx, is_open, condInOptional),
        }
    }
    pub unsafe fn TreeNode(
        &self,
        ctx: Context,
        label: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.TreeNode {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TreeNode)
            ),
            Some(f) => f(ctx, label, flagsInOptional),
        }
    }
    pub unsafe fn TreeNodeEx(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        label: *const std::ffi::c_char,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.TreeNodeEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TreeNodeEx)
            ),
            Some(f) => f(ctx, str_id, label, flagsInOptional),
        }
    }
    pub unsafe fn TreePop(&self, ctx: Context) -> () {
        match self.pointers.TreePop {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TreePop)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn TreePush(&self, ctx: Context, str_id: *const std::ffi::c_char) -> () {
        match self.pointers.TreePush {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(TreePush)
            ),
            Some(f) => f(ctx, str_id),
        }
    }
    pub unsafe fn GetVersion(
        &self,
        imgui_versionOut: *mut std::ffi::c_char,
        imgui_versionOut_sz: std::ffi::c_int,
        imgui_version_numOut: *mut std::ffi::c_int,
        reaimgui_versionOut: *mut std::ffi::c_char,
        reaimgui_versionOut_sz: std::ffi::c_int,
    ) -> () {
        match self.pointers.GetVersion {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetVersion)
            ),
            Some(f) => f(
                imgui_versionOut,
                imgui_versionOut_sz,
                imgui_version_numOut,
                reaimgui_versionOut,
                reaimgui_versionOut_sz,
            ),
        }
    }
    pub unsafe fn NumericLimits_Float(&self, minOut: *mut f64, maxOut: *mut f64) -> () {
        match self.pointers.NumericLimits_Float {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(NumericLimits_Float)
            ),
            Some(f) => f(minOut, maxOut),
        }
    }
    pub unsafe fn PointConvertNative(
        &self,
        ctx: Context,
        xInOut: *mut f64,
        yInOut: *mut f64,
        to_nativeInOptional: *mut bool,
    ) -> () {
        match self.pointers.PointConvertNative {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PointConvertNative)
            ),
            Some(f) => f(ctx, xInOut, yInOut, to_nativeInOptional),
        }
    }
    pub unsafe fn ProgressBar(
        &self,
        ctx: Context,
        fraction: f64,
        size_arg_wInOptional: *mut f64,
        size_arg_hInOptional: *mut f64,
        overlayInOptional: *const std::ffi::c_char,
    ) -> () {
        match self.pointers.ProgressBar {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ProgressBar)
            ),
            Some(f) => f(
                ctx,
                fraction,
                size_arg_wInOptional,
                size_arg_hInOptional,
                overlayInOptional,
            ),
        }
    }
    pub unsafe fn SetClipboardText(&self, ctx: Context, text: *const std::ffi::c_char) -> () {
        match self.pointers.SetClipboardText {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetClipboardText)
            ),
            Some(f) => f(ctx, text),
        }
    }
    pub unsafe fn ColorConvertDouble4ToU32(
        &self,
        r: f64,
        g: f64,
        b: f64,
        a: f64,
    ) -> std::ffi::c_int {
        match self.pointers.ColorConvertDouble4ToU32 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorConvertDouble4ToU32)
            ),
            Some(f) => f(r, g, b, a),
        }
    }
    pub unsafe fn ColorConvertHSVtoRGB(
        &self,
        h: f64,
        s: f64,
        v: f64,
        rOut: *mut f64,
        gOut: *mut f64,
        bOut: *mut f64,
    ) -> () {
        match self.pointers.ColorConvertHSVtoRGB {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorConvertHSVtoRGB)
            ),
            Some(f) => f(h, s, v, rOut, gOut, bOut),
        }
    }
    pub unsafe fn ColorConvertNative(&self, rgb: std::ffi::c_int) -> std::ffi::c_int {
        match self.pointers.ColorConvertNative {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorConvertNative)
            ),
            Some(f) => f(rgb),
        }
    }
    pub unsafe fn ColorConvertRGBtoHSV(
        &self,
        r: f64,
        g: f64,
        b: f64,
        hOut: *mut f64,
        sOut: *mut f64,
        vOut: *mut f64,
    ) -> () {
        match self.pointers.ColorConvertRGBtoHSV {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorConvertRGBtoHSV)
            ),
            Some(f) => f(r, g, b, hOut, sOut, vOut),
        }
    }
    pub unsafe fn ColorConvertU32ToDouble4(
        &self,
        rgba: std::ffi::c_int,
        rOut: *mut f64,
        gOut: *mut f64,
        bOut: *mut f64,
        aOut: *mut f64,
    ) -> () {
        match self.pointers.ColorConvertU32ToDouble4 {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ColorConvertU32ToDouble4)
            ),
            Some(f) => f(rgba, rOut, gOut, bOut, aOut),
        }
    }
    pub unsafe fn PopID(&self, ctx: Context) -> () {
        match self.pointers.PopID {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PopID)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn PushID(&self, ctx: Context, str_id: *const std::ffi::c_char) -> () {
        match self.pointers.PushID {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(PushID)
            ),
            Some(f) => f(ctx, str_id),
        }
    }
    pub unsafe fn LogFinish(&self, ctx: Context) -> () {
        match self.pointers.LogFinish {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(LogFinish)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn LogText(&self, ctx: Context, text: *const std::ffi::c_char) -> () {
        match self.pointers.LogText {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(LogText)
            ),
            Some(f) => f(ctx, text),
        }
    }
    pub unsafe fn LogToClipboard(
        &self,
        ctx: Context,
        auto_open_depthInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.LogToClipboard {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(LogToClipboard)
            ),
            Some(f) => f(ctx, auto_open_depthInOptional),
        }
    }
    pub unsafe fn LogToFile(
        &self,
        ctx: Context,
        auto_open_depthInOptional: *mut std::ffi::c_int,
        filenameInOptional: *const std::ffi::c_char,
    ) -> () {
        match self.pointers.LogToFile {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(LogToFile)
            ),
            Some(f) => f(ctx, auto_open_depthInOptional, filenameInOptional),
        }
    }
    pub unsafe fn LogToTTY(
        &self,
        ctx: Context,
        auto_open_depthInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.LogToTTY {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(LogToTTY)
            ),
            Some(f) => f(ctx, auto_open_depthInOptional),
        }
    }
    pub unsafe fn GetMainViewport(&self, ctx: Context) -> Viewport {
        match self.pointers.GetMainViewport {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetMainViewport)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetWindowViewport(&self, ctx: Context) -> Viewport {
        match self.pointers.GetWindowViewport {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowViewport)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn Viewport_GetCenter(
        &self,
        viewport: Viewport,
        xOut: *mut f64,
        yOut: *mut f64,
    ) -> () {
        match self.pointers.Viewport_GetCenter {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Viewport_GetCenter)
            ),
            Some(f) => f(viewport, xOut, yOut),
        }
    }
    pub unsafe fn Viewport_GetPos(&self, viewport: Viewport, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.Viewport_GetPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Viewport_GetPos)
            ),
            Some(f) => f(viewport, xOut, yOut),
        }
    }
    pub unsafe fn Viewport_GetSize(
        &self,
        viewport: Viewport,
        wOut: *mut f64,
        hOut: *mut f64,
    ) -> () {
        match self.pointers.Viewport_GetSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Viewport_GetSize)
            ),
            Some(f) => f(viewport, wOut, hOut),
        }
    }
    pub unsafe fn Viewport_GetWorkCenter(
        &self,
        viewport: Viewport,
        xOut: *mut f64,
        yOut: *mut f64,
    ) -> () {
        match self.pointers.Viewport_GetWorkCenter {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Viewport_GetWorkCenter)
            ),
            Some(f) => f(viewport, xOut, yOut),
        }
    }
    pub unsafe fn Viewport_GetWorkPos(
        &self,
        viewport: Viewport,
        xOut: *mut f64,
        yOut: *mut f64,
    ) -> () {
        match self.pointers.Viewport_GetWorkPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Viewport_GetWorkPos)
            ),
            Some(f) => f(viewport, xOut, yOut),
        }
    }
    pub unsafe fn Viewport_GetWorkSize(
        &self,
        viewport: Viewport,
        wOut: *mut f64,
        hOut: *mut f64,
    ) -> () {
        match self.pointers.Viewport_GetWorkSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Viewport_GetWorkSize)
            ),
            Some(f) => f(viewport, wOut, hOut),
        }
    }
    pub unsafe fn Begin(
        &self,
        ctx: Context,
        name: *const std::ffi::c_char,
        p_openInOutOptional: *mut bool,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.Begin {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(Begin)
            ),
            Some(f) => f(ctx, name, p_openInOutOptional, flagsInOptional),
        }
    }
    pub unsafe fn End(&self, ctx: Context) -> () {
        match self.pointers.End {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(End)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn BeginChild(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        size_wInOptional: *mut f64,
        size_hInOptional: *mut f64,
        borderInOptional: *mut bool,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginChild {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginChild)
            ),
            Some(f) => f(
                ctx,
                str_id,
                size_wInOptional,
                size_hInOptional,
                borderInOptional,
                flagsInOptional,
            ),
        }
    }
    pub unsafe fn BeginChildFrame(
        &self,
        ctx: Context,
        str_id: *const std::ffi::c_char,
        size_w: f64,
        size_h: f64,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.BeginChildFrame {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(BeginChildFrame)
            ),
            Some(f) => f(ctx, str_id, size_w, size_h, flagsInOptional),
        }
    }
    pub unsafe fn EndChild(&self, ctx: Context) -> () {
        match self.pointers.EndChild {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndChild)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn EndChildFrame(&self, ctx: Context) -> () {
        match self.pointers.EndChildFrame {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(EndChildFrame)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetContentRegionAvail(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetContentRegionAvail {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetContentRegionAvail)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetContentRegionMax(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetContentRegionMax {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetContentRegionMax)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetWindowContentRegionMax(
        &self,
        ctx: Context,
        xOut: *mut f64,
        yOut: *mut f64,
    ) -> () {
        match self.pointers.GetWindowContentRegionMax {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowContentRegionMax)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetWindowContentRegionMin(
        &self,
        ctx: Context,
        xOut: *mut f64,
        yOut: *mut f64,
    ) -> () {
        match self.pointers.GetWindowContentRegionMin {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowContentRegionMin)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn ShowAboutWindow(&self, ctx: Context, p_openInOutOptional: *mut bool) -> () {
        match self.pointers.ShowAboutWindow {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ShowAboutWindow)
            ),
            Some(f) => f(ctx, p_openInOutOptional),
        }
    }
    pub unsafe fn ShowDebugLogWindow(&self, ctx: Context, p_openInOutOptional: *mut bool) -> () {
        match self.pointers.ShowDebugLogWindow {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ShowDebugLogWindow)
            ),
            Some(f) => f(ctx, p_openInOutOptional),
        }
    }
    pub unsafe fn ShowMetricsWindow(&self, ctx: Context, p_openInOutOptional: *mut bool) -> () {
        match self.pointers.ShowMetricsWindow {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ShowMetricsWindow)
            ),
            Some(f) => f(ctx, p_openInOutOptional),
        }
    }
    pub unsafe fn ShowStackToolWindow(&self, ctx: Context, p_openInOutOptional: *mut bool) -> () {
        match self.pointers.ShowStackToolWindow {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(ShowStackToolWindow)
            ),
            Some(f) => f(ctx, p_openInOutOptional),
        }
    }
    pub unsafe fn GetWindowDockID(&self, ctx: Context) -> std::ffi::c_int {
        match self.pointers.GetWindowDockID {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowDockID)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsWindowDocked(&self, ctx: Context) -> bool {
        match self.pointers.IsWindowDocked {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsWindowDocked)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetNextWindowDockID(
        &self,
        ctx: Context,
        dock_id: std::ffi::c_int,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetNextWindowDockID {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowDockID)
            ),
            Some(f) => f(ctx, dock_id, condInOptional),
        }
    }
    pub unsafe fn GetWindowDpiScale(&self, ctx: Context) -> f64 {
        match self.pointers.GetWindowDpiScale {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowDpiScale)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetWindowHeight(&self, ctx: Context) -> f64 {
        match self.pointers.GetWindowHeight {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowHeight)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetWindowPos(&self, ctx: Context, xOut: *mut f64, yOut: *mut f64) -> () {
        match self.pointers.GetWindowPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowPos)
            ),
            Some(f) => f(ctx, xOut, yOut),
        }
    }
    pub unsafe fn GetWindowSize(&self, ctx: Context, wOut: *mut f64, hOut: *mut f64) -> () {
        match self.pointers.GetWindowSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowSize)
            ),
            Some(f) => f(ctx, wOut, hOut),
        }
    }
    pub unsafe fn GetWindowWidth(&self, ctx: Context) -> f64 {
        match self.pointers.GetWindowWidth {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetWindowWidth)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsWindowAppearing(&self, ctx: Context) -> bool {
        match self.pointers.IsWindowAppearing {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsWindowAppearing)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsWindowCollapsed(&self, ctx: Context) -> bool {
        match self.pointers.IsWindowCollapsed {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsWindowCollapsed)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn IsWindowFocused(
        &self,
        ctx: Context,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.IsWindowFocused {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsWindowFocused)
            ),
            Some(f) => f(ctx, flagsInOptional),
        }
    }
    pub unsafe fn IsWindowHovered(
        &self,
        ctx: Context,
        flagsInOptional: *mut std::ffi::c_int,
    ) -> bool {
        match self.pointers.IsWindowHovered {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(IsWindowHovered)
            ),
            Some(f) => f(ctx, flagsInOptional),
        }
    }
    pub unsafe fn SetNextWindowBgAlpha(&self, ctx: Context, alpha: f64) -> () {
        match self.pointers.SetNextWindowBgAlpha {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowBgAlpha)
            ),
            Some(f) => f(ctx, alpha),
        }
    }
    pub unsafe fn SetNextWindowCollapsed(
        &self,
        ctx: Context,
        collapsed: bool,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetNextWindowCollapsed {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowCollapsed)
            ),
            Some(f) => f(ctx, collapsed, condInOptional),
        }
    }
    pub unsafe fn SetNextWindowContentSize(&self, ctx: Context, size_w: f64, size_h: f64) -> () {
        match self.pointers.SetNextWindowContentSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowContentSize)
            ),
            Some(f) => f(ctx, size_w, size_h),
        }
    }
    pub unsafe fn SetNextWindowFocus(&self, ctx: Context) -> () {
        match self.pointers.SetNextWindowFocus {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowFocus)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetNextWindowPos(
        &self,
        ctx: Context,
        pos_x: f64,
        pos_y: f64,
        condInOptional: *mut std::ffi::c_int,
        pivot_xInOptional: *mut f64,
        pivot_yInOptional: *mut f64,
    ) -> () {
        match self.pointers.SetNextWindowPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowPos)
            ),
            Some(f) => f(
                ctx,
                pos_x,
                pos_y,
                condInOptional,
                pivot_xInOptional,
                pivot_yInOptional,
            ),
        }
    }
    pub unsafe fn SetNextWindowScroll(&self, ctx: Context, scroll_x: f64, scroll_y: f64) -> () {
        match self.pointers.SetNextWindowScroll {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowScroll)
            ),
            Some(f) => f(ctx, scroll_x, scroll_y),
        }
    }
    pub unsafe fn SetNextWindowSize(
        &self,
        ctx: Context,
        size_w: f64,
        size_h: f64,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetNextWindowSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowSize)
            ),
            Some(f) => f(ctx, size_w, size_h, condInOptional),
        }
    }
    pub unsafe fn SetNextWindowSizeConstraints(
        &self,
        ctx: Context,
        size_min_w: f64,
        size_min_h: f64,
        size_max_w: f64,
        size_max_h: f64,
    ) -> () {
        match self.pointers.SetNextWindowSizeConstraints {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetNextWindowSizeConstraints)
            ),
            Some(f) => f(ctx, size_min_w, size_min_h, size_max_w, size_max_h),
        }
    }
    pub unsafe fn SetWindowCollapsed(
        &self,
        ctx: Context,
        collapsed: bool,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetWindowCollapsed {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetWindowCollapsed)
            ),
            Some(f) => f(ctx, collapsed, condInOptional),
        }
    }
    pub unsafe fn SetWindowCollapsedEx(
        &self,
        ctx: Context,
        name: *const std::ffi::c_char,
        collapsed: bool,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetWindowCollapsedEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetWindowCollapsedEx)
            ),
            Some(f) => f(ctx, name, collapsed, condInOptional),
        }
    }
    pub unsafe fn SetWindowFocus(&self, ctx: Context) -> () {
        match self.pointers.SetWindowFocus {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetWindowFocus)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetWindowFocusEx(&self, ctx: Context, name: *const std::ffi::c_char) -> () {
        match self.pointers.SetWindowFocusEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetWindowFocusEx)
            ),
            Some(f) => f(ctx, name),
        }
    }
    pub unsafe fn SetWindowPos(
        &self,
        ctx: Context,
        pos_x: f64,
        pos_y: f64,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetWindowPos {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetWindowPos)
            ),
            Some(f) => f(ctx, pos_x, pos_y, condInOptional),
        }
    }
    pub unsafe fn SetWindowPosEx(
        &self,
        ctx: Context,
        name: *const std::ffi::c_char,
        pos_x: f64,
        pos_y: f64,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetWindowPosEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetWindowPosEx)
            ),
            Some(f) => f(ctx, name, pos_x, pos_y, condInOptional),
        }
    }
    pub unsafe fn SetWindowSize(
        &self,
        ctx: Context,
        size_w: f64,
        size_h: f64,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetWindowSize {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetWindowSize)
            ),
            Some(f) => f(ctx, size_w, size_h, condInOptional),
        }
    }
    pub unsafe fn SetWindowSizeEx(
        &self,
        ctx: Context,
        name: *const std::ffi::c_char,
        size_w: f64,
        size_h: f64,
        condInOptional: *mut std::ffi::c_int,
    ) -> () {
        match self.pointers.SetWindowSizeEx {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetWindowSizeEx)
            ),
            Some(f) => f(ctx, name, size_w, size_h, condInOptional),
        }
    }
    pub unsafe fn GetScrollMaxX(&self, ctx: Context) -> f64 {
        match self.pointers.GetScrollMaxX {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetScrollMaxX)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetScrollMaxY(&self, ctx: Context) -> f64 {
        match self.pointers.GetScrollMaxY {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetScrollMaxY)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetScrollX(&self, ctx: Context) -> f64 {
        match self.pointers.GetScrollX {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetScrollX)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn GetScrollY(&self, ctx: Context) -> f64 {
        match self.pointers.GetScrollY {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(GetScrollY)
            ),
            Some(f) => f(ctx),
        }
    }
    pub unsafe fn SetScrollFromPosX(
        &self,
        ctx: Context,
        local_x: f64,
        center_x_ratioInOptional: *mut f64,
    ) -> () {
        match self.pointers.SetScrollFromPosX {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetScrollFromPosX)
            ),
            Some(f) => f(ctx, local_x, center_x_ratioInOptional),
        }
    }
    pub unsafe fn SetScrollFromPosY(
        &self,
        ctx: Context,
        local_y: f64,
        center_y_ratioInOptional: *mut f64,
    ) -> () {
        match self.pointers.SetScrollFromPosY {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetScrollFromPosY)
            ),
            Some(f) => f(ctx, local_y, center_y_ratioInOptional),
        }
    }
    pub unsafe fn SetScrollHereX(&self, ctx: Context, center_x_ratioInOptional: *mut f64) -> () {
        match self.pointers.SetScrollHereX {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetScrollHereX)
            ),
            Some(f) => f(ctx, center_x_ratioInOptional),
        }
    }
    pub unsafe fn SetScrollHereY(&self, ctx: Context, center_y_ratioInOptional: *mut f64) -> () {
        match self.pointers.SetScrollHereY {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetScrollHereY)
            ),
            Some(f) => f(ctx, center_y_ratioInOptional),
        }
    }
    pub unsafe fn SetScrollX(&self, ctx: Context, scroll_x: f64) -> () {
        match self.pointers.SetScrollX {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetScrollX)
            ),
            Some(f) => f(ctx, scroll_x),
        }
    }
    pub unsafe fn SetScrollY(&self, ctx: Context, scroll_y: f64) -> () {
        match self.pointers.SetScrollY {
            None => panic!(
                "Attempt to use a function that has not been loaded: {}",
                stringify!(SetScrollY)
            ),
            Some(f) => f(ctx, scroll_y),
        }
    }
}
#[derive(Clone)]
struct FunctionPointers {
    loaded_count: u32,
    ArrowButton:
        Option<unsafe extern "C" fn(Context, *const std::ffi::c_char, std::ffi::c_int) -> bool>,
    Button:
        Option<unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut f64, *mut f64) -> bool>,
    Checkbox: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut bool) -> bool>,
    CheckboxFlags: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            std::ffi::c_int,
        ) -> bool,
    >,
    InvisibleButton: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            f64,
            f64,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    PopButtonRepeat: Option<unsafe extern "C" fn(Context) -> ()>,
    PushButtonRepeat: Option<unsafe extern "C" fn(Context, bool) -> ()>,
    RadioButton: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char, bool) -> bool>,
    RadioButtonEx: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            std::ffi::c_int,
        ) -> bool,
    >,
    SmallButton: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> bool>,
    ColorButton: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut f64,
            *mut f64,
        ) -> bool,
    >,
    ColorEdit3: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    ColorEdit4: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    ColorPicker3: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    ColorPicker4: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SetColorEditOptions: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> ()>,
    BeginCombo: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    Combo: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *const std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    EndCombo: Option<unsafe extern "C" fn(Context) -> ()>,
    BeginListBox:
        Option<unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut f64, *mut f64) -> bool>,
    EndListBox: Option<unsafe extern "C" fn(Context) -> ()>,
    ListBox: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *const std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    Selectable: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut bool,
            *mut std::ffi::c_int,
            *mut f64,
            *mut f64,
        ) -> bool,
    >,
    Attach: Option<unsafe extern "C" fn(Context, Resource) -> ()>,
    CreateContext:
        Option<unsafe extern "C" fn(*const std::ffi::c_char, *mut std::ffi::c_int) -> Context>,
    DestroyContext: Option<unsafe extern "C" fn(Context) -> ()>,
    Detach: Option<unsafe extern "C" fn(Context, Resource) -> ()>,
    GetDeltaTime: Option<unsafe extern "C" fn(Context) -> f64>,
    GetFrameCount: Option<unsafe extern "C" fn(Context) -> std::ffi::c_int>,
    GetFramerate: Option<unsafe extern "C" fn(Context) -> f64>,
    GetTime: Option<unsafe extern "C" fn(Context) -> f64>,
    GetConfigVar: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> f64>,
    SetConfigVar: Option<unsafe extern "C" fn(Context, std::ffi::c_int, f64) -> ()>,
    AcceptDragDropPayload: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    AcceptDragDropPayloadFiles:
        Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int, *mut std::ffi::c_int) -> bool>,
    AcceptDragDropPayloadRGB:
        Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int, *mut std::ffi::c_int) -> bool>,
    AcceptDragDropPayloadRGBA:
        Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int, *mut std::ffi::c_int) -> bool>,
    BeginDragDropSource: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> bool>,
    BeginDragDropTarget: Option<unsafe extern "C" fn(Context) -> bool>,
    EndDragDropSource: Option<unsafe extern "C" fn(Context) -> ()>,
    EndDragDropTarget: Option<unsafe extern "C" fn(Context) -> ()>,
    GetDragDropPayload: Option<
        unsafe extern "C" fn(
            Context,
            *mut std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_char,
            std::ffi::c_int,
            *mut bool,
            *mut bool,
        ) -> bool,
    >,
    GetDragDropPayloadFile: Option<
        unsafe extern "C" fn(
            Context,
            std::ffi::c_int,
            *mut std::ffi::c_char,
            std::ffi::c_int,
        ) -> bool,
    >,
    SetDragDropPayload: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragDouble: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragDouble2: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragDouble3: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragDouble4: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragFloatRange2: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragInt: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut f64,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragInt2: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut f64,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragInt3: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut f64,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragInt4: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut f64,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DragIntRange2: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut f64,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *const std::ffi::c_char,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderAngle: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderDouble: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            f64,
            f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderDouble2: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            f64,
            f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderDouble3: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            f64,
            f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderDouble4: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            f64,
            f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderInt: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            std::ffi::c_int,
            std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderInt2: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            std::ffi::c_int,
            std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderInt3: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            std::ffi::c_int,
            std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    SliderInt4: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            std::ffi::c_int,
            std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    VSliderDouble: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            f64,
            f64,
            *mut f64,
            f64,
            f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    VSliderInt: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            f64,
            f64,
            *mut std::ffi::c_int,
            std::ffi::c_int,
            std::ffi::c_int,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    DrawList_PopClipRect: Option<unsafe extern "C" fn(DrawList) -> ()>,
    DrawList_PushClipRect:
        Option<unsafe extern "C" fn(DrawList, f64, f64, f64, f64, *mut bool) -> ()>,
    DrawList_PushClipRectFullScreen: Option<unsafe extern "C" fn(DrawList) -> ()>,
    GetBackgroundDrawList: Option<unsafe extern "C" fn(Context) -> DrawList>,
    GetForegroundDrawList: Option<unsafe extern "C" fn(Context) -> DrawList>,
    GetWindowDrawList: Option<unsafe extern "C" fn(Context) -> DrawList>,
    DrawList_AddBezierCubic: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    DrawList_AddBezierQuadratic: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    DrawList_AddCircle: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut f64,
        ) -> (),
    >,
    DrawList_AddCircleFilled: Option<
        unsafe extern "C" fn(DrawList, f64, f64, f64, std::ffi::c_int, *mut std::ffi::c_int) -> (),
    >,
    DrawList_AddImage: Option<
        unsafe extern "C" fn(
            DrawList,
            Image,
            f64,
            f64,
            f64,
            f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    DrawList_AddImageQuad: Option<
        unsafe extern "C" fn(
            DrawList,
            Image,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    DrawList_AddImageRounded: Option<
        unsafe extern "C" fn(
            DrawList,
            Image,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    DrawList_AddLine:
        Option<unsafe extern "C" fn(DrawList, f64, f64, f64, f64, std::ffi::c_int, *mut f64) -> ()>,
    DrawList_AddNgon: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            std::ffi::c_int,
            *mut f64,
        ) -> (),
    >,
    DrawList_AddNgonFilled: Option<
        unsafe extern "C" fn(DrawList, f64, f64, f64, std::ffi::c_int, std::ffi::c_int) -> (),
    >,
    DrawList_AddQuad: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            *mut f64,
        ) -> (),
    >,
    DrawList_AddQuadFilled: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
        ) -> (),
    >,
    DrawList_AddRect: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            *mut f64,
            *mut std::ffi::c_int,
            *mut f64,
        ) -> (),
    >,
    DrawList_AddRectFilled: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            *mut f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    DrawList_AddRectFilledMultiColor: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            std::ffi::c_int,
            std::ffi::c_int,
            std::ffi::c_int,
        ) -> (),
    >,
    DrawList_AddText: Option<
        unsafe extern "C" fn(DrawList, f64, f64, std::ffi::c_int, *const std::ffi::c_char) -> (),
    >,
    DrawList_AddTextEx: Option<
        unsafe extern "C" fn(
            DrawList,
            Font,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
        ) -> (),
    >,
    DrawList_AddTriangle: Option<
        unsafe extern "C" fn(
            DrawList,
            f64,
            f64,
            f64,
            f64,
            f64,
            f64,
            std::ffi::c_int,
            *mut f64,
        ) -> (),
    >,
    DrawList_AddTriangleFilled:
        Option<unsafe extern "C" fn(DrawList, f64, f64, f64, f64, f64, f64, std::ffi::c_int) -> ()>,
    CreateDrawListSplitter: Option<unsafe extern "C" fn(DrawList) -> DrawListSplitter>,
    DrawListSplitter_Clear: Option<unsafe extern "C" fn(DrawListSplitter) -> ()>,
    DrawListSplitter_Merge: Option<unsafe extern "C" fn(DrawListSplitter) -> ()>,
    DrawListSplitter_SetCurrentChannel:
        Option<unsafe extern "C" fn(DrawListSplitter, std::ffi::c_int) -> ()>,
    DrawListSplitter_Split: Option<unsafe extern "C" fn(DrawListSplitter, std::ffi::c_int) -> ()>,
    DrawList_PathArcTo:
        Option<unsafe extern "C" fn(DrawList, f64, f64, f64, f64, f64, *mut std::ffi::c_int) -> ()>,
    DrawList_PathArcToFast: Option<
        unsafe extern "C" fn(DrawList, f64, f64, f64, std::ffi::c_int, std::ffi::c_int) -> (),
    >,
    DrawList_PathBezierCubicCurveTo: Option<
        unsafe extern "C" fn(DrawList, f64, f64, f64, f64, f64, f64, *mut std::ffi::c_int) -> (),
    >,
    DrawList_PathBezierQuadraticCurveTo:
        Option<unsafe extern "C" fn(DrawList, f64, f64, f64, f64, *mut std::ffi::c_int) -> ()>,
    DrawList_PathClear: Option<unsafe extern "C" fn(DrawList) -> ()>,
    DrawList_PathFillConvex: Option<unsafe extern "C" fn(DrawList, std::ffi::c_int) -> ()>,
    DrawList_PathLineTo: Option<unsafe extern "C" fn(DrawList, f64, f64) -> ()>,
    DrawList_PathRect: Option<
        unsafe extern "C" fn(DrawList, f64, f64, f64, f64, *mut f64, *mut std::ffi::c_int) -> (),
    >,
    DrawList_PathStroke: Option<
        unsafe extern "C" fn(DrawList, std::ffi::c_int, *mut std::ffi::c_int, *mut f64) -> (),
    >,
    CreateFont: Option<
        unsafe extern "C" fn(
            *const std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> Font,
    >,
    GetFont: Option<unsafe extern "C" fn(Context) -> Font>,
    GetFontSize: Option<unsafe extern "C" fn(Context) -> f64>,
    PopFont: Option<unsafe extern "C" fn(Context) -> ()>,
    PushFont: Option<unsafe extern "C" fn(Context, Font) -> ()>,
    CreateImage:
        Option<unsafe extern "C" fn(*const std::ffi::c_char, *mut std::ffi::c_int) -> Image>,
    CreateImageFromMem:
        Option<unsafe extern "C" fn(*const std::ffi::c_char, std::ffi::c_int) -> Image>,
    Image: Option<
        unsafe extern "C" fn(
            Context,
            Image,
            f64,
            f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    ImageButton: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            Image,
            f64,
            f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    Image_GetSize: Option<unsafe extern "C" fn(Image, *mut f64, *mut f64) -> ()>,
    ImageSet_Add: Option<unsafe extern "C" fn(ImageSet, f64, Image) -> ()>,
    BeginDisabled: Option<unsafe extern "C" fn(Context, *mut bool) -> ()>,
    EndDisabled: Option<unsafe extern "C" fn(Context) -> ()>,
    SetItemAllowOverlap: Option<unsafe extern "C" fn(Context) -> ()>,
    CalcItemWidth: Option<unsafe extern "C" fn(Context) -> f64>,
    GetItemRectMax: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetItemRectMin: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetItemRectSize: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    PopItemWidth: Option<unsafe extern "C" fn(Context) -> ()>,
    PushItemWidth: Option<unsafe extern "C" fn(Context, f64) -> ()>,
    SetNextItemWidth: Option<unsafe extern "C" fn(Context, f64) -> ()>,
    PopAllowKeyboardFocus: Option<unsafe extern "C" fn(Context) -> ()>,
    PushAllowKeyboardFocus: Option<unsafe extern "C" fn(Context, bool) -> ()>,
    SetItemDefaultFocus: Option<unsafe extern "C" fn(Context) -> ()>,
    SetKeyboardFocusHere: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> ()>,
    IsAnyItemActive: Option<unsafe extern "C" fn(Context) -> bool>,
    IsAnyItemFocused: Option<unsafe extern "C" fn(Context) -> bool>,
    IsAnyItemHovered: Option<unsafe extern "C" fn(Context) -> bool>,
    IsItemActivated: Option<unsafe extern "C" fn(Context) -> bool>,
    IsItemActive: Option<unsafe extern "C" fn(Context) -> bool>,
    IsItemClicked: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> bool>,
    IsItemDeactivated: Option<unsafe extern "C" fn(Context) -> bool>,
    IsItemDeactivatedAfterEdit: Option<unsafe extern "C" fn(Context) -> bool>,
    IsItemEdited: Option<unsafe extern "C" fn(Context) -> bool>,
    IsItemFocused: Option<unsafe extern "C" fn(Context) -> bool>,
    IsItemHovered: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> bool>,
    IsItemVisible: Option<unsafe extern "C" fn(Context) -> bool>,
    GetInputQueueCharacter:
        Option<unsafe extern "C" fn(Context, std::ffi::c_int, *mut std::ffi::c_int) -> bool>,
    GetKeyDownDuration: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> f64>,
    GetKeyMods: Option<unsafe extern "C" fn(Context) -> std::ffi::c_int>,
    GetKeyPressedAmount:
        Option<unsafe extern "C" fn(Context, std::ffi::c_int, f64, f64) -> std::ffi::c_int>,
    IsKeyDown: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> bool>,
    IsKeyPressed: Option<unsafe extern "C" fn(Context, std::ffi::c_int, *mut bool) -> bool>,
    IsKeyReleased: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> bool>,
    SetNextFrameWantCaptureKeyboard: Option<unsafe extern "C" fn(Context, bool) -> ()>,
    GetMouseClickedCount: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> std::ffi::c_int>,
    GetMouseClickedPos:
        Option<unsafe extern "C" fn(Context, std::ffi::c_int, *mut f64, *mut f64) -> ()>,
    GetMouseCursor: Option<unsafe extern "C" fn(Context) -> std::ffi::c_int>,
    GetMouseDelta: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetMouseDownDuration: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> f64>,
    GetMouseDragDelta: Option<
        unsafe extern "C" fn(Context, *mut f64, *mut f64, *mut std::ffi::c_int, *mut f64) -> (),
    >,
    GetMousePos: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetMousePosOnOpeningCurrentPopup:
        Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetMouseWheel: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    IsAnyMouseDown: Option<unsafe extern "C" fn(Context) -> bool>,
    IsMouseClicked: Option<unsafe extern "C" fn(Context, std::ffi::c_int, *mut bool) -> bool>,
    IsMouseDoubleClicked: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> bool>,
    IsMouseDown: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> bool>,
    IsMouseDragging: Option<unsafe extern "C" fn(Context, std::ffi::c_int, *mut f64) -> bool>,
    IsMouseHoveringRect:
        Option<unsafe extern "C" fn(Context, f64, f64, f64, f64, *mut bool) -> bool>,
    IsMousePosValid: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> bool>,
    IsMouseReleased: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> bool>,
    ResetMouseDragDelta: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> ()>,
    SetMouseCursor: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> ()>,
    Separator: Option<unsafe extern "C" fn(Context) -> ()>,
    IsRectVisible: Option<unsafe extern "C" fn(Context, f64, f64) -> bool>,
    IsRectVisibleEx: Option<unsafe extern "C" fn(Context, f64, f64, f64, f64) -> bool>,
    PopClipRect: Option<unsafe extern "C" fn(Context) -> ()>,
    PushClipRect: Option<unsafe extern "C" fn(Context, f64, f64, f64, f64, bool) -> ()>,
    BeginGroup: Option<unsafe extern "C" fn(Context) -> ()>,
    Dummy: Option<unsafe extern "C" fn(Context, f64, f64) -> ()>,
    EndGroup: Option<unsafe extern "C" fn(Context) -> ()>,
    GetCursorPos: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetCursorPosX: Option<unsafe extern "C" fn(Context) -> f64>,
    GetCursorPosY: Option<unsafe extern "C" fn(Context) -> f64>,
    GetCursorScreenPos: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetCursorStartPos: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    Indent: Option<unsafe extern "C" fn(Context, *mut f64) -> ()>,
    NewLine: Option<unsafe extern "C" fn(Context) -> ()>,
    SameLine: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    SetCursorPos: Option<unsafe extern "C" fn(Context, f64, f64) -> ()>,
    SetCursorPosX: Option<unsafe extern "C" fn(Context, f64) -> ()>,
    SetCursorPosY: Option<unsafe extern "C" fn(Context, f64) -> ()>,
    SetCursorScreenPos: Option<unsafe extern "C" fn(Context, f64, f64) -> ()>,
    Spacing: Option<unsafe extern "C" fn(Context) -> ()>,
    Unindent: Option<unsafe extern "C" fn(Context, *mut f64) -> ()>,
    CreateListClipper: Option<unsafe extern "C" fn(Context) -> ListClipper>,
    ListClipper_Begin: Option<unsafe extern "C" fn(ListClipper, std::ffi::c_int, *mut f64) -> ()>,
    ListClipper_End: Option<unsafe extern "C" fn(ListClipper) -> ()>,
    ListClipper_ForceDisplayRangeByIndices:
        Option<unsafe extern "C" fn(ListClipper, std::ffi::c_int, std::ffi::c_int) -> ()>,
    ListClipper_GetDisplayRange:
        Option<unsafe extern "C" fn(ListClipper, *mut std::ffi::c_int, *mut std::ffi::c_int) -> ()>,
    ListClipper_Step: Option<unsafe extern "C" fn(ListClipper) -> bool>,
    BeginMenu: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut bool) -> bool>,
    BeginMenuBar: Option<unsafe extern "C" fn(Context) -> bool>,
    EndMenu: Option<unsafe extern "C" fn(Context) -> ()>,
    EndMenuBar: Option<unsafe extern "C" fn(Context) -> ()>,
    MenuItem: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *const std::ffi::c_char,
            *mut bool,
            *mut bool,
        ) -> bool,
    >,
    BeginPopup: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> bool,
    >,
    BeginPopupModal: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut bool,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    CloseCurrentPopup: Option<unsafe extern "C" fn(Context) -> ()>,
    EndPopup: Option<unsafe extern "C" fn(Context) -> ()>,
    IsPopupOpen: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> bool,
    >,
    OpenPopup:
        Option<unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> ()>,
    OpenPopupOnItemClick:
        Option<unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> ()>,
    BeginPopupContextItem: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> bool,
    >,
    BeginPopupContextWindow: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> bool,
    >,
    BeginTooltip: Option<unsafe extern "C" fn(Context) -> ()>,
    EndTooltip: Option<unsafe extern "C" fn(Context) -> ()>,
    SetTooltip: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    GetColor: Option<unsafe extern "C" fn(Context, std::ffi::c_int, *mut f64) -> std::ffi::c_int>,
    GetColorEx: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> std::ffi::c_int>,
    GetStyleColor: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> std::ffi::c_int>,
    PopStyleColor: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> ()>,
    PushStyleColor: Option<unsafe extern "C" fn(Context, std::ffi::c_int, std::ffi::c_int) -> ()>,
    GetStyleVar: Option<unsafe extern "C" fn(Context, std::ffi::c_int, *mut f64, *mut f64) -> ()>,
    PopStyleVar: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> ()>,
    PushStyleVar: Option<unsafe extern "C" fn(Context, std::ffi::c_int, f64, *mut f64) -> ()>,
    BeginTabBar: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> bool,
    >,
    EndTabBar: Option<unsafe extern "C" fn(Context) -> ()>,
    BeginTabItem: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut bool,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    EndTabItem: Option<unsafe extern "C" fn(Context) -> ()>,
    SetTabItemClosed: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    TabItemButton: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> bool,
    >,
    BeginTable: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut f64,
            *mut f64,
            *mut f64,
        ) -> bool,
    >,
    EndTable: Option<unsafe extern "C" fn(Context) -> ()>,
    TableGetColumnCount: Option<unsafe extern "C" fn(Context) -> std::ffi::c_int>,
    TableGetColumnIndex: Option<unsafe extern "C" fn(Context) -> std::ffi::c_int>,
    TableGetRowIndex: Option<unsafe extern "C" fn(Context) -> std::ffi::c_int>,
    TableNextColumn: Option<unsafe extern "C" fn(Context) -> bool>,
    TableNextRow: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int, *mut f64) -> ()>,
    TableSetColumnIndex: Option<unsafe extern "C" fn(Context, std::ffi::c_int) -> bool>,
    TableSetBgColor: Option<
        unsafe extern "C" fn(Context, std::ffi::c_int, std::ffi::c_int, *mut std::ffi::c_int) -> (),
    >,
    TableGetColumnFlags:
        Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> std::ffi::c_int>,
    TableHeader: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    TableHeadersRow: Option<unsafe extern "C" fn(Context) -> ()>,
    TableSetColumnEnabled: Option<unsafe extern "C" fn(Context, std::ffi::c_int, bool) -> ()>,
    TableSetupColumn: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    TableSetupScrollFreeze:
        Option<unsafe extern "C" fn(Context, std::ffi::c_int, std::ffi::c_int) -> ()>,
    TableGetColumnSortSpecs: Option<
        unsafe extern "C" fn(
            Context,
            std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    TableNeedSort: Option<unsafe extern "C" fn(Context, *mut bool) -> bool>,
    AlignTextToFramePadding: Option<unsafe extern "C" fn(Context) -> ()>,
    Bullet: Option<unsafe extern "C" fn(Context) -> ()>,
    BulletText: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    CalcTextSize: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut bool,
            *mut f64,
        ) -> (),
    >,
    DebugTextEncoding: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    GetFrameHeight: Option<unsafe extern "C" fn(Context) -> f64>,
    GetFrameHeightWithSpacing: Option<unsafe extern "C" fn(Context) -> f64>,
    GetTextLineHeight: Option<unsafe extern "C" fn(Context) -> f64>,
    GetTextLineHeightWithSpacing: Option<unsafe extern "C" fn(Context) -> f64>,
    LabelText: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, *const std::ffi::c_char) -> (),
    >,
    PopTextWrapPos: Option<unsafe extern "C" fn(Context) -> ()>,
    PushTextWrapPos: Option<unsafe extern "C" fn(Context, *mut f64) -> ()>,
    Text: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    TextColored:
        Option<unsafe extern "C" fn(Context, std::ffi::c_int, *const std::ffi::c_char) -> ()>,
    TextDisabled: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    TextWrapped: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    InputDouble: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputDouble2: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputDouble3: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputDouble4: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut f64,
            *mut f64,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputInt: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputInt2: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputInt3: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputInt4: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputText: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputTextMultiline: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut std::ffi::c_char,
            std::ffi::c_int,
            *mut f64,
            *mut f64,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    InputTextWithHint: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *const std::ffi::c_char,
            *mut std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    CreateTextFilter: Option<unsafe extern "C" fn(*const std::ffi::c_char) -> TextFilter>,
    TextFilter_Clear: Option<unsafe extern "C" fn(TextFilter) -> ()>,
    TextFilter_Draw: Option<
        unsafe extern "C" fn(TextFilter, Context, *const std::ffi::c_char, *mut f64) -> bool,
    >,
    TextFilter_IsActive: Option<unsafe extern "C" fn(TextFilter) -> bool>,
    TextFilter_PassFilter:
        Option<unsafe extern "C" fn(TextFilter, *const std::ffi::c_char) -> bool>,
    TextFilter_Set: Option<unsafe extern "C" fn(TextFilter, *const std::ffi::c_char) -> ()>,
    CollapsingHeader: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut bool,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    GetTreeNodeToLabelSpacing: Option<unsafe extern "C" fn(Context) -> f64>,
    IsItemToggledOpen: Option<unsafe extern "C" fn(Context) -> bool>,
    SetNextItemOpen: Option<unsafe extern "C" fn(Context, bool, *mut std::ffi::c_int) -> ()>,
    TreeNode: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, *mut std::ffi::c_int) -> bool,
    >,
    TreeNodeEx: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *const std::ffi::c_char,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    TreePop: Option<unsafe extern "C" fn(Context) -> ()>,
    TreePush: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    GetVersion: Option<
        unsafe extern "C" fn(
            *mut std::ffi::c_char,
            std::ffi::c_int,
            *mut std::ffi::c_int,
            *mut std::ffi::c_char,
            std::ffi::c_int,
        ) -> (),
    >,
    NumericLimits_Float: Option<unsafe extern "C" fn(*mut f64, *mut f64) -> ()>,
    PointConvertNative: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64, *mut bool) -> ()>,
    ProgressBar: Option<
        unsafe extern "C" fn(Context, f64, *mut f64, *mut f64, *const std::ffi::c_char) -> (),
    >,
    SetClipboardText: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    ColorConvertDouble4ToU32: Option<unsafe extern "C" fn(f64, f64, f64, f64) -> std::ffi::c_int>,
    ColorConvertHSVtoRGB:
        Option<unsafe extern "C" fn(f64, f64, f64, *mut f64, *mut f64, *mut f64) -> ()>,
    ColorConvertNative: Option<unsafe extern "C" fn(std::ffi::c_int) -> std::ffi::c_int>,
    ColorConvertRGBtoHSV:
        Option<unsafe extern "C" fn(f64, f64, f64, *mut f64, *mut f64, *mut f64) -> ()>,
    ColorConvertU32ToDouble4:
        Option<unsafe extern "C" fn(std::ffi::c_int, *mut f64, *mut f64, *mut f64, *mut f64) -> ()>,
    PopID: Option<unsafe extern "C" fn(Context) -> ()>,
    PushID: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    LogFinish: Option<unsafe extern "C" fn(Context) -> ()>,
    LogText: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    LogToClipboard: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> ()>,
    LogToFile:
        Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int, *const std::ffi::c_char) -> ()>,
    LogToTTY: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> ()>,
    GetMainViewport: Option<unsafe extern "C" fn(Context) -> Viewport>,
    GetWindowViewport: Option<unsafe extern "C" fn(Context) -> Viewport>,
    Viewport_GetCenter: Option<unsafe extern "C" fn(Viewport, *mut f64, *mut f64) -> ()>,
    Viewport_GetPos: Option<unsafe extern "C" fn(Viewport, *mut f64, *mut f64) -> ()>,
    Viewport_GetSize: Option<unsafe extern "C" fn(Viewport, *mut f64, *mut f64) -> ()>,
    Viewport_GetWorkCenter: Option<unsafe extern "C" fn(Viewport, *mut f64, *mut f64) -> ()>,
    Viewport_GetWorkPos: Option<unsafe extern "C" fn(Viewport, *mut f64, *mut f64) -> ()>,
    Viewport_GetWorkSize: Option<unsafe extern "C" fn(Viewport, *mut f64, *mut f64) -> ()>,
    Begin: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut bool,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    End: Option<unsafe extern "C" fn(Context) -> ()>,
    BeginChild: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            *mut f64,
            *mut f64,
            *mut bool,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    BeginChildFrame: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            f64,
            f64,
            *mut std::ffi::c_int,
        ) -> bool,
    >,
    EndChild: Option<unsafe extern "C" fn(Context) -> ()>,
    EndChildFrame: Option<unsafe extern "C" fn(Context) -> ()>,
    GetContentRegionAvail: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetContentRegionMax: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetWindowContentRegionMax: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetWindowContentRegionMin: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    ShowAboutWindow: Option<unsafe extern "C" fn(Context, *mut bool) -> ()>,
    ShowDebugLogWindow: Option<unsafe extern "C" fn(Context, *mut bool) -> ()>,
    ShowMetricsWindow: Option<unsafe extern "C" fn(Context, *mut bool) -> ()>,
    ShowStackToolWindow: Option<unsafe extern "C" fn(Context, *mut bool) -> ()>,
    GetWindowDockID: Option<unsafe extern "C" fn(Context) -> std::ffi::c_int>,
    IsWindowDocked: Option<unsafe extern "C" fn(Context) -> bool>,
    SetNextWindowDockID:
        Option<unsafe extern "C" fn(Context, std::ffi::c_int, *mut std::ffi::c_int) -> ()>,
    GetWindowDpiScale: Option<unsafe extern "C" fn(Context) -> f64>,
    GetWindowHeight: Option<unsafe extern "C" fn(Context) -> f64>,
    GetWindowPos: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetWindowSize: Option<unsafe extern "C" fn(Context, *mut f64, *mut f64) -> ()>,
    GetWindowWidth: Option<unsafe extern "C" fn(Context) -> f64>,
    IsWindowAppearing: Option<unsafe extern "C" fn(Context) -> bool>,
    IsWindowCollapsed: Option<unsafe extern "C" fn(Context) -> bool>,
    IsWindowFocused: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> bool>,
    IsWindowHovered: Option<unsafe extern "C" fn(Context, *mut std::ffi::c_int) -> bool>,
    SetNextWindowBgAlpha: Option<unsafe extern "C" fn(Context, f64) -> ()>,
    SetNextWindowCollapsed: Option<unsafe extern "C" fn(Context, bool, *mut std::ffi::c_int) -> ()>,
    SetNextWindowContentSize: Option<unsafe extern "C" fn(Context, f64, f64) -> ()>,
    SetNextWindowFocus: Option<unsafe extern "C" fn(Context) -> ()>,
    SetNextWindowPos: Option<
        unsafe extern "C" fn(Context, f64, f64, *mut std::ffi::c_int, *mut f64, *mut f64) -> (),
    >,
    SetNextWindowScroll: Option<unsafe extern "C" fn(Context, f64, f64) -> ()>,
    SetNextWindowSize: Option<unsafe extern "C" fn(Context, f64, f64, *mut std::ffi::c_int) -> ()>,
    SetNextWindowSizeConstraints: Option<unsafe extern "C" fn(Context, f64, f64, f64, f64) -> ()>,
    SetWindowCollapsed: Option<unsafe extern "C" fn(Context, bool, *mut std::ffi::c_int) -> ()>,
    SetWindowCollapsedEx: Option<
        unsafe extern "C" fn(Context, *const std::ffi::c_char, bool, *mut std::ffi::c_int) -> (),
    >,
    SetWindowFocus: Option<unsafe extern "C" fn(Context) -> ()>,
    SetWindowFocusEx: Option<unsafe extern "C" fn(Context, *const std::ffi::c_char) -> ()>,
    SetWindowPos: Option<unsafe extern "C" fn(Context, f64, f64, *mut std::ffi::c_int) -> ()>,
    SetWindowPosEx: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            f64,
            f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    SetWindowSize: Option<unsafe extern "C" fn(Context, f64, f64, *mut std::ffi::c_int) -> ()>,
    SetWindowSizeEx: Option<
        unsafe extern "C" fn(
            Context,
            *const std::ffi::c_char,
            f64,
            f64,
            *mut std::ffi::c_int,
        ) -> (),
    >,
    GetScrollMaxX: Option<unsafe extern "C" fn(Context) -> f64>,
    GetScrollMaxY: Option<unsafe extern "C" fn(Context) -> f64>,
    GetScrollX: Option<unsafe extern "C" fn(Context) -> f64>,
    GetScrollY: Option<unsafe extern "C" fn(Context) -> f64>,
    SetScrollFromPosX: Option<unsafe extern "C" fn(Context, f64, *mut f64) -> ()>,
    SetScrollFromPosY: Option<unsafe extern "C" fn(Context, f64, *mut f64) -> ()>,
    SetScrollHereX: Option<unsafe extern "C" fn(Context, *mut f64) -> ()>,
    SetScrollHereY: Option<unsafe extern "C" fn(Context, *mut f64) -> ()>,
    SetScrollX: Option<unsafe extern "C" fn(Context, f64) -> ()>,
    SetScrollY: Option<unsafe extern "C" fn(Context, f64) -> ()>,
}
impl std::fmt::Debug for FunctionPointers {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("ImGui")
            .field("loaded_count", &self.loaded_count)
            .finish()
    }
}
struct ConstLoader {
    f: fn() -> i32,
}
